
Motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002412  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  00002412  00002486  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002448  00000000  00000000  000024a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000011a5  00000000  00000000  000048f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00005a95  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00005bd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00005d45  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  0000798e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00008879  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00009628  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00009788  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00009a15  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a1e3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e1       	ldi	r30, 0x12	; 18
      68:	f4 e2       	ldi	r31, 0x24	; 36
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 38       	cpi	r26, 0x82	; 130
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <main>
      7a:	0c 94 07 12 	jmp	0x240e	; 0x240e <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 d0 11 	jmp	0x23a0	; 0x23a0 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 ec 11 	jmp	0x23d8	; 0x23d8 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 dc 11 	jmp	0x23b8	; 0x23b8 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 f8 11 	jmp	0x23f0	; 0x23f0 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 dc 11 	jmp	0x23b8	; 0x23b8 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 f8 11 	jmp	0x23f0	; 0x23f0 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 d0 11 	jmp	0x23a0	; 0x23a0 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 ec 11 	jmp	0x23d8	; 0x23d8 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 dc 11 	jmp	0x23b8	; 0x23b8 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 f8 11 	jmp	0x23f0	; 0x23f0 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 dc 11 	jmp	0x23b8	; 0x23b8 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 f8 11 	jmp	0x23f0	; 0x23f0 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 dc 11 	jmp	0x23b8	; 0x23b8 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 f8 11 	jmp	0x23f0	; 0x23f0 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 e0 11 	jmp	0x23c0	; 0x23c0 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 fc 11 	jmp	0x23f8	; 0x23f8 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <DIO_u8SetPortDirection>:
#include "DIO_private.h"
#include "DIO_config.h"


u8 DIO_u8SetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	00 d0       	rcall	.+0      	; 0xb3c <DIO_u8SetPortDirection+0x6>
     b3c:	00 d0       	rcall	.+0      	; 0xb3e <DIO_u8SetPortDirection+0x8>
     b3e:	0f 92       	push	r0
     b40:	cd b7       	in	r28, 0x3d	; 61
     b42:	de b7       	in	r29, 0x3e	; 62
     b44:	8a 83       	std	Y+2, r24	; 0x02
     b46:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8RunState = DIO_OK;
     b48:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
     b4a:	8a 81       	ldd	r24, Y+2	; 0x02
     b4c:	28 2f       	mov	r18, r24
     b4e:	30 e0       	ldi	r19, 0x00	; 0
     b50:	3d 83       	std	Y+5, r19	; 0x05
     b52:	2c 83       	std	Y+4, r18	; 0x04
     b54:	8c 81       	ldd	r24, Y+4	; 0x04
     b56:	9d 81       	ldd	r25, Y+5	; 0x05
     b58:	81 30       	cpi	r24, 0x01	; 1
     b5a:	91 05       	cpc	r25, r1
     b5c:	d1 f0       	breq	.+52     	; 0xb92 <DIO_u8SetPortDirection+0x5c>
     b5e:	2c 81       	ldd	r18, Y+4	; 0x04
     b60:	3d 81       	ldd	r19, Y+5	; 0x05
     b62:	22 30       	cpi	r18, 0x02	; 2
     b64:	31 05       	cpc	r19, r1
     b66:	2c f4       	brge	.+10     	; 0xb72 <DIO_u8SetPortDirection+0x3c>
     b68:	8c 81       	ldd	r24, Y+4	; 0x04
     b6a:	9d 81       	ldd	r25, Y+5	; 0x05
     b6c:	00 97       	sbiw	r24, 0x00	; 0
     b6e:	61 f0       	breq	.+24     	; 0xb88 <DIO_u8SetPortDirection+0x52>
     b70:	1f c0       	rjmp	.+62     	; 0xbb0 <DIO_u8SetPortDirection+0x7a>
     b72:	2c 81       	ldd	r18, Y+4	; 0x04
     b74:	3d 81       	ldd	r19, Y+5	; 0x05
     b76:	22 30       	cpi	r18, 0x02	; 2
     b78:	31 05       	cpc	r19, r1
     b7a:	81 f0       	breq	.+32     	; 0xb9c <DIO_u8SetPortDirection+0x66>
     b7c:	8c 81       	ldd	r24, Y+4	; 0x04
     b7e:	9d 81       	ldd	r25, Y+5	; 0x05
     b80:	83 30       	cpi	r24, 0x03	; 3
     b82:	91 05       	cpc	r25, r1
     b84:	81 f0       	breq	.+32     	; 0xba6 <DIO_u8SetPortDirection+0x70>
     b86:	14 c0       	rjmp	.+40     	; 0xbb0 <DIO_u8SetPortDirection+0x7a>
	{
	case DIO_PORTA: DDRA = Copy_u8Direction; break;
     b88:	ea e3       	ldi	r30, 0x3A	; 58
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	8b 81       	ldd	r24, Y+3	; 0x03
     b8e:	80 83       	st	Z, r24
     b90:	11 c0       	rjmp	.+34     	; 0xbb4 <DIO_u8SetPortDirection+0x7e>
	case DIO_PORTB:	DDRB = Copy_u8Direction; break;
     b92:	e7 e3       	ldi	r30, 0x37	; 55
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	8b 81       	ldd	r24, Y+3	; 0x03
     b98:	80 83       	st	Z, r24
     b9a:	0c c0       	rjmp	.+24     	; 0xbb4 <DIO_u8SetPortDirection+0x7e>
	case DIO_PORTC: DDRC = Copy_u8Direction; break;
     b9c:	e4 e3       	ldi	r30, 0x34	; 52
     b9e:	f0 e0       	ldi	r31, 0x00	; 0
     ba0:	8b 81       	ldd	r24, Y+3	; 0x03
     ba2:	80 83       	st	Z, r24
     ba4:	07 c0       	rjmp	.+14     	; 0xbb4 <DIO_u8SetPortDirection+0x7e>
	case DIO_PORTD: DDRD = Copy_u8Direction; break;
     ba6:	e1 e3       	ldi	r30, 0x31	; 49
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	8b 81       	ldd	r24, Y+3	; 0x03
     bac:	80 83       	st	Z, r24
     bae:	02 c0       	rjmp	.+4      	; 0xbb4 <DIO_u8SetPortDirection+0x7e>
	default: Local_u8RunState = DIO_ERROR;
     bb0:	81 e0       	ldi	r24, 0x01	; 1
     bb2:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8RunState;
     bb4:	89 81       	ldd	r24, Y+1	; 0x01
}
     bb6:	0f 90       	pop	r0
     bb8:	0f 90       	pop	r0
     bba:	0f 90       	pop	r0
     bbc:	0f 90       	pop	r0
     bbe:	0f 90       	pop	r0
     bc0:	cf 91       	pop	r28
     bc2:	df 91       	pop	r29
     bc4:	08 95       	ret

00000bc6 <DIO_u8SetPortValue>:


u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
     bc6:	df 93       	push	r29
     bc8:	cf 93       	push	r28
     bca:	00 d0       	rcall	.+0      	; 0xbcc <DIO_u8SetPortValue+0x6>
     bcc:	00 d0       	rcall	.+0      	; 0xbce <DIO_u8SetPortValue+0x8>
     bce:	0f 92       	push	r0
     bd0:	cd b7       	in	r28, 0x3d	; 61
     bd2:	de b7       	in	r29, 0x3e	; 62
     bd4:	8a 83       	std	Y+2, r24	; 0x02
     bd6:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8RunState = DIO_OK;
     bd8:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
     bda:	8a 81       	ldd	r24, Y+2	; 0x02
     bdc:	28 2f       	mov	r18, r24
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	3d 83       	std	Y+5, r19	; 0x05
     be2:	2c 83       	std	Y+4, r18	; 0x04
     be4:	8c 81       	ldd	r24, Y+4	; 0x04
     be6:	9d 81       	ldd	r25, Y+5	; 0x05
     be8:	81 30       	cpi	r24, 0x01	; 1
     bea:	91 05       	cpc	r25, r1
     bec:	d1 f0       	breq	.+52     	; 0xc22 <DIO_u8SetPortValue+0x5c>
     bee:	2c 81       	ldd	r18, Y+4	; 0x04
     bf0:	3d 81       	ldd	r19, Y+5	; 0x05
     bf2:	22 30       	cpi	r18, 0x02	; 2
     bf4:	31 05       	cpc	r19, r1
     bf6:	2c f4       	brge	.+10     	; 0xc02 <DIO_u8SetPortValue+0x3c>
     bf8:	8c 81       	ldd	r24, Y+4	; 0x04
     bfa:	9d 81       	ldd	r25, Y+5	; 0x05
     bfc:	00 97       	sbiw	r24, 0x00	; 0
     bfe:	61 f0       	breq	.+24     	; 0xc18 <DIO_u8SetPortValue+0x52>
     c00:	1f c0       	rjmp	.+62     	; 0xc40 <DIO_u8SetPortValue+0x7a>
     c02:	2c 81       	ldd	r18, Y+4	; 0x04
     c04:	3d 81       	ldd	r19, Y+5	; 0x05
     c06:	22 30       	cpi	r18, 0x02	; 2
     c08:	31 05       	cpc	r19, r1
     c0a:	81 f0       	breq	.+32     	; 0xc2c <DIO_u8SetPortValue+0x66>
     c0c:	8c 81       	ldd	r24, Y+4	; 0x04
     c0e:	9d 81       	ldd	r25, Y+5	; 0x05
     c10:	83 30       	cpi	r24, 0x03	; 3
     c12:	91 05       	cpc	r25, r1
     c14:	81 f0       	breq	.+32     	; 0xc36 <DIO_u8SetPortValue+0x70>
     c16:	14 c0       	rjmp	.+40     	; 0xc40 <DIO_u8SetPortValue+0x7a>
	{
	case DIO_PORTA: PORTA = Copy_u8Value; break;
     c18:	eb e3       	ldi	r30, 0x3B	; 59
     c1a:	f0 e0       	ldi	r31, 0x00	; 0
     c1c:	8b 81       	ldd	r24, Y+3	; 0x03
     c1e:	80 83       	st	Z, r24
     c20:	11 c0       	rjmp	.+34     	; 0xc44 <DIO_u8SetPortValue+0x7e>
	case DIO_PORTB:	PORTB = Copy_u8Value; break;
     c22:	e8 e3       	ldi	r30, 0x38	; 56
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	8b 81       	ldd	r24, Y+3	; 0x03
     c28:	80 83       	st	Z, r24
     c2a:	0c c0       	rjmp	.+24     	; 0xc44 <DIO_u8SetPortValue+0x7e>
	case DIO_PORTC: PORTC = Copy_u8Value; break;
     c2c:	e5 e3       	ldi	r30, 0x35	; 53
     c2e:	f0 e0       	ldi	r31, 0x00	; 0
     c30:	8b 81       	ldd	r24, Y+3	; 0x03
     c32:	80 83       	st	Z, r24
     c34:	07 c0       	rjmp	.+14     	; 0xc44 <DIO_u8SetPortValue+0x7e>
	case DIO_PORTD: PORTD = Copy_u8Value; break;
     c36:	e2 e3       	ldi	r30, 0x32	; 50
     c38:	f0 e0       	ldi	r31, 0x00	; 0
     c3a:	8b 81       	ldd	r24, Y+3	; 0x03
     c3c:	80 83       	st	Z, r24
     c3e:	02 c0       	rjmp	.+4      	; 0xc44 <DIO_u8SetPortValue+0x7e>
	default: Local_u8RunState = DIO_ERROR;
     c40:	81 e0       	ldi	r24, 0x01	; 1
     c42:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8RunState;
     c44:	89 81       	ldd	r24, Y+1	; 0x01
}
     c46:	0f 90       	pop	r0
     c48:	0f 90       	pop	r0
     c4a:	0f 90       	pop	r0
     c4c:	0f 90       	pop	r0
     c4e:	0f 90       	pop	r0
     c50:	cf 91       	pop	r28
     c52:	df 91       	pop	r29
     c54:	08 95       	ret

00000c56 <DIO_u8GetPortValue>:


u8 DIO_u8GetPortValue(u8 Copy_u8Port, u8 *Copy_u8Variable)
{
     c56:	df 93       	push	r29
     c58:	cf 93       	push	r28
     c5a:	00 d0       	rcall	.+0      	; 0xc5c <DIO_u8GetPortValue+0x6>
     c5c:	00 d0       	rcall	.+0      	; 0xc5e <DIO_u8GetPortValue+0x8>
     c5e:	00 d0       	rcall	.+0      	; 0xc60 <DIO_u8GetPortValue+0xa>
     c60:	cd b7       	in	r28, 0x3d	; 61
     c62:	de b7       	in	r29, 0x3e	; 62
     c64:	8a 83       	std	Y+2, r24	; 0x02
     c66:	7c 83       	std	Y+4, r23	; 0x04
     c68:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8RunState = DIO_OK;
     c6a:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Variable != NULL)
     c6c:	8b 81       	ldd	r24, Y+3	; 0x03
     c6e:	9c 81       	ldd	r25, Y+4	; 0x04
     c70:	00 97       	sbiw	r24, 0x00	; 0
     c72:	09 f4       	brne	.+2      	; 0xc76 <DIO_u8GetPortValue+0x20>
     c74:	3e c0       	rjmp	.+124    	; 0xcf2 <DIO_u8GetPortValue+0x9c>
	{
		switch(Copy_u8Port)
     c76:	8a 81       	ldd	r24, Y+2	; 0x02
     c78:	28 2f       	mov	r18, r24
     c7a:	30 e0       	ldi	r19, 0x00	; 0
     c7c:	3e 83       	std	Y+6, r19	; 0x06
     c7e:	2d 83       	std	Y+5, r18	; 0x05
     c80:	8d 81       	ldd	r24, Y+5	; 0x05
     c82:	9e 81       	ldd	r25, Y+6	; 0x06
     c84:	81 30       	cpi	r24, 0x01	; 1
     c86:	91 05       	cpc	r25, r1
     c88:	e1 f0       	breq	.+56     	; 0xcc2 <DIO_u8GetPortValue+0x6c>
     c8a:	2d 81       	ldd	r18, Y+5	; 0x05
     c8c:	3e 81       	ldd	r19, Y+6	; 0x06
     c8e:	22 30       	cpi	r18, 0x02	; 2
     c90:	31 05       	cpc	r19, r1
     c92:	2c f4       	brge	.+10     	; 0xc9e <DIO_u8GetPortValue+0x48>
     c94:	8d 81       	ldd	r24, Y+5	; 0x05
     c96:	9e 81       	ldd	r25, Y+6	; 0x06
     c98:	00 97       	sbiw	r24, 0x00	; 0
     c9a:	61 f0       	breq	.+24     	; 0xcb4 <DIO_u8GetPortValue+0x5e>
     c9c:	27 c0       	rjmp	.+78     	; 0xcec <DIO_u8GetPortValue+0x96>
     c9e:	2d 81       	ldd	r18, Y+5	; 0x05
     ca0:	3e 81       	ldd	r19, Y+6	; 0x06
     ca2:	22 30       	cpi	r18, 0x02	; 2
     ca4:	31 05       	cpc	r19, r1
     ca6:	a1 f0       	breq	.+40     	; 0xcd0 <DIO_u8GetPortValue+0x7a>
     ca8:	8d 81       	ldd	r24, Y+5	; 0x05
     caa:	9e 81       	ldd	r25, Y+6	; 0x06
     cac:	83 30       	cpi	r24, 0x03	; 3
     cae:	91 05       	cpc	r25, r1
     cb0:	b1 f0       	breq	.+44     	; 0xcde <DIO_u8GetPortValue+0x88>
     cb2:	1c c0       	rjmp	.+56     	; 0xcec <DIO_u8GetPortValue+0x96>
		{
		case DIO_PORTA: *Copy_u8Variable = PINA; break;
     cb4:	e9 e3       	ldi	r30, 0x39	; 57
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	80 81       	ld	r24, Z
     cba:	eb 81       	ldd	r30, Y+3	; 0x03
     cbc:	fc 81       	ldd	r31, Y+4	; 0x04
     cbe:	80 83       	st	Z, r24
     cc0:	1a c0       	rjmp	.+52     	; 0xcf6 <DIO_u8GetPortValue+0xa0>
		case DIO_PORTB:	*Copy_u8Variable = PINB; break;
     cc2:	e6 e3       	ldi	r30, 0x36	; 54
     cc4:	f0 e0       	ldi	r31, 0x00	; 0
     cc6:	80 81       	ld	r24, Z
     cc8:	eb 81       	ldd	r30, Y+3	; 0x03
     cca:	fc 81       	ldd	r31, Y+4	; 0x04
     ccc:	80 83       	st	Z, r24
     cce:	13 c0       	rjmp	.+38     	; 0xcf6 <DIO_u8GetPortValue+0xa0>
		case DIO_PORTC: *Copy_u8Variable = PINC; break;
     cd0:	e3 e3       	ldi	r30, 0x33	; 51
     cd2:	f0 e0       	ldi	r31, 0x00	; 0
     cd4:	80 81       	ld	r24, Z
     cd6:	eb 81       	ldd	r30, Y+3	; 0x03
     cd8:	fc 81       	ldd	r31, Y+4	; 0x04
     cda:	80 83       	st	Z, r24
     cdc:	0c c0       	rjmp	.+24     	; 0xcf6 <DIO_u8GetPortValue+0xa0>
		case DIO_PORTD: *Copy_u8Variable = PIND; break;
     cde:	e0 e3       	ldi	r30, 0x30	; 48
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	80 81       	ld	r24, Z
     ce4:	eb 81       	ldd	r30, Y+3	; 0x03
     ce6:	fc 81       	ldd	r31, Y+4	; 0x04
     ce8:	80 83       	st	Z, r24
     cea:	05 c0       	rjmp	.+10     	; 0xcf6 <DIO_u8GetPortValue+0xa0>
		default: Local_u8RunState = DIO_ERROR;
     cec:	81 e0       	ldi	r24, 0x01	; 1
     cee:	89 83       	std	Y+1, r24	; 0x01
     cf0:	02 c0       	rjmp	.+4      	; 0xcf6 <DIO_u8GetPortValue+0xa0>
		}
	}
	else
	{
		Local_u8RunState = DIO_ERROR;
     cf2:	81 e0       	ldi	r24, 0x01	; 1
     cf4:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8RunState;
     cf6:	89 81       	ldd	r24, Y+1	; 0x01
}
     cf8:	26 96       	adiw	r28, 0x06	; 6
     cfa:	0f b6       	in	r0, 0x3f	; 63
     cfc:	f8 94       	cli
     cfe:	de bf       	out	0x3e, r29	; 62
     d00:	0f be       	out	0x3f, r0	; 63
     d02:	cd bf       	out	0x3d, r28	; 61
     d04:	cf 91       	pop	r28
     d06:	df 91       	pop	r29
     d08:	08 95       	ret

00000d0a <DIO_u8SetPinDirection>:


u8 DIO_u8SetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
     d0a:	df 93       	push	r29
     d0c:	cf 93       	push	r28
     d0e:	cd b7       	in	r28, 0x3d	; 61
     d10:	de b7       	in	r29, 0x3e	; 62
     d12:	28 97       	sbiw	r28, 0x08	; 8
     d14:	0f b6       	in	r0, 0x3f	; 63
     d16:	f8 94       	cli
     d18:	de bf       	out	0x3e, r29	; 62
     d1a:	0f be       	out	0x3f, r0	; 63
     d1c:	cd bf       	out	0x3d, r28	; 61
     d1e:	8a 83       	std	Y+2, r24	; 0x02
     d20:	6b 83       	std	Y+3, r22	; 0x03
     d22:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8RunState = DIO_OK;
     d24:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8Pin >= DIO_PIN0) && (Copy_u8Pin <= DIO_PIN7))
     d26:	8b 81       	ldd	r24, Y+3	; 0x03
     d28:	88 30       	cpi	r24, 0x08	; 8
     d2a:	08 f0       	brcs	.+2      	; 0xd2e <DIO_u8SetPinDirection+0x24>
     d2c:	f4 c0       	rjmp	.+488    	; 0xf16 <DIO_u8SetPinDirection+0x20c>
	{
		if(Copy_u8Direction == DIO_PIN_INPUT)
     d2e:	8c 81       	ldd	r24, Y+4	; 0x04
     d30:	88 23       	and	r24, r24
     d32:	09 f0       	breq	.+2      	; 0xd36 <DIO_u8SetPinDirection+0x2c>
     d34:	77 c0       	rjmp	.+238    	; 0xe24 <DIO_u8SetPinDirection+0x11a>
		{
			switch(Copy_u8Port)
     d36:	8a 81       	ldd	r24, Y+2	; 0x02
     d38:	28 2f       	mov	r18, r24
     d3a:	30 e0       	ldi	r19, 0x00	; 0
     d3c:	38 87       	std	Y+8, r19	; 0x08
     d3e:	2f 83       	std	Y+7, r18	; 0x07
     d40:	8f 81       	ldd	r24, Y+7	; 0x07
     d42:	98 85       	ldd	r25, Y+8	; 0x08
     d44:	81 30       	cpi	r24, 0x01	; 1
     d46:	91 05       	cpc	r25, r1
     d48:	59 f1       	breq	.+86     	; 0xda0 <DIO_u8SetPinDirection+0x96>
     d4a:	2f 81       	ldd	r18, Y+7	; 0x07
     d4c:	38 85       	ldd	r19, Y+8	; 0x08
     d4e:	22 30       	cpi	r18, 0x02	; 2
     d50:	31 05       	cpc	r19, r1
     d52:	2c f4       	brge	.+10     	; 0xd5e <DIO_u8SetPinDirection+0x54>
     d54:	8f 81       	ldd	r24, Y+7	; 0x07
     d56:	98 85       	ldd	r25, Y+8	; 0x08
     d58:	00 97       	sbiw	r24, 0x00	; 0
     d5a:	69 f0       	breq	.+26     	; 0xd76 <DIO_u8SetPinDirection+0x6c>
     d5c:	60 c0       	rjmp	.+192    	; 0xe1e <DIO_u8SetPinDirection+0x114>
     d5e:	2f 81       	ldd	r18, Y+7	; 0x07
     d60:	38 85       	ldd	r19, Y+8	; 0x08
     d62:	22 30       	cpi	r18, 0x02	; 2
     d64:	31 05       	cpc	r19, r1
     d66:	89 f1       	breq	.+98     	; 0xdca <DIO_u8SetPinDirection+0xc0>
     d68:	8f 81       	ldd	r24, Y+7	; 0x07
     d6a:	98 85       	ldd	r25, Y+8	; 0x08
     d6c:	83 30       	cpi	r24, 0x03	; 3
     d6e:	91 05       	cpc	r25, r1
     d70:	09 f4       	brne	.+2      	; 0xd74 <DIO_u8SetPinDirection+0x6a>
     d72:	40 c0       	rjmp	.+128    	; 0xdf4 <DIO_u8SetPinDirection+0xea>
     d74:	54 c0       	rjmp	.+168    	; 0xe1e <DIO_u8SetPinDirection+0x114>
			{
			case DIO_PORTA: CLR_BIT(DDRA, Copy_u8Pin); break;
     d76:	aa e3       	ldi	r26, 0x3A	; 58
     d78:	b0 e0       	ldi	r27, 0x00	; 0
     d7a:	ea e3       	ldi	r30, 0x3A	; 58
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	80 81       	ld	r24, Z
     d80:	48 2f       	mov	r20, r24
     d82:	8b 81       	ldd	r24, Y+3	; 0x03
     d84:	28 2f       	mov	r18, r24
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	81 e0       	ldi	r24, 0x01	; 1
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	02 2e       	mov	r0, r18
     d8e:	02 c0       	rjmp	.+4      	; 0xd94 <DIO_u8SetPinDirection+0x8a>
     d90:	88 0f       	add	r24, r24
     d92:	99 1f       	adc	r25, r25
     d94:	0a 94       	dec	r0
     d96:	e2 f7       	brpl	.-8      	; 0xd90 <DIO_u8SetPinDirection+0x86>
     d98:	80 95       	com	r24
     d9a:	84 23       	and	r24, r20
     d9c:	8c 93       	st	X, r24
     d9e:	bd c0       	rjmp	.+378    	; 0xf1a <DIO_u8SetPinDirection+0x210>
			case DIO_PORTB:	CLR_BIT(DDRB, Copy_u8Pin); break;
     da0:	a7 e3       	ldi	r26, 0x37	; 55
     da2:	b0 e0       	ldi	r27, 0x00	; 0
     da4:	e7 e3       	ldi	r30, 0x37	; 55
     da6:	f0 e0       	ldi	r31, 0x00	; 0
     da8:	80 81       	ld	r24, Z
     daa:	48 2f       	mov	r20, r24
     dac:	8b 81       	ldd	r24, Y+3	; 0x03
     dae:	28 2f       	mov	r18, r24
     db0:	30 e0       	ldi	r19, 0x00	; 0
     db2:	81 e0       	ldi	r24, 0x01	; 1
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	02 2e       	mov	r0, r18
     db8:	02 c0       	rjmp	.+4      	; 0xdbe <DIO_u8SetPinDirection+0xb4>
     dba:	88 0f       	add	r24, r24
     dbc:	99 1f       	adc	r25, r25
     dbe:	0a 94       	dec	r0
     dc0:	e2 f7       	brpl	.-8      	; 0xdba <DIO_u8SetPinDirection+0xb0>
     dc2:	80 95       	com	r24
     dc4:	84 23       	and	r24, r20
     dc6:	8c 93       	st	X, r24
     dc8:	a8 c0       	rjmp	.+336    	; 0xf1a <DIO_u8SetPinDirection+0x210>
			case DIO_PORTC: CLR_BIT(DDRC, Copy_u8Pin); break;
     dca:	a4 e3       	ldi	r26, 0x34	; 52
     dcc:	b0 e0       	ldi	r27, 0x00	; 0
     dce:	e4 e3       	ldi	r30, 0x34	; 52
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
     dd2:	80 81       	ld	r24, Z
     dd4:	48 2f       	mov	r20, r24
     dd6:	8b 81       	ldd	r24, Y+3	; 0x03
     dd8:	28 2f       	mov	r18, r24
     dda:	30 e0       	ldi	r19, 0x00	; 0
     ddc:	81 e0       	ldi	r24, 0x01	; 1
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	02 2e       	mov	r0, r18
     de2:	02 c0       	rjmp	.+4      	; 0xde8 <DIO_u8SetPinDirection+0xde>
     de4:	88 0f       	add	r24, r24
     de6:	99 1f       	adc	r25, r25
     de8:	0a 94       	dec	r0
     dea:	e2 f7       	brpl	.-8      	; 0xde4 <DIO_u8SetPinDirection+0xda>
     dec:	80 95       	com	r24
     dee:	84 23       	and	r24, r20
     df0:	8c 93       	st	X, r24
     df2:	93 c0       	rjmp	.+294    	; 0xf1a <DIO_u8SetPinDirection+0x210>
			case DIO_PORTD: CLR_BIT(DDRD, Copy_u8Pin); break;
     df4:	a1 e3       	ldi	r26, 0x31	; 49
     df6:	b0 e0       	ldi	r27, 0x00	; 0
     df8:	e1 e3       	ldi	r30, 0x31	; 49
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	80 81       	ld	r24, Z
     dfe:	48 2f       	mov	r20, r24
     e00:	8b 81       	ldd	r24, Y+3	; 0x03
     e02:	28 2f       	mov	r18, r24
     e04:	30 e0       	ldi	r19, 0x00	; 0
     e06:	81 e0       	ldi	r24, 0x01	; 1
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	02 2e       	mov	r0, r18
     e0c:	02 c0       	rjmp	.+4      	; 0xe12 <DIO_u8SetPinDirection+0x108>
     e0e:	88 0f       	add	r24, r24
     e10:	99 1f       	adc	r25, r25
     e12:	0a 94       	dec	r0
     e14:	e2 f7       	brpl	.-8      	; 0xe0e <DIO_u8SetPinDirection+0x104>
     e16:	80 95       	com	r24
     e18:	84 23       	and	r24, r20
     e1a:	8c 93       	st	X, r24
     e1c:	7e c0       	rjmp	.+252    	; 0xf1a <DIO_u8SetPinDirection+0x210>
			default: Local_u8RunState = DIO_ERROR;
     e1e:	81 e0       	ldi	r24, 0x01	; 1
     e20:	89 83       	std	Y+1, r24	; 0x01
     e22:	7b c0       	rjmp	.+246    	; 0xf1a <DIO_u8SetPinDirection+0x210>
			}
		}
		else if(Copy_u8Direction == DIO_PIN_OUTPUT)
     e24:	8c 81       	ldd	r24, Y+4	; 0x04
     e26:	81 30       	cpi	r24, 0x01	; 1
     e28:	09 f0       	breq	.+2      	; 0xe2c <DIO_u8SetPinDirection+0x122>
     e2a:	72 c0       	rjmp	.+228    	; 0xf10 <DIO_u8SetPinDirection+0x206>
		{
			switch(Copy_u8Port)
     e2c:	8a 81       	ldd	r24, Y+2	; 0x02
     e2e:	28 2f       	mov	r18, r24
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	3e 83       	std	Y+6, r19	; 0x06
     e34:	2d 83       	std	Y+5, r18	; 0x05
     e36:	8d 81       	ldd	r24, Y+5	; 0x05
     e38:	9e 81       	ldd	r25, Y+6	; 0x06
     e3a:	81 30       	cpi	r24, 0x01	; 1
     e3c:	91 05       	cpc	r25, r1
     e3e:	49 f1       	breq	.+82     	; 0xe92 <DIO_u8SetPinDirection+0x188>
     e40:	2d 81       	ldd	r18, Y+5	; 0x05
     e42:	3e 81       	ldd	r19, Y+6	; 0x06
     e44:	22 30       	cpi	r18, 0x02	; 2
     e46:	31 05       	cpc	r19, r1
     e48:	2c f4       	brge	.+10     	; 0xe54 <DIO_u8SetPinDirection+0x14a>
     e4a:	8d 81       	ldd	r24, Y+5	; 0x05
     e4c:	9e 81       	ldd	r25, Y+6	; 0x06
     e4e:	00 97       	sbiw	r24, 0x00	; 0
     e50:	61 f0       	breq	.+24     	; 0xe6a <DIO_u8SetPinDirection+0x160>
     e52:	5b c0       	rjmp	.+182    	; 0xf0a <DIO_u8SetPinDirection+0x200>
     e54:	2d 81       	ldd	r18, Y+5	; 0x05
     e56:	3e 81       	ldd	r19, Y+6	; 0x06
     e58:	22 30       	cpi	r18, 0x02	; 2
     e5a:	31 05       	cpc	r19, r1
     e5c:	71 f1       	breq	.+92     	; 0xeba <DIO_u8SetPinDirection+0x1b0>
     e5e:	8d 81       	ldd	r24, Y+5	; 0x05
     e60:	9e 81       	ldd	r25, Y+6	; 0x06
     e62:	83 30       	cpi	r24, 0x03	; 3
     e64:	91 05       	cpc	r25, r1
     e66:	e9 f1       	breq	.+122    	; 0xee2 <DIO_u8SetPinDirection+0x1d8>
     e68:	50 c0       	rjmp	.+160    	; 0xf0a <DIO_u8SetPinDirection+0x200>
			{
			case DIO_PORTA: SET_BIT(DDRA, Copy_u8Pin); break;
     e6a:	aa e3       	ldi	r26, 0x3A	; 58
     e6c:	b0 e0       	ldi	r27, 0x00	; 0
     e6e:	ea e3       	ldi	r30, 0x3A	; 58
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	80 81       	ld	r24, Z
     e74:	48 2f       	mov	r20, r24
     e76:	8b 81       	ldd	r24, Y+3	; 0x03
     e78:	28 2f       	mov	r18, r24
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	81 e0       	ldi	r24, 0x01	; 1
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	02 2e       	mov	r0, r18
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <DIO_u8SetPinDirection+0x17e>
     e84:	88 0f       	add	r24, r24
     e86:	99 1f       	adc	r25, r25
     e88:	0a 94       	dec	r0
     e8a:	e2 f7       	brpl	.-8      	; 0xe84 <DIO_u8SetPinDirection+0x17a>
     e8c:	84 2b       	or	r24, r20
     e8e:	8c 93       	st	X, r24
     e90:	44 c0       	rjmp	.+136    	; 0xf1a <DIO_u8SetPinDirection+0x210>
			case DIO_PORTB:	SET_BIT(DDRB, Copy_u8Pin); break;
     e92:	a7 e3       	ldi	r26, 0x37	; 55
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	e7 e3       	ldi	r30, 0x37	; 55
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	48 2f       	mov	r20, r24
     e9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	02 2e       	mov	r0, r18
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <DIO_u8SetPinDirection+0x1a6>
     eac:	88 0f       	add	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	0a 94       	dec	r0
     eb2:	e2 f7       	brpl	.-8      	; 0xeac <DIO_u8SetPinDirection+0x1a2>
     eb4:	84 2b       	or	r24, r20
     eb6:	8c 93       	st	X, r24
     eb8:	30 c0       	rjmp	.+96     	; 0xf1a <DIO_u8SetPinDirection+0x210>
			case DIO_PORTC: SET_BIT(DDRC, Copy_u8Pin); break;
     eba:	a4 e3       	ldi	r26, 0x34	; 52
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	e4 e3       	ldi	r30, 0x34	; 52
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	48 2f       	mov	r20, r24
     ec6:	8b 81       	ldd	r24, Y+3	; 0x03
     ec8:	28 2f       	mov	r18, r24
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	02 2e       	mov	r0, r18
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <DIO_u8SetPinDirection+0x1ce>
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	0a 94       	dec	r0
     eda:	e2 f7       	brpl	.-8      	; 0xed4 <DIO_u8SetPinDirection+0x1ca>
     edc:	84 2b       	or	r24, r20
     ede:	8c 93       	st	X, r24
     ee0:	1c c0       	rjmp	.+56     	; 0xf1a <DIO_u8SetPinDirection+0x210>
			case DIO_PORTD: SET_BIT(DDRD, Copy_u8Pin); break;
     ee2:	a1 e3       	ldi	r26, 0x31	; 49
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	e1 e3       	ldi	r30, 0x31	; 49
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	48 2f       	mov	r20, r24
     eee:	8b 81       	ldd	r24, Y+3	; 0x03
     ef0:	28 2f       	mov	r18, r24
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	02 2e       	mov	r0, r18
     efa:	02 c0       	rjmp	.+4      	; 0xf00 <DIO_u8SetPinDirection+0x1f6>
     efc:	88 0f       	add	r24, r24
     efe:	99 1f       	adc	r25, r25
     f00:	0a 94       	dec	r0
     f02:	e2 f7       	brpl	.-8      	; 0xefc <DIO_u8SetPinDirection+0x1f2>
     f04:	84 2b       	or	r24, r20
     f06:	8c 93       	st	X, r24
     f08:	08 c0       	rjmp	.+16     	; 0xf1a <DIO_u8SetPinDirection+0x210>
			default: Local_u8RunState = DIO_ERROR;
     f0a:	81 e0       	ldi	r24, 0x01	; 1
     f0c:	89 83       	std	Y+1, r24	; 0x01
     f0e:	05 c0       	rjmp	.+10     	; 0xf1a <DIO_u8SetPinDirection+0x210>
			}
		}
		else
		{
			Local_u8RunState = DIO_ERROR;
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	89 83       	std	Y+1, r24	; 0x01
     f14:	02 c0       	rjmp	.+4      	; 0xf1a <DIO_u8SetPinDirection+0x210>
		}
	}
	else
	{
		Local_u8RunState = DIO_ERROR;
     f16:	81 e0       	ldi	r24, 0x01	; 1
     f18:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8RunState;
     f1a:	89 81       	ldd	r24, Y+1	; 0x01
}
     f1c:	28 96       	adiw	r28, 0x08	; 8
     f1e:	0f b6       	in	r0, 0x3f	; 63
     f20:	f8 94       	cli
     f22:	de bf       	out	0x3e, r29	; 62
     f24:	0f be       	out	0x3f, r0	; 63
     f26:	cd bf       	out	0x3d, r28	; 61
     f28:	cf 91       	pop	r28
     f2a:	df 91       	pop	r29
     f2c:	08 95       	ret

00000f2e <DIO_u8SetPinValue>:


u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
     f2e:	df 93       	push	r29
     f30:	cf 93       	push	r28
     f32:	cd b7       	in	r28, 0x3d	; 61
     f34:	de b7       	in	r29, 0x3e	; 62
     f36:	28 97       	sbiw	r28, 0x08	; 8
     f38:	0f b6       	in	r0, 0x3f	; 63
     f3a:	f8 94       	cli
     f3c:	de bf       	out	0x3e, r29	; 62
     f3e:	0f be       	out	0x3f, r0	; 63
     f40:	cd bf       	out	0x3d, r28	; 61
     f42:	8a 83       	std	Y+2, r24	; 0x02
     f44:	6b 83       	std	Y+3, r22	; 0x03
     f46:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8RunState = DIO_OK;
     f48:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8Pin >= DIO_PIN0) && (Copy_u8Pin <= DIO_PIN7))
     f4a:	8b 81       	ldd	r24, Y+3	; 0x03
     f4c:	88 30       	cpi	r24, 0x08	; 8
     f4e:	08 f0       	brcs	.+2      	; 0xf52 <DIO_u8SetPinValue+0x24>
     f50:	f4 c0       	rjmp	.+488    	; 0x113a <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value == DIO_PIN_LOW)
     f52:	8c 81       	ldd	r24, Y+4	; 0x04
     f54:	88 23       	and	r24, r24
     f56:	09 f0       	breq	.+2      	; 0xf5a <DIO_u8SetPinValue+0x2c>
     f58:	77 c0       	rjmp	.+238    	; 0x1048 <DIO_u8SetPinValue+0x11a>
		{
			switch(Copy_u8Port)
     f5a:	8a 81       	ldd	r24, Y+2	; 0x02
     f5c:	28 2f       	mov	r18, r24
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	38 87       	std	Y+8, r19	; 0x08
     f62:	2f 83       	std	Y+7, r18	; 0x07
     f64:	8f 81       	ldd	r24, Y+7	; 0x07
     f66:	98 85       	ldd	r25, Y+8	; 0x08
     f68:	81 30       	cpi	r24, 0x01	; 1
     f6a:	91 05       	cpc	r25, r1
     f6c:	59 f1       	breq	.+86     	; 0xfc4 <DIO_u8SetPinValue+0x96>
     f6e:	2f 81       	ldd	r18, Y+7	; 0x07
     f70:	38 85       	ldd	r19, Y+8	; 0x08
     f72:	22 30       	cpi	r18, 0x02	; 2
     f74:	31 05       	cpc	r19, r1
     f76:	2c f4       	brge	.+10     	; 0xf82 <DIO_u8SetPinValue+0x54>
     f78:	8f 81       	ldd	r24, Y+7	; 0x07
     f7a:	98 85       	ldd	r25, Y+8	; 0x08
     f7c:	00 97       	sbiw	r24, 0x00	; 0
     f7e:	69 f0       	breq	.+26     	; 0xf9a <DIO_u8SetPinValue+0x6c>
     f80:	60 c0       	rjmp	.+192    	; 0x1042 <DIO_u8SetPinValue+0x114>
     f82:	2f 81       	ldd	r18, Y+7	; 0x07
     f84:	38 85       	ldd	r19, Y+8	; 0x08
     f86:	22 30       	cpi	r18, 0x02	; 2
     f88:	31 05       	cpc	r19, r1
     f8a:	89 f1       	breq	.+98     	; 0xfee <DIO_u8SetPinValue+0xc0>
     f8c:	8f 81       	ldd	r24, Y+7	; 0x07
     f8e:	98 85       	ldd	r25, Y+8	; 0x08
     f90:	83 30       	cpi	r24, 0x03	; 3
     f92:	91 05       	cpc	r25, r1
     f94:	09 f4       	brne	.+2      	; 0xf98 <DIO_u8SetPinValue+0x6a>
     f96:	40 c0       	rjmp	.+128    	; 0x1018 <DIO_u8SetPinValue+0xea>
     f98:	54 c0       	rjmp	.+168    	; 0x1042 <DIO_u8SetPinValue+0x114>
			{
			case DIO_PORTA: CLR_BIT(PORTA, Copy_u8Pin); break;
     f9a:	ab e3       	ldi	r26, 0x3B	; 59
     f9c:	b0 e0       	ldi	r27, 0x00	; 0
     f9e:	eb e3       	ldi	r30, 0x3B	; 59
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	80 81       	ld	r24, Z
     fa4:	48 2f       	mov	r20, r24
     fa6:	8b 81       	ldd	r24, Y+3	; 0x03
     fa8:	28 2f       	mov	r18, r24
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	02 2e       	mov	r0, r18
     fb2:	02 c0       	rjmp	.+4      	; 0xfb8 <DIO_u8SetPinValue+0x8a>
     fb4:	88 0f       	add	r24, r24
     fb6:	99 1f       	adc	r25, r25
     fb8:	0a 94       	dec	r0
     fba:	e2 f7       	brpl	.-8      	; 0xfb4 <DIO_u8SetPinValue+0x86>
     fbc:	80 95       	com	r24
     fbe:	84 23       	and	r24, r20
     fc0:	8c 93       	st	X, r24
     fc2:	bd c0       	rjmp	.+378    	; 0x113e <DIO_u8SetPinValue+0x210>
			case DIO_PORTB:	CLR_BIT(PORTB, Copy_u8Pin); break;
     fc4:	a8 e3       	ldi	r26, 0x38	; 56
     fc6:	b0 e0       	ldi	r27, 0x00	; 0
     fc8:	e8 e3       	ldi	r30, 0x38	; 56
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	48 2f       	mov	r20, r24
     fd0:	8b 81       	ldd	r24, Y+3	; 0x03
     fd2:	28 2f       	mov	r18, r24
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	02 2e       	mov	r0, r18
     fdc:	02 c0       	rjmp	.+4      	; 0xfe2 <DIO_u8SetPinValue+0xb4>
     fde:	88 0f       	add	r24, r24
     fe0:	99 1f       	adc	r25, r25
     fe2:	0a 94       	dec	r0
     fe4:	e2 f7       	brpl	.-8      	; 0xfde <DIO_u8SetPinValue+0xb0>
     fe6:	80 95       	com	r24
     fe8:	84 23       	and	r24, r20
     fea:	8c 93       	st	X, r24
     fec:	a8 c0       	rjmp	.+336    	; 0x113e <DIO_u8SetPinValue+0x210>
			case DIO_PORTC: CLR_BIT(PORTC, Copy_u8Pin); break;
     fee:	a5 e3       	ldi	r26, 0x35	; 53
     ff0:	b0 e0       	ldi	r27, 0x00	; 0
     ff2:	e5 e3       	ldi	r30, 0x35	; 53
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	80 81       	ld	r24, Z
     ff8:	48 2f       	mov	r20, r24
     ffa:	8b 81       	ldd	r24, Y+3	; 0x03
     ffc:	28 2f       	mov	r18, r24
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	02 2e       	mov	r0, r18
    1006:	02 c0       	rjmp	.+4      	; 0x100c <DIO_u8SetPinValue+0xde>
    1008:	88 0f       	add	r24, r24
    100a:	99 1f       	adc	r25, r25
    100c:	0a 94       	dec	r0
    100e:	e2 f7       	brpl	.-8      	; 0x1008 <DIO_u8SetPinValue+0xda>
    1010:	80 95       	com	r24
    1012:	84 23       	and	r24, r20
    1014:	8c 93       	st	X, r24
    1016:	93 c0       	rjmp	.+294    	; 0x113e <DIO_u8SetPinValue+0x210>
			case DIO_PORTD: CLR_BIT(PORTD, Copy_u8Pin); break;
    1018:	a2 e3       	ldi	r26, 0x32	; 50
    101a:	b0 e0       	ldi	r27, 0x00	; 0
    101c:	e2 e3       	ldi	r30, 0x32	; 50
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	80 81       	ld	r24, Z
    1022:	48 2f       	mov	r20, r24
    1024:	8b 81       	ldd	r24, Y+3	; 0x03
    1026:	28 2f       	mov	r18, r24
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	81 e0       	ldi	r24, 0x01	; 1
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	02 2e       	mov	r0, r18
    1030:	02 c0       	rjmp	.+4      	; 0x1036 <DIO_u8SetPinValue+0x108>
    1032:	88 0f       	add	r24, r24
    1034:	99 1f       	adc	r25, r25
    1036:	0a 94       	dec	r0
    1038:	e2 f7       	brpl	.-8      	; 0x1032 <DIO_u8SetPinValue+0x104>
    103a:	80 95       	com	r24
    103c:	84 23       	and	r24, r20
    103e:	8c 93       	st	X, r24
    1040:	7e c0       	rjmp	.+252    	; 0x113e <DIO_u8SetPinValue+0x210>
			default: Local_u8RunState = DIO_ERROR;
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	89 83       	std	Y+1, r24	; 0x01
    1046:	7b c0       	rjmp	.+246    	; 0x113e <DIO_u8SetPinValue+0x210>
			}
		}
		else if(Copy_u8Value == DIO_PIN_HIGH)
    1048:	8c 81       	ldd	r24, Y+4	; 0x04
    104a:	81 30       	cpi	r24, 0x01	; 1
    104c:	09 f0       	breq	.+2      	; 0x1050 <DIO_u8SetPinValue+0x122>
    104e:	72 c0       	rjmp	.+228    	; 0x1134 <DIO_u8SetPinValue+0x206>
		{
			switch(Copy_u8Port)
    1050:	8a 81       	ldd	r24, Y+2	; 0x02
    1052:	28 2f       	mov	r18, r24
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	3e 83       	std	Y+6, r19	; 0x06
    1058:	2d 83       	std	Y+5, r18	; 0x05
    105a:	8d 81       	ldd	r24, Y+5	; 0x05
    105c:	9e 81       	ldd	r25, Y+6	; 0x06
    105e:	81 30       	cpi	r24, 0x01	; 1
    1060:	91 05       	cpc	r25, r1
    1062:	49 f1       	breq	.+82     	; 0x10b6 <DIO_u8SetPinValue+0x188>
    1064:	2d 81       	ldd	r18, Y+5	; 0x05
    1066:	3e 81       	ldd	r19, Y+6	; 0x06
    1068:	22 30       	cpi	r18, 0x02	; 2
    106a:	31 05       	cpc	r19, r1
    106c:	2c f4       	brge	.+10     	; 0x1078 <DIO_u8SetPinValue+0x14a>
    106e:	8d 81       	ldd	r24, Y+5	; 0x05
    1070:	9e 81       	ldd	r25, Y+6	; 0x06
    1072:	00 97       	sbiw	r24, 0x00	; 0
    1074:	61 f0       	breq	.+24     	; 0x108e <DIO_u8SetPinValue+0x160>
    1076:	5b c0       	rjmp	.+182    	; 0x112e <DIO_u8SetPinValue+0x200>
    1078:	2d 81       	ldd	r18, Y+5	; 0x05
    107a:	3e 81       	ldd	r19, Y+6	; 0x06
    107c:	22 30       	cpi	r18, 0x02	; 2
    107e:	31 05       	cpc	r19, r1
    1080:	71 f1       	breq	.+92     	; 0x10de <DIO_u8SetPinValue+0x1b0>
    1082:	8d 81       	ldd	r24, Y+5	; 0x05
    1084:	9e 81       	ldd	r25, Y+6	; 0x06
    1086:	83 30       	cpi	r24, 0x03	; 3
    1088:	91 05       	cpc	r25, r1
    108a:	e9 f1       	breq	.+122    	; 0x1106 <DIO_u8SetPinValue+0x1d8>
    108c:	50 c0       	rjmp	.+160    	; 0x112e <DIO_u8SetPinValue+0x200>
			{
			case DIO_PORTA: SET_BIT(PORTA, Copy_u8Pin); break;
    108e:	ab e3       	ldi	r26, 0x3B	; 59
    1090:	b0 e0       	ldi	r27, 0x00	; 0
    1092:	eb e3       	ldi	r30, 0x3B	; 59
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	80 81       	ld	r24, Z
    1098:	48 2f       	mov	r20, r24
    109a:	8b 81       	ldd	r24, Y+3	; 0x03
    109c:	28 2f       	mov	r18, r24
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	02 2e       	mov	r0, r18
    10a6:	02 c0       	rjmp	.+4      	; 0x10ac <DIO_u8SetPinValue+0x17e>
    10a8:	88 0f       	add	r24, r24
    10aa:	99 1f       	adc	r25, r25
    10ac:	0a 94       	dec	r0
    10ae:	e2 f7       	brpl	.-8      	; 0x10a8 <DIO_u8SetPinValue+0x17a>
    10b0:	84 2b       	or	r24, r20
    10b2:	8c 93       	st	X, r24
    10b4:	44 c0       	rjmp	.+136    	; 0x113e <DIO_u8SetPinValue+0x210>
			case DIO_PORTB:	SET_BIT(PORTB, Copy_u8Pin); break;
    10b6:	a8 e3       	ldi	r26, 0x38	; 56
    10b8:	b0 e0       	ldi	r27, 0x00	; 0
    10ba:	e8 e3       	ldi	r30, 0x38	; 56
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	80 81       	ld	r24, Z
    10c0:	48 2f       	mov	r20, r24
    10c2:	8b 81       	ldd	r24, Y+3	; 0x03
    10c4:	28 2f       	mov	r18, r24
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	81 e0       	ldi	r24, 0x01	; 1
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	02 2e       	mov	r0, r18
    10ce:	02 c0       	rjmp	.+4      	; 0x10d4 <DIO_u8SetPinValue+0x1a6>
    10d0:	88 0f       	add	r24, r24
    10d2:	99 1f       	adc	r25, r25
    10d4:	0a 94       	dec	r0
    10d6:	e2 f7       	brpl	.-8      	; 0x10d0 <DIO_u8SetPinValue+0x1a2>
    10d8:	84 2b       	or	r24, r20
    10da:	8c 93       	st	X, r24
    10dc:	30 c0       	rjmp	.+96     	; 0x113e <DIO_u8SetPinValue+0x210>
			case DIO_PORTC: SET_BIT(PORTC, Copy_u8Pin); break;
    10de:	a5 e3       	ldi	r26, 0x35	; 53
    10e0:	b0 e0       	ldi	r27, 0x00	; 0
    10e2:	e5 e3       	ldi	r30, 0x35	; 53
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	80 81       	ld	r24, Z
    10e8:	48 2f       	mov	r20, r24
    10ea:	8b 81       	ldd	r24, Y+3	; 0x03
    10ec:	28 2f       	mov	r18, r24
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	81 e0       	ldi	r24, 0x01	; 1
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	02 2e       	mov	r0, r18
    10f6:	02 c0       	rjmp	.+4      	; 0x10fc <DIO_u8SetPinValue+0x1ce>
    10f8:	88 0f       	add	r24, r24
    10fa:	99 1f       	adc	r25, r25
    10fc:	0a 94       	dec	r0
    10fe:	e2 f7       	brpl	.-8      	; 0x10f8 <DIO_u8SetPinValue+0x1ca>
    1100:	84 2b       	or	r24, r20
    1102:	8c 93       	st	X, r24
    1104:	1c c0       	rjmp	.+56     	; 0x113e <DIO_u8SetPinValue+0x210>
			case DIO_PORTD: SET_BIT(PORTD, Copy_u8Pin); break;
    1106:	a2 e3       	ldi	r26, 0x32	; 50
    1108:	b0 e0       	ldi	r27, 0x00	; 0
    110a:	e2 e3       	ldi	r30, 0x32	; 50
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	80 81       	ld	r24, Z
    1110:	48 2f       	mov	r20, r24
    1112:	8b 81       	ldd	r24, Y+3	; 0x03
    1114:	28 2f       	mov	r18, r24
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	81 e0       	ldi	r24, 0x01	; 1
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	02 2e       	mov	r0, r18
    111e:	02 c0       	rjmp	.+4      	; 0x1124 <DIO_u8SetPinValue+0x1f6>
    1120:	88 0f       	add	r24, r24
    1122:	99 1f       	adc	r25, r25
    1124:	0a 94       	dec	r0
    1126:	e2 f7       	brpl	.-8      	; 0x1120 <DIO_u8SetPinValue+0x1f2>
    1128:	84 2b       	or	r24, r20
    112a:	8c 93       	st	X, r24
    112c:	08 c0       	rjmp	.+16     	; 0x113e <DIO_u8SetPinValue+0x210>
			default: Local_u8RunState = DIO_ERROR;
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	89 83       	std	Y+1, r24	; 0x01
    1132:	05 c0       	rjmp	.+10     	; 0x113e <DIO_u8SetPinValue+0x210>
			}
		}
		else
		{
			Local_u8RunState = DIO_ERROR;
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	89 83       	std	Y+1, r24	; 0x01
    1138:	02 c0       	rjmp	.+4      	; 0x113e <DIO_u8SetPinValue+0x210>
		}
	}
	else
	{
		Local_u8RunState = DIO_ERROR;
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8RunState;
    113e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1140:	28 96       	adiw	r28, 0x08	; 8
    1142:	0f b6       	in	r0, 0x3f	; 63
    1144:	f8 94       	cli
    1146:	de bf       	out	0x3e, r29	; 62
    1148:	0f be       	out	0x3f, r0	; 63
    114a:	cd bf       	out	0x3d, r28	; 61
    114c:	cf 91       	pop	r28
    114e:	df 91       	pop	r29
    1150:	08 95       	ret

00001152 <DIO_u8GetPinValue>:


u8 DIO_u8GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 *Copy_u8Variable)
{
    1152:	df 93       	push	r29
    1154:	cf 93       	push	r28
    1156:	cd b7       	in	r28, 0x3d	; 61
    1158:	de b7       	in	r29, 0x3e	; 62
    115a:	27 97       	sbiw	r28, 0x07	; 7
    115c:	0f b6       	in	r0, 0x3f	; 63
    115e:	f8 94       	cli
    1160:	de bf       	out	0x3e, r29	; 62
    1162:	0f be       	out	0x3f, r0	; 63
    1164:	cd bf       	out	0x3d, r28	; 61
    1166:	8a 83       	std	Y+2, r24	; 0x02
    1168:	6b 83       	std	Y+3, r22	; 0x03
    116a:	5d 83       	std	Y+5, r21	; 0x05
    116c:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8RunState = DIO_OK;
    116e:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8Pin >= DIO_PIN0) && (Copy_u8Pin <= DIO_PIN7) && (Copy_u8Variable != NULL))
    1170:	8b 81       	ldd	r24, Y+3	; 0x03
    1172:	88 30       	cpi	r24, 0x08	; 8
    1174:	08 f0       	brcs	.+2      	; 0x1178 <DIO_u8GetPinValue+0x26>
    1176:	79 c0       	rjmp	.+242    	; 0x126a <DIO_u8GetPinValue+0x118>
    1178:	8c 81       	ldd	r24, Y+4	; 0x04
    117a:	9d 81       	ldd	r25, Y+5	; 0x05
    117c:	00 97       	sbiw	r24, 0x00	; 0
    117e:	09 f4       	brne	.+2      	; 0x1182 <DIO_u8GetPinValue+0x30>
    1180:	74 c0       	rjmp	.+232    	; 0x126a <DIO_u8GetPinValue+0x118>
	{
		switch(Copy_u8Port)
    1182:	8a 81       	ldd	r24, Y+2	; 0x02
    1184:	28 2f       	mov	r18, r24
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	3f 83       	std	Y+7, r19	; 0x07
    118a:	2e 83       	std	Y+6, r18	; 0x06
    118c:	4e 81       	ldd	r20, Y+6	; 0x06
    118e:	5f 81       	ldd	r21, Y+7	; 0x07
    1190:	41 30       	cpi	r20, 0x01	; 1
    1192:	51 05       	cpc	r21, r1
    1194:	59 f1       	breq	.+86     	; 0x11ec <DIO_u8GetPinValue+0x9a>
    1196:	8e 81       	ldd	r24, Y+6	; 0x06
    1198:	9f 81       	ldd	r25, Y+7	; 0x07
    119a:	82 30       	cpi	r24, 0x02	; 2
    119c:	91 05       	cpc	r25, r1
    119e:	34 f4       	brge	.+12     	; 0x11ac <DIO_u8GetPinValue+0x5a>
    11a0:	2e 81       	ldd	r18, Y+6	; 0x06
    11a2:	3f 81       	ldd	r19, Y+7	; 0x07
    11a4:	21 15       	cp	r18, r1
    11a6:	31 05       	cpc	r19, r1
    11a8:	69 f0       	breq	.+26     	; 0x11c4 <DIO_u8GetPinValue+0x72>
    11aa:	5c c0       	rjmp	.+184    	; 0x1264 <DIO_u8GetPinValue+0x112>
    11ac:	4e 81       	ldd	r20, Y+6	; 0x06
    11ae:	5f 81       	ldd	r21, Y+7	; 0x07
    11b0:	42 30       	cpi	r20, 0x02	; 2
    11b2:	51 05       	cpc	r21, r1
    11b4:	79 f1       	breq	.+94     	; 0x1214 <DIO_u8GetPinValue+0xc2>
    11b6:	8e 81       	ldd	r24, Y+6	; 0x06
    11b8:	9f 81       	ldd	r25, Y+7	; 0x07
    11ba:	83 30       	cpi	r24, 0x03	; 3
    11bc:	91 05       	cpc	r25, r1
    11be:	09 f4       	brne	.+2      	; 0x11c2 <DIO_u8GetPinValue+0x70>
    11c0:	3d c0       	rjmp	.+122    	; 0x123c <DIO_u8GetPinValue+0xea>
    11c2:	50 c0       	rjmp	.+160    	; 0x1264 <DIO_u8GetPinValue+0x112>
		{
		case DIO_PORTA: *Copy_u8Variable = GET_BIT(PINA, Copy_u8Pin); break;
    11c4:	e9 e3       	ldi	r30, 0x39	; 57
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	80 81       	ld	r24, Z
    11ca:	28 2f       	mov	r18, r24
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	8b 81       	ldd	r24, Y+3	; 0x03
    11d0:	88 2f       	mov	r24, r24
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	a9 01       	movw	r20, r18
    11d6:	02 c0       	rjmp	.+4      	; 0x11dc <DIO_u8GetPinValue+0x8a>
    11d8:	55 95       	asr	r21
    11da:	47 95       	ror	r20
    11dc:	8a 95       	dec	r24
    11de:	e2 f7       	brpl	.-8      	; 0x11d8 <DIO_u8GetPinValue+0x86>
    11e0:	ca 01       	movw	r24, r20
    11e2:	81 70       	andi	r24, 0x01	; 1
    11e4:	ec 81       	ldd	r30, Y+4	; 0x04
    11e6:	fd 81       	ldd	r31, Y+5	; 0x05
    11e8:	80 83       	st	Z, r24
    11ea:	41 c0       	rjmp	.+130    	; 0x126e <DIO_u8GetPinValue+0x11c>
		case DIO_PORTB:	*Copy_u8Variable = GET_BIT(PINB, Copy_u8Pin); break;
    11ec:	e6 e3       	ldi	r30, 0x36	; 54
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	80 81       	ld	r24, Z
    11f2:	28 2f       	mov	r18, r24
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	8b 81       	ldd	r24, Y+3	; 0x03
    11f8:	88 2f       	mov	r24, r24
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	a9 01       	movw	r20, r18
    11fe:	02 c0       	rjmp	.+4      	; 0x1204 <DIO_u8GetPinValue+0xb2>
    1200:	55 95       	asr	r21
    1202:	47 95       	ror	r20
    1204:	8a 95       	dec	r24
    1206:	e2 f7       	brpl	.-8      	; 0x1200 <DIO_u8GetPinValue+0xae>
    1208:	ca 01       	movw	r24, r20
    120a:	81 70       	andi	r24, 0x01	; 1
    120c:	ec 81       	ldd	r30, Y+4	; 0x04
    120e:	fd 81       	ldd	r31, Y+5	; 0x05
    1210:	80 83       	st	Z, r24
    1212:	2d c0       	rjmp	.+90     	; 0x126e <DIO_u8GetPinValue+0x11c>
		case DIO_PORTC: *Copy_u8Variable = GET_BIT(PINC, Copy_u8Pin); break;
    1214:	e3 e3       	ldi	r30, 0x33	; 51
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	80 81       	ld	r24, Z
    121a:	28 2f       	mov	r18, r24
    121c:	30 e0       	ldi	r19, 0x00	; 0
    121e:	8b 81       	ldd	r24, Y+3	; 0x03
    1220:	88 2f       	mov	r24, r24
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	a9 01       	movw	r20, r18
    1226:	02 c0       	rjmp	.+4      	; 0x122c <DIO_u8GetPinValue+0xda>
    1228:	55 95       	asr	r21
    122a:	47 95       	ror	r20
    122c:	8a 95       	dec	r24
    122e:	e2 f7       	brpl	.-8      	; 0x1228 <DIO_u8GetPinValue+0xd6>
    1230:	ca 01       	movw	r24, r20
    1232:	81 70       	andi	r24, 0x01	; 1
    1234:	ec 81       	ldd	r30, Y+4	; 0x04
    1236:	fd 81       	ldd	r31, Y+5	; 0x05
    1238:	80 83       	st	Z, r24
    123a:	19 c0       	rjmp	.+50     	; 0x126e <DIO_u8GetPinValue+0x11c>
		case DIO_PORTD: *Copy_u8Variable = GET_BIT(PIND, Copy_u8Pin); break;
    123c:	e0 e3       	ldi	r30, 0x30	; 48
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	80 81       	ld	r24, Z
    1242:	28 2f       	mov	r18, r24
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	8b 81       	ldd	r24, Y+3	; 0x03
    1248:	88 2f       	mov	r24, r24
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	a9 01       	movw	r20, r18
    124e:	02 c0       	rjmp	.+4      	; 0x1254 <DIO_u8GetPinValue+0x102>
    1250:	55 95       	asr	r21
    1252:	47 95       	ror	r20
    1254:	8a 95       	dec	r24
    1256:	e2 f7       	brpl	.-8      	; 0x1250 <DIO_u8GetPinValue+0xfe>
    1258:	ca 01       	movw	r24, r20
    125a:	81 70       	andi	r24, 0x01	; 1
    125c:	ec 81       	ldd	r30, Y+4	; 0x04
    125e:	fd 81       	ldd	r31, Y+5	; 0x05
    1260:	80 83       	st	Z, r24
    1262:	05 c0       	rjmp	.+10     	; 0x126e <DIO_u8GetPinValue+0x11c>
		default: Local_u8RunState = DIO_ERROR;
    1264:	81 e0       	ldi	r24, 0x01	; 1
    1266:	89 83       	std	Y+1, r24	; 0x01
    1268:	02 c0       	rjmp	.+4      	; 0x126e <DIO_u8GetPinValue+0x11c>
		}
	}
	else
	{
		Local_u8RunState = DIO_ERROR;
    126a:	81 e0       	ldi	r24, 0x01	; 1
    126c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8RunState;
    126e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1270:	27 96       	adiw	r28, 0x07	; 7
    1272:	0f b6       	in	r0, 0x3f	; 63
    1274:	f8 94       	cli
    1276:	de bf       	out	0x3e, r29	; 62
    1278:	0f be       	out	0x3f, r0	; 63
    127a:	cd bf       	out	0x3d, r28	; 61
    127c:	cf 91       	pop	r28
    127e:	df 91       	pop	r29
    1280:	08 95       	ret

00001282 <Transisor_voidIntialization>:
#include "Transistor_private.h"
#include "Transistor_config.h"


void Transisor_voidIntialization(void)
{
    1282:	df 93       	push	r29
    1284:	cf 93       	push	r28
    1286:	cd b7       	in	r28, 0x3d	; 61
    1288:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDirection(TRANSISTOR_BASE_PORT, TRANSISTOR_BASE_PIN, DIO_PIN_OUTPUT);
    128a:	80 e0       	ldi	r24, 0x00	; 0
    128c:	60 e0       	ldi	r22, 0x00	; 0
    128e:	41 e0       	ldi	r20, 0x01	; 1
    1290:	0e 94 85 06 	call	0xd0a	; 0xd0a <DIO_u8SetPinDirection>
}
    1294:	cf 91       	pop	r28
    1296:	df 91       	pop	r29
    1298:	08 95       	ret

0000129a <Transisor_voidSaturationMode>:

void Transisor_voidSaturationMode(void)
{
    129a:	df 93       	push	r29
    129c:	cf 93       	push	r28
    129e:	cd b7       	in	r28, 0x3d	; 61
    12a0:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(TRANSISTOR_BASE_PORT, TRANSISTOR_BASE_PIN, DIO_PIN_HIGH);
    12a2:	80 e0       	ldi	r24, 0x00	; 0
    12a4:	60 e0       	ldi	r22, 0x00	; 0
    12a6:	41 e0       	ldi	r20, 0x01	; 1
    12a8:	0e 94 97 07 	call	0xf2e	; 0xf2e <DIO_u8SetPinValue>
}
    12ac:	cf 91       	pop	r28
    12ae:	df 91       	pop	r29
    12b0:	08 95       	ret

000012b2 <Transisor_voidCutOffMode>:

void Transisor_voidCutOffMode(void)
{
    12b2:	df 93       	push	r29
    12b4:	cf 93       	push	r28
    12b6:	cd b7       	in	r28, 0x3d	; 61
    12b8:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(TRANSISTOR_BASE_PORT, TRANSISTOR_BASE_PIN, DIO_PIN_LOW);
    12ba:	80 e0       	ldi	r24, 0x00	; 0
    12bc:	60 e0       	ldi	r22, 0x00	; 0
    12be:	40 e0       	ldi	r20, 0x00	; 0
    12c0:	0e 94 97 07 	call	0xf2e	; 0xf2e <DIO_u8SetPinValue>
}
    12c4:	cf 91       	pop	r28
    12c6:	df 91       	pop	r29
    12c8:	08 95       	ret

000012ca <SSD_u8SetNumber>:
#include "SSD_interface.h"
#include "SSD_private.h"
#include "SSD_config.h"

u8 SSD_u8SetNumber(u8 Copy_u8Number, SSD_t *Copy_pSSD_tElements)
{
    12ca:	df 93       	push	r29
    12cc:	cf 93       	push	r28
    12ce:	cd b7       	in	r28, 0x3d	; 61
    12d0:	de b7       	in	r29, 0x3e	; 62
    12d2:	63 97       	sbiw	r28, 0x13	; 19
    12d4:	0f b6       	in	r0, 0x3f	; 63
    12d6:	f8 94       	cli
    12d8:	de bf       	out	0x3e, r29	; 62
    12da:	0f be       	out	0x3f, r0	; 63
    12dc:	cd bf       	out	0x3d, r28	; 61
    12de:	8c 87       	std	Y+12, r24	; 0x0c
    12e0:	7e 87       	std	Y+14, r23	; 0x0e
    12e2:	6d 87       	std	Y+13, r22	; 0x0d
	u8 Local_u8ErrorState = 0;
    12e4:	19 82       	std	Y+1, r1	; 0x01
	u8 Local_u8ArrayOfNumbers[10] = {0b00111111, 0b00000110, 0b01011011, 0b01001111, 0b01100110,
								0b01101101, 0b01111101, 0b00000111, 0b01111111, 0b01101111};
    12e6:	ce 01       	movw	r24, r28
    12e8:	02 96       	adiw	r24, 0x02	; 2
    12ea:	98 8b       	std	Y+16, r25	; 0x10
    12ec:	8f 87       	std	Y+15, r24	; 0x0f
    12ee:	e8 e6       	ldi	r30, 0x68	; 104
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	fa 8b       	std	Y+18, r31	; 0x12
    12f4:	e9 8b       	std	Y+17, r30	; 0x11
    12f6:	fa e0       	ldi	r31, 0x0A	; 10
    12f8:	fb 8b       	std	Y+19, r31	; 0x13
    12fa:	e9 89       	ldd	r30, Y+17	; 0x11
    12fc:	fa 89       	ldd	r31, Y+18	; 0x12
    12fe:	00 80       	ld	r0, Z
    1300:	89 89       	ldd	r24, Y+17	; 0x11
    1302:	9a 89       	ldd	r25, Y+18	; 0x12
    1304:	01 96       	adiw	r24, 0x01	; 1
    1306:	9a 8b       	std	Y+18, r25	; 0x12
    1308:	89 8b       	std	Y+17, r24	; 0x11
    130a:	ef 85       	ldd	r30, Y+15	; 0x0f
    130c:	f8 89       	ldd	r31, Y+16	; 0x10
    130e:	00 82       	st	Z, r0
    1310:	8f 85       	ldd	r24, Y+15	; 0x0f
    1312:	98 89       	ldd	r25, Y+16	; 0x10
    1314:	01 96       	adiw	r24, 0x01	; 1
    1316:	98 8b       	std	Y+16, r25	; 0x10
    1318:	8f 87       	std	Y+15, r24	; 0x0f
    131a:	9b 89       	ldd	r25, Y+19	; 0x13
    131c:	91 50       	subi	r25, 0x01	; 1
    131e:	9b 8b       	std	Y+19, r25	; 0x13
    1320:	eb 89       	ldd	r30, Y+19	; 0x13
    1322:	ee 23       	and	r30, r30
    1324:	51 f7       	brne	.-44     	; 0x12fa <SSD_u8SetNumber+0x30>

	if(Copy_pSSD_tElements != 0)
    1326:	8d 85       	ldd	r24, Y+13	; 0x0d
    1328:	9e 85       	ldd	r25, Y+14	; 0x0e
    132a:	00 97       	sbiw	r24, 0x00	; 0
    132c:	09 f4       	brne	.+2      	; 0x1330 <SSD_u8SetNumber+0x66>
    132e:	5b c0       	rjmp	.+182    	; 0x13e6 <SSD_u8SetNumber+0x11c>
	{
		if(Copy_pSSD_tElements->u8CommonType == ANODE)
    1330:	ed 85       	ldd	r30, Y+13	; 0x0d
    1332:	fe 85       	ldd	r31, Y+14	; 0x0e
    1334:	80 81       	ld	r24, Z
    1336:	88 23       	and	r24, r24
    1338:	69 f5       	brne	.+90     	; 0x1394 <SSD_u8SetNumber+0xca>
		{
			DIO_u8SetPinDirection(Copy_pSSD_tElements->u8EnablePort, Copy_pSSD_tElements->u8EnablePin, DIO_PIN_OUTPUT);
    133a:	ed 85       	ldd	r30, Y+13	; 0x0d
    133c:	fe 85       	ldd	r31, Y+14	; 0x0e
    133e:	82 81       	ldd	r24, Z+2	; 0x02
    1340:	ed 85       	ldd	r30, Y+13	; 0x0d
    1342:	fe 85       	ldd	r31, Y+14	; 0x0e
    1344:	93 81       	ldd	r25, Z+3	; 0x03
    1346:	69 2f       	mov	r22, r25
    1348:	41 e0       	ldi	r20, 0x01	; 1
    134a:	0e 94 85 06 	call	0xd0a	; 0xd0a <DIO_u8SetPinDirection>
			DIO_u8SetPinValue(Copy_pSSD_tElements->u8EnablePort, Copy_pSSD_tElements->u8EnablePin, DIO_PIN_HIGH);
    134e:	ed 85       	ldd	r30, Y+13	; 0x0d
    1350:	fe 85       	ldd	r31, Y+14	; 0x0e
    1352:	82 81       	ldd	r24, Z+2	; 0x02
    1354:	ed 85       	ldd	r30, Y+13	; 0x0d
    1356:	fe 85       	ldd	r31, Y+14	; 0x0e
    1358:	93 81       	ldd	r25, Z+3	; 0x03
    135a:	69 2f       	mov	r22, r25
    135c:	41 e0       	ldi	r20, 0x01	; 1
    135e:	0e 94 97 07 	call	0xf2e	; 0xf2e <DIO_u8SetPinValue>
			DIO_u8SetPortDirection(Copy_pSSD_tElements->u8Port, DIO_PORT_OUTPUT);
    1362:	ed 85       	ldd	r30, Y+13	; 0x0d
    1364:	fe 85       	ldd	r31, Y+14	; 0x0e
    1366:	81 81       	ldd	r24, Z+1	; 0x01
    1368:	6f ef       	ldi	r22, 0xFF	; 255
    136a:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_u8SetPortDirection>
			DIO_u8SetPortValue(Copy_pSSD_tElements->u8Port, ~(Local_u8ArrayOfNumbers[Copy_u8Number]));
    136e:	ed 85       	ldd	r30, Y+13	; 0x0d
    1370:	fe 85       	ldd	r31, Y+14	; 0x0e
    1372:	41 81       	ldd	r20, Z+1	; 0x01
    1374:	8c 85       	ldd	r24, Y+12	; 0x0c
    1376:	28 2f       	mov	r18, r24
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	ce 01       	movw	r24, r28
    137c:	02 96       	adiw	r24, 0x02	; 2
    137e:	fc 01       	movw	r30, r24
    1380:	e2 0f       	add	r30, r18
    1382:	f3 1f       	adc	r31, r19
    1384:	80 81       	ld	r24, Z
    1386:	98 2f       	mov	r25, r24
    1388:	90 95       	com	r25
    138a:	84 2f       	mov	r24, r20
    138c:	69 2f       	mov	r22, r25
    138e:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <DIO_u8SetPortValue>
    1392:	2b c0       	rjmp	.+86     	; 0x13ea <SSD_u8SetNumber+0x120>
		}
		else if(Copy_pSSD_tElements->u8CommonType == CATHODE)
    1394:	ed 85       	ldd	r30, Y+13	; 0x0d
    1396:	fe 85       	ldd	r31, Y+14	; 0x0e
    1398:	80 81       	ld	r24, Z
    139a:	81 30       	cpi	r24, 0x01	; 1
    139c:	09 f5       	brne	.+66     	; 0x13e0 <SSD_u8SetNumber+0x116>
		{
			DIO_u8SetPinDirection(Copy_pSSD_tElements->u8EnablePort, Copy_pSSD_tElements->u8EnablePin, DIO_PIN_INPUT);
    139e:	ed 85       	ldd	r30, Y+13	; 0x0d
    13a0:	fe 85       	ldd	r31, Y+14	; 0x0e
    13a2:	82 81       	ldd	r24, Z+2	; 0x02
    13a4:	ed 85       	ldd	r30, Y+13	; 0x0d
    13a6:	fe 85       	ldd	r31, Y+14	; 0x0e
    13a8:	93 81       	ldd	r25, Z+3	; 0x03
    13aa:	69 2f       	mov	r22, r25
    13ac:	40 e0       	ldi	r20, 0x00	; 0
    13ae:	0e 94 85 06 	call	0xd0a	; 0xd0a <DIO_u8SetPinDirection>
			DIO_u8SetPortDirection(Copy_pSSD_tElements->u8Port, DIO_PORT_OUTPUT);
    13b2:	ed 85       	ldd	r30, Y+13	; 0x0d
    13b4:	fe 85       	ldd	r31, Y+14	; 0x0e
    13b6:	81 81       	ldd	r24, Z+1	; 0x01
    13b8:	6f ef       	ldi	r22, 0xFF	; 255
    13ba:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_u8SetPortDirection>
			DIO_u8SetPortValue(Copy_pSSD_tElements->u8Port, Local_u8ArrayOfNumbers[Copy_u8Number]);
    13be:	ed 85       	ldd	r30, Y+13	; 0x0d
    13c0:	fe 85       	ldd	r31, Y+14	; 0x0e
    13c2:	41 81       	ldd	r20, Z+1	; 0x01
    13c4:	8c 85       	ldd	r24, Y+12	; 0x0c
    13c6:	28 2f       	mov	r18, r24
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	ce 01       	movw	r24, r28
    13cc:	02 96       	adiw	r24, 0x02	; 2
    13ce:	fc 01       	movw	r30, r24
    13d0:	e2 0f       	add	r30, r18
    13d2:	f3 1f       	adc	r31, r19
    13d4:	90 81       	ld	r25, Z
    13d6:	84 2f       	mov	r24, r20
    13d8:	69 2f       	mov	r22, r25
    13da:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <DIO_u8SetPortValue>
    13de:	05 c0       	rjmp	.+10     	; 0x13ea <SSD_u8SetNumber+0x120>
		}
		else
		{
			Local_u8ErrorState = 1;
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	89 83       	std	Y+1, r24	; 0x01
    13e4:	02 c0       	rjmp	.+4      	; 0x13ea <SSD_u8SetNumber+0x120>
		}
	}
	else
	{
		Local_u8ErrorState = 1;
    13e6:	81 e0       	ldi	r24, 0x01	; 1
    13e8:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_u8ErrorState;
    13ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    13ec:	63 96       	adiw	r28, 0x13	; 19
    13ee:	0f b6       	in	r0, 0x3f	; 63
    13f0:	f8 94       	cli
    13f2:	de bf       	out	0x3e, r29	; 62
    13f4:	0f be       	out	0x3f, r0	; 63
    13f6:	cd bf       	out	0x3d, r28	; 61
    13f8:	cf 91       	pop	r28
    13fa:	df 91       	pop	r29
    13fc:	08 95       	ret

000013fe <MOTOR_voidInitialize>:
#include "MOTOR_interface.h"
#include "MOTOR_private.h"
#include "MOTOR_config.h"

void MOTOR_voidInitialize(void)
{
    13fe:	df 93       	push	r29
    1400:	cf 93       	push	r28
    1402:	cd b7       	in	r28, 0x3d	; 61
    1404:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDirection(MOTOR_PORT, MOTOR_CCW_PIN, DIO_PIN_OUTPUT);
    1406:	80 e0       	ldi	r24, 0x00	; 0
    1408:	60 e0       	ldi	r22, 0x00	; 0
    140a:	41 e0       	ldi	r20, 0x01	; 1
    140c:	0e 94 85 06 	call	0xd0a	; 0xd0a <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(MOTOR_PORT, MOTOR_CW_PIN, DIO_PIN_OUTPUT);
    1410:	80 e0       	ldi	r24, 0x00	; 0
    1412:	61 e0       	ldi	r22, 0x01	; 1
    1414:	41 e0       	ldi	r20, 0x01	; 1
    1416:	0e 94 85 06 	call	0xd0a	; 0xd0a <DIO_u8SetPinDirection>
}
    141a:	cf 91       	pop	r28
    141c:	df 91       	pop	r29
    141e:	08 95       	ret

00001420 <MOTOR_voidCounterClockWise>:

void MOTOR_voidCounterClockWise(void)
{
    1420:	df 93       	push	r29
    1422:	cf 93       	push	r28
    1424:	cd b7       	in	r28, 0x3d	; 61
    1426:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(MOTOR_PORT, MOTOR_CW_PIN, DIO_PIN_LOW);
    1428:	80 e0       	ldi	r24, 0x00	; 0
    142a:	61 e0       	ldi	r22, 0x01	; 1
    142c:	40 e0       	ldi	r20, 0x00	; 0
    142e:	0e 94 97 07 	call	0xf2e	; 0xf2e <DIO_u8SetPinValue>
	DIO_u8SetPinValue(MOTOR_PORT, MOTOR_CCW_PIN, DIO_PIN_HIGH);
    1432:	80 e0       	ldi	r24, 0x00	; 0
    1434:	60 e0       	ldi	r22, 0x00	; 0
    1436:	41 e0       	ldi	r20, 0x01	; 1
    1438:	0e 94 97 07 	call	0xf2e	; 0xf2e <DIO_u8SetPinValue>
}
    143c:	cf 91       	pop	r28
    143e:	df 91       	pop	r29
    1440:	08 95       	ret

00001442 <MOTOR_voidClockWise>:
void MOTOR_voidClockWise(void)
{
    1442:	df 93       	push	r29
    1444:	cf 93       	push	r28
    1446:	cd b7       	in	r28, 0x3d	; 61
    1448:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(MOTOR_PORT, MOTOR_CCW_PIN, DIO_PIN_LOW);
    144a:	80 e0       	ldi	r24, 0x00	; 0
    144c:	60 e0       	ldi	r22, 0x00	; 0
    144e:	40 e0       	ldi	r20, 0x00	; 0
    1450:	0e 94 97 07 	call	0xf2e	; 0xf2e <DIO_u8SetPinValue>
	DIO_u8SetPinValue(MOTOR_PORT, MOTOR_CW_PIN, DIO_PIN_HIGH);
    1454:	80 e0       	ldi	r24, 0x00	; 0
    1456:	61 e0       	ldi	r22, 0x01	; 1
    1458:	41 e0       	ldi	r20, 0x01	; 1
    145a:	0e 94 97 07 	call	0xf2e	; 0xf2e <DIO_u8SetPinValue>
}
    145e:	cf 91       	pop	r28
    1460:	df 91       	pop	r29
    1462:	08 95       	ret

00001464 <MOTOR_voidStop>:
void MOTOR_voidStop(void)
{
    1464:	df 93       	push	r29
    1466:	cf 93       	push	r28
    1468:	cd b7       	in	r28, 0x3d	; 61
    146a:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(MOTOR_PORT, MOTOR_CCW_PIN, DIO_PIN_LOW);
    146c:	80 e0       	ldi	r24, 0x00	; 0
    146e:	60 e0       	ldi	r22, 0x00	; 0
    1470:	40 e0       	ldi	r20, 0x00	; 0
    1472:	0e 94 97 07 	call	0xf2e	; 0xf2e <DIO_u8SetPinValue>
	DIO_u8SetPinValue(MOTOR_PORT, MOTOR_CW_PIN, DIO_PIN_LOW);
    1476:	80 e0       	ldi	r24, 0x00	; 0
    1478:	61 e0       	ldi	r22, 0x01	; 1
    147a:	40 e0       	ldi	r20, 0x00	; 0
    147c:	0e 94 97 07 	call	0xf2e	; 0xf2e <DIO_u8SetPinValue>
}
    1480:	cf 91       	pop	r28
    1482:	df 91       	pop	r29
    1484:	08 95       	ret

00001486 <LED_u8TurnOn>:
#include "LED_private.h"
#include "LED_config.h"


void LED_u8TurnOn(LED_t *Copy_LED_tElements)
{
    1486:	df 93       	push	r29
    1488:	cf 93       	push	r28
    148a:	00 d0       	rcall	.+0      	; 0x148c <LED_u8TurnOn+0x6>
    148c:	cd b7       	in	r28, 0x3d	; 61
    148e:	de b7       	in	r29, 0x3e	; 62
    1490:	9a 83       	std	Y+2, r25	; 0x02
    1492:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_LED_tElements->u8ConnectionType == SOURCE)
    1494:	e9 81       	ldd	r30, Y+1	; 0x01
    1496:	fa 81       	ldd	r31, Y+2	; 0x02
    1498:	82 81       	ldd	r24, Z+2	; 0x02
    149a:	88 23       	and	r24, r24
    149c:	a9 f4       	brne	.+42     	; 0x14c8 <LED_u8TurnOn+0x42>
	{
		DIO_u8SetPinDirection(Copy_LED_tElements->u8Port, Copy_LED_tElements->u8Pin, DIO_PIN_OUTPUT);
    149e:	e9 81       	ldd	r30, Y+1	; 0x01
    14a0:	fa 81       	ldd	r31, Y+2	; 0x02
    14a2:	80 81       	ld	r24, Z
    14a4:	e9 81       	ldd	r30, Y+1	; 0x01
    14a6:	fa 81       	ldd	r31, Y+2	; 0x02
    14a8:	91 81       	ldd	r25, Z+1	; 0x01
    14aa:	69 2f       	mov	r22, r25
    14ac:	41 e0       	ldi	r20, 0x01	; 1
    14ae:	0e 94 85 06 	call	0xd0a	; 0xd0a <DIO_u8SetPinDirection>
		DIO_u8SetPinValue(Copy_LED_tElements->u8Port, Copy_LED_tElements->u8Pin, DIO_PIN_HIGH);
    14b2:	e9 81       	ldd	r30, Y+1	; 0x01
    14b4:	fa 81       	ldd	r31, Y+2	; 0x02
    14b6:	80 81       	ld	r24, Z
    14b8:	e9 81       	ldd	r30, Y+1	; 0x01
    14ba:	fa 81       	ldd	r31, Y+2	; 0x02
    14bc:	91 81       	ldd	r25, Z+1	; 0x01
    14be:	69 2f       	mov	r22, r25
    14c0:	41 e0       	ldi	r20, 0x01	; 1
    14c2:	0e 94 97 07 	call	0xf2e	; 0xf2e <DIO_u8SetPinValue>
    14c6:	19 c0       	rjmp	.+50     	; 0x14fa <LED_u8TurnOn+0x74>
	}
	else if(Copy_LED_tElements->u8ConnectionType == SINK)
    14c8:	e9 81       	ldd	r30, Y+1	; 0x01
    14ca:	fa 81       	ldd	r31, Y+2	; 0x02
    14cc:	82 81       	ldd	r24, Z+2	; 0x02
    14ce:	81 30       	cpi	r24, 0x01	; 1
    14d0:	a1 f4       	brne	.+40     	; 0x14fa <LED_u8TurnOn+0x74>
	{
		DIO_u8SetPinDirection(Copy_LED_tElements->u8Port, Copy_LED_tElements->u8Pin, DIO_PIN_OUTPUT);
    14d2:	e9 81       	ldd	r30, Y+1	; 0x01
    14d4:	fa 81       	ldd	r31, Y+2	; 0x02
    14d6:	80 81       	ld	r24, Z
    14d8:	e9 81       	ldd	r30, Y+1	; 0x01
    14da:	fa 81       	ldd	r31, Y+2	; 0x02
    14dc:	91 81       	ldd	r25, Z+1	; 0x01
    14de:	69 2f       	mov	r22, r25
    14e0:	41 e0       	ldi	r20, 0x01	; 1
    14e2:	0e 94 85 06 	call	0xd0a	; 0xd0a <DIO_u8SetPinDirection>
		DIO_u8SetPinValue(Copy_LED_tElements->u8Port, Copy_LED_tElements->u8Pin, DIO_PIN_LOW);
    14e6:	e9 81       	ldd	r30, Y+1	; 0x01
    14e8:	fa 81       	ldd	r31, Y+2	; 0x02
    14ea:	80 81       	ld	r24, Z
    14ec:	e9 81       	ldd	r30, Y+1	; 0x01
    14ee:	fa 81       	ldd	r31, Y+2	; 0x02
    14f0:	91 81       	ldd	r25, Z+1	; 0x01
    14f2:	69 2f       	mov	r22, r25
    14f4:	40 e0       	ldi	r20, 0x00	; 0
    14f6:	0e 94 97 07 	call	0xf2e	; 0xf2e <DIO_u8SetPinValue>
	}
	else
	{
		return;
	}
}
    14fa:	0f 90       	pop	r0
    14fc:	0f 90       	pop	r0
    14fe:	cf 91       	pop	r28
    1500:	df 91       	pop	r29
    1502:	08 95       	ret

00001504 <LED_u8TurnOff>:

void LED_u8TurnOff(LED_t *Copy_LED_tElements)
{
    1504:	df 93       	push	r29
    1506:	cf 93       	push	r28
    1508:	00 d0       	rcall	.+0      	; 0x150a <LED_u8TurnOff+0x6>
    150a:	cd b7       	in	r28, 0x3d	; 61
    150c:	de b7       	in	r29, 0x3e	; 62
    150e:	9a 83       	std	Y+2, r25	; 0x02
    1510:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_LED_tElements->u8ConnectionType == SOURCE)
    1512:	e9 81       	ldd	r30, Y+1	; 0x01
    1514:	fa 81       	ldd	r31, Y+2	; 0x02
    1516:	82 81       	ldd	r24, Z+2	; 0x02
    1518:	88 23       	and	r24, r24
    151a:	a9 f4       	brne	.+42     	; 0x1546 <LED_u8TurnOff+0x42>
	{
		DIO_u8SetPinDirection(Copy_LED_tElements->u8Port, Copy_LED_tElements->u8Pin, DIO_PIN_OUTPUT);
    151c:	e9 81       	ldd	r30, Y+1	; 0x01
    151e:	fa 81       	ldd	r31, Y+2	; 0x02
    1520:	80 81       	ld	r24, Z
    1522:	e9 81       	ldd	r30, Y+1	; 0x01
    1524:	fa 81       	ldd	r31, Y+2	; 0x02
    1526:	91 81       	ldd	r25, Z+1	; 0x01
    1528:	69 2f       	mov	r22, r25
    152a:	41 e0       	ldi	r20, 0x01	; 1
    152c:	0e 94 85 06 	call	0xd0a	; 0xd0a <DIO_u8SetPinDirection>
		DIO_u8SetPinValue(Copy_LED_tElements->u8Port, Copy_LED_tElements->u8Pin, DIO_PIN_LOW);
    1530:	e9 81       	ldd	r30, Y+1	; 0x01
    1532:	fa 81       	ldd	r31, Y+2	; 0x02
    1534:	80 81       	ld	r24, Z
    1536:	e9 81       	ldd	r30, Y+1	; 0x01
    1538:	fa 81       	ldd	r31, Y+2	; 0x02
    153a:	91 81       	ldd	r25, Z+1	; 0x01
    153c:	69 2f       	mov	r22, r25
    153e:	40 e0       	ldi	r20, 0x00	; 0
    1540:	0e 94 97 07 	call	0xf2e	; 0xf2e <DIO_u8SetPinValue>
    1544:	19 c0       	rjmp	.+50     	; 0x1578 <LED_u8TurnOff+0x74>
	}
	else if(Copy_LED_tElements->u8ConnectionType == SINK)
    1546:	e9 81       	ldd	r30, Y+1	; 0x01
    1548:	fa 81       	ldd	r31, Y+2	; 0x02
    154a:	82 81       	ldd	r24, Z+2	; 0x02
    154c:	81 30       	cpi	r24, 0x01	; 1
    154e:	a1 f4       	brne	.+40     	; 0x1578 <LED_u8TurnOff+0x74>
	{
		DIO_u8SetPinDirection(Copy_LED_tElements->u8Port, Copy_LED_tElements->u8Pin, DIO_PIN_OUTPUT);
    1550:	e9 81       	ldd	r30, Y+1	; 0x01
    1552:	fa 81       	ldd	r31, Y+2	; 0x02
    1554:	80 81       	ld	r24, Z
    1556:	e9 81       	ldd	r30, Y+1	; 0x01
    1558:	fa 81       	ldd	r31, Y+2	; 0x02
    155a:	91 81       	ldd	r25, Z+1	; 0x01
    155c:	69 2f       	mov	r22, r25
    155e:	41 e0       	ldi	r20, 0x01	; 1
    1560:	0e 94 85 06 	call	0xd0a	; 0xd0a <DIO_u8SetPinDirection>
		DIO_u8SetPinValue(Copy_LED_tElements->u8Port, Copy_LED_tElements->u8Pin, DIO_PIN_HIGH);
    1564:	e9 81       	ldd	r30, Y+1	; 0x01
    1566:	fa 81       	ldd	r31, Y+2	; 0x02
    1568:	80 81       	ld	r24, Z
    156a:	e9 81       	ldd	r30, Y+1	; 0x01
    156c:	fa 81       	ldd	r31, Y+2	; 0x02
    156e:	91 81       	ldd	r25, Z+1	; 0x01
    1570:	69 2f       	mov	r22, r25
    1572:	41 e0       	ldi	r20, 0x01	; 1
    1574:	0e 94 97 07 	call	0xf2e	; 0xf2e <DIO_u8SetPinValue>
	}
	else
	{
		return;
	}
}
    1578:	0f 90       	pop	r0
    157a:	0f 90       	pop	r0
    157c:	cf 91       	pop	r28
    157e:	df 91       	pop	r29
    1580:	08 95       	ret

00001582 <LCD_voidSendCommand>:
#include "LCD_private.h"
#include "LCD_config.h"


void LCD_voidSendCommand(u8 Copy_u8Command)
{
    1582:	df 93       	push	r29
    1584:	cf 93       	push	r28
    1586:	cd b7       	in	r28, 0x3d	; 61
    1588:	de b7       	in	r29, 0x3e	; 62
    158a:	2f 97       	sbiw	r28, 0x0f	; 15
    158c:	0f b6       	in	r0, 0x3f	; 63
    158e:	f8 94       	cli
    1590:	de bf       	out	0x3e, r29	; 62
    1592:	0f be       	out	0x3f, r0	; 63
    1594:	cd bf       	out	0x3d, r28	; 61
    1596:	8f 87       	std	Y+15, r24	; 0x0f
	/*Set the RS pin to be LOW: 0 command*/
	DIO_u8SetPinValue(LCD_CRTL_PORT, LCD_RS_PIN, DIO_PIN_LOW);
    1598:	83 e0       	ldi	r24, 0x03	; 3
    159a:	67 e0       	ldi	r22, 0x07	; 7
    159c:	40 e0       	ldi	r20, 0x00	; 0
    159e:	0e 94 97 07 	call	0xf2e	; 0xf2e <DIO_u8SetPinValue>
	/*Set the RW pin to be LOW: 0 write*/
	DIO_u8SetPinValue(LCD_CRTL_PORT, LCD_RW_PIN, DIO_PIN_LOW);
    15a2:	83 e0       	ldi	r24, 0x03	; 3
    15a4:	66 e0       	ldi	r22, 0x06	; 6
    15a6:	40 e0       	ldi	r20, 0x00	; 0
    15a8:	0e 94 97 07 	call	0xf2e	; 0xf2e <DIO_u8SetPinValue>

#if 	LCD_MODE == LCD_EIGHT_BIT

	/*Set the Port value to be the command*/
	DIO_u8SetPortValue(LCD_DATA_PORT, Copy_u8Command);
    15ac:	82 e0       	ldi	r24, 0x02	; 2
    15ae:	6f 85       	ldd	r22, Y+15	; 0x0f
    15b0:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <DIO_u8SetPortValue>

	DIO_u8SetPortValue(LCD_DATA_PORT, ((Copy_u8Command<<4) & 0xf0));
#endif

	/*Set the EN pin to be HIGH: 1 to read , waiting for 2ms and then make it LOW again: 0*/
	DIO_u8SetPinValue(LCD_CRTL_PORT, LCD_EN_PIN, DIO_PIN_HIGH);
    15b4:	83 e0       	ldi	r24, 0x03	; 3
    15b6:	65 e0       	ldi	r22, 0x05	; 5
    15b8:	41 e0       	ldi	r20, 0x01	; 1
    15ba:	0e 94 97 07 	call	0xf2e	; 0xf2e <DIO_u8SetPinValue>
    15be:	80 e0       	ldi	r24, 0x00	; 0
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	a0 e0       	ldi	r26, 0x00	; 0
    15c4:	b0 e4       	ldi	r27, 0x40	; 64
    15c6:	8b 87       	std	Y+11, r24	; 0x0b
    15c8:	9c 87       	std	Y+12, r25	; 0x0c
    15ca:	ad 87       	std	Y+13, r26	; 0x0d
    15cc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    15d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    15d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    15d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    15d6:	20 e0       	ldi	r18, 0x00	; 0
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	4a ef       	ldi	r20, 0xFA	; 250
    15dc:	54 e4       	ldi	r21, 0x44	; 68
    15de:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15e2:	dc 01       	movw	r26, r24
    15e4:	cb 01       	movw	r24, r22
    15e6:	8f 83       	std	Y+7, r24	; 0x07
    15e8:	98 87       	std	Y+8, r25	; 0x08
    15ea:	a9 87       	std	Y+9, r26	; 0x09
    15ec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15ee:	6f 81       	ldd	r22, Y+7	; 0x07
    15f0:	78 85       	ldd	r23, Y+8	; 0x08
    15f2:	89 85       	ldd	r24, Y+9	; 0x09
    15f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    15f6:	20 e0       	ldi	r18, 0x00	; 0
    15f8:	30 e0       	ldi	r19, 0x00	; 0
    15fa:	40 e8       	ldi	r20, 0x80	; 128
    15fc:	5f e3       	ldi	r21, 0x3F	; 63
    15fe:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1602:	88 23       	and	r24, r24
    1604:	2c f4       	brge	.+10     	; 0x1610 <LCD_voidSendCommand+0x8e>
		__ticks = 1;
    1606:	81 e0       	ldi	r24, 0x01	; 1
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	9e 83       	std	Y+6, r25	; 0x06
    160c:	8d 83       	std	Y+5, r24	; 0x05
    160e:	3f c0       	rjmp	.+126    	; 0x168e <LCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    1610:	6f 81       	ldd	r22, Y+7	; 0x07
    1612:	78 85       	ldd	r23, Y+8	; 0x08
    1614:	89 85       	ldd	r24, Y+9	; 0x09
    1616:	9a 85       	ldd	r25, Y+10	; 0x0a
    1618:	20 e0       	ldi	r18, 0x00	; 0
    161a:	3f ef       	ldi	r19, 0xFF	; 255
    161c:	4f e7       	ldi	r20, 0x7F	; 127
    161e:	57 e4       	ldi	r21, 0x47	; 71
    1620:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1624:	18 16       	cp	r1, r24
    1626:	4c f5       	brge	.+82     	; 0x167a <LCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1628:	6b 85       	ldd	r22, Y+11	; 0x0b
    162a:	7c 85       	ldd	r23, Y+12	; 0x0c
    162c:	8d 85       	ldd	r24, Y+13	; 0x0d
    162e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1630:	20 e0       	ldi	r18, 0x00	; 0
    1632:	30 e0       	ldi	r19, 0x00	; 0
    1634:	40 e2       	ldi	r20, 0x20	; 32
    1636:	51 e4       	ldi	r21, 0x41	; 65
    1638:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    163c:	dc 01       	movw	r26, r24
    163e:	cb 01       	movw	r24, r22
    1640:	bc 01       	movw	r22, r24
    1642:	cd 01       	movw	r24, r26
    1644:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1648:	dc 01       	movw	r26, r24
    164a:	cb 01       	movw	r24, r22
    164c:	9e 83       	std	Y+6, r25	; 0x06
    164e:	8d 83       	std	Y+5, r24	; 0x05
    1650:	0f c0       	rjmp	.+30     	; 0x1670 <LCD_voidSendCommand+0xee>
    1652:	88 ec       	ldi	r24, 0xC8	; 200
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	9c 83       	std	Y+4, r25	; 0x04
    1658:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    165a:	8b 81       	ldd	r24, Y+3	; 0x03
    165c:	9c 81       	ldd	r25, Y+4	; 0x04
    165e:	01 97       	sbiw	r24, 0x01	; 1
    1660:	f1 f7       	brne	.-4      	; 0x165e <LCD_voidSendCommand+0xdc>
    1662:	9c 83       	std	Y+4, r25	; 0x04
    1664:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1666:	8d 81       	ldd	r24, Y+5	; 0x05
    1668:	9e 81       	ldd	r25, Y+6	; 0x06
    166a:	01 97       	sbiw	r24, 0x01	; 1
    166c:	9e 83       	std	Y+6, r25	; 0x06
    166e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1670:	8d 81       	ldd	r24, Y+5	; 0x05
    1672:	9e 81       	ldd	r25, Y+6	; 0x06
    1674:	00 97       	sbiw	r24, 0x00	; 0
    1676:	69 f7       	brne	.-38     	; 0x1652 <LCD_voidSendCommand+0xd0>
    1678:	14 c0       	rjmp	.+40     	; 0x16a2 <LCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    167a:	6f 81       	ldd	r22, Y+7	; 0x07
    167c:	78 85       	ldd	r23, Y+8	; 0x08
    167e:	89 85       	ldd	r24, Y+9	; 0x09
    1680:	9a 85       	ldd	r25, Y+10	; 0x0a
    1682:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1686:	dc 01       	movw	r26, r24
    1688:	cb 01       	movw	r24, r22
    168a:	9e 83       	std	Y+6, r25	; 0x06
    168c:	8d 83       	std	Y+5, r24	; 0x05
    168e:	8d 81       	ldd	r24, Y+5	; 0x05
    1690:	9e 81       	ldd	r25, Y+6	; 0x06
    1692:	9a 83       	std	Y+2, r25	; 0x02
    1694:	89 83       	std	Y+1, r24	; 0x01
    1696:	89 81       	ldd	r24, Y+1	; 0x01
    1698:	9a 81       	ldd	r25, Y+2	; 0x02
    169a:	01 97       	sbiw	r24, 0x01	; 1
    169c:	f1 f7       	brne	.-4      	; 0x169a <LCD_voidSendCommand+0x118>
    169e:	9a 83       	std	Y+2, r25	; 0x02
    16a0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(LCD_CRTL_PORT, LCD_EN_PIN, DIO_PIN_LOW);
    16a2:	83 e0       	ldi	r24, 0x03	; 3
    16a4:	65 e0       	ldi	r22, 0x05	; 5
    16a6:	40 e0       	ldi	r20, 0x00	; 0
    16a8:	0e 94 97 07 	call	0xf2e	; 0xf2e <DIO_u8SetPinValue>
}
    16ac:	2f 96       	adiw	r28, 0x0f	; 15
    16ae:	0f b6       	in	r0, 0x3f	; 63
    16b0:	f8 94       	cli
    16b2:	de bf       	out	0x3e, r29	; 62
    16b4:	0f be       	out	0x3f, r0	; 63
    16b6:	cd bf       	out	0x3d, r28	; 61
    16b8:	cf 91       	pop	r28
    16ba:	df 91       	pop	r29
    16bc:	08 95       	ret

000016be <LCD_voidSendData>:


void LCD_voidSendData(u8 Copy_u8Data)
{
    16be:	df 93       	push	r29
    16c0:	cf 93       	push	r28
    16c2:	cd b7       	in	r28, 0x3d	; 61
    16c4:	de b7       	in	r29, 0x3e	; 62
    16c6:	2f 97       	sbiw	r28, 0x0f	; 15
    16c8:	0f b6       	in	r0, 0x3f	; 63
    16ca:	f8 94       	cli
    16cc:	de bf       	out	0x3e, r29	; 62
    16ce:	0f be       	out	0x3f, r0	; 63
    16d0:	cd bf       	out	0x3d, r28	; 61
    16d2:	8f 87       	std	Y+15, r24	; 0x0f
	/*Set the RS pin to be HIGH: 1 command*/
	DIO_u8SetPinValue(LCD_CRTL_PORT, LCD_RS_PIN, DIO_PIN_HIGH);
    16d4:	83 e0       	ldi	r24, 0x03	; 3
    16d6:	67 e0       	ldi	r22, 0x07	; 7
    16d8:	41 e0       	ldi	r20, 0x01	; 1
    16da:	0e 94 97 07 	call	0xf2e	; 0xf2e <DIO_u8SetPinValue>
	/*Set the RW pin to be LOW: 0 write*/
	DIO_u8SetPinValue(LCD_CRTL_PORT, LCD_RW_PIN, DIO_PIN_LOW);
    16de:	83 e0       	ldi	r24, 0x03	; 3
    16e0:	66 e0       	ldi	r22, 0x06	; 6
    16e2:	40 e0       	ldi	r20, 0x00	; 0
    16e4:	0e 94 97 07 	call	0xf2e	; 0xf2e <DIO_u8SetPinValue>

#if 	LCD_MODE == LCD_EIGHT_BIT

	/*Set the Port value to be the data*/
	DIO_u8SetPortValue(LCD_DATA_PORT, Copy_u8Data);
    16e8:	82 e0       	ldi	r24, 0x02	; 2
    16ea:	6f 85       	ldd	r22, Y+15	; 0x0f
    16ec:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <DIO_u8SetPortValue>
	DIO_u8SetPortValue(LCD_DATA_PORT, ((Copy_u8Data<<4) & 0xf0));

#endif

	/*Set the EN pin to be HIGH: 1 to read , waiting for 2ms and then make it LOW again: 0*/
	DIO_u8SetPinValue(LCD_CRTL_PORT, LCD_EN_PIN, DIO_PIN_HIGH);
    16f0:	83 e0       	ldi	r24, 0x03	; 3
    16f2:	65 e0       	ldi	r22, 0x05	; 5
    16f4:	41 e0       	ldi	r20, 0x01	; 1
    16f6:	0e 94 97 07 	call	0xf2e	; 0xf2e <DIO_u8SetPinValue>
    16fa:	80 e0       	ldi	r24, 0x00	; 0
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	a0 e0       	ldi	r26, 0x00	; 0
    1700:	b0 e4       	ldi	r27, 0x40	; 64
    1702:	8b 87       	std	Y+11, r24	; 0x0b
    1704:	9c 87       	std	Y+12, r25	; 0x0c
    1706:	ad 87       	std	Y+13, r26	; 0x0d
    1708:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    170a:	6b 85       	ldd	r22, Y+11	; 0x0b
    170c:	7c 85       	ldd	r23, Y+12	; 0x0c
    170e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1710:	9e 85       	ldd	r25, Y+14	; 0x0e
    1712:	20 e0       	ldi	r18, 0x00	; 0
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	4a ef       	ldi	r20, 0xFA	; 250
    1718:	54 e4       	ldi	r21, 0x44	; 68
    171a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    171e:	dc 01       	movw	r26, r24
    1720:	cb 01       	movw	r24, r22
    1722:	8f 83       	std	Y+7, r24	; 0x07
    1724:	98 87       	std	Y+8, r25	; 0x08
    1726:	a9 87       	std	Y+9, r26	; 0x09
    1728:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    172a:	6f 81       	ldd	r22, Y+7	; 0x07
    172c:	78 85       	ldd	r23, Y+8	; 0x08
    172e:	89 85       	ldd	r24, Y+9	; 0x09
    1730:	9a 85       	ldd	r25, Y+10	; 0x0a
    1732:	20 e0       	ldi	r18, 0x00	; 0
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	40 e8       	ldi	r20, 0x80	; 128
    1738:	5f e3       	ldi	r21, 0x3F	; 63
    173a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    173e:	88 23       	and	r24, r24
    1740:	2c f4       	brge	.+10     	; 0x174c <LCD_voidSendData+0x8e>
		__ticks = 1;
    1742:	81 e0       	ldi	r24, 0x01	; 1
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	9e 83       	std	Y+6, r25	; 0x06
    1748:	8d 83       	std	Y+5, r24	; 0x05
    174a:	3f c0       	rjmp	.+126    	; 0x17ca <LCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    174c:	6f 81       	ldd	r22, Y+7	; 0x07
    174e:	78 85       	ldd	r23, Y+8	; 0x08
    1750:	89 85       	ldd	r24, Y+9	; 0x09
    1752:	9a 85       	ldd	r25, Y+10	; 0x0a
    1754:	20 e0       	ldi	r18, 0x00	; 0
    1756:	3f ef       	ldi	r19, 0xFF	; 255
    1758:	4f e7       	ldi	r20, 0x7F	; 127
    175a:	57 e4       	ldi	r21, 0x47	; 71
    175c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1760:	18 16       	cp	r1, r24
    1762:	4c f5       	brge	.+82     	; 0x17b6 <LCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1764:	6b 85       	ldd	r22, Y+11	; 0x0b
    1766:	7c 85       	ldd	r23, Y+12	; 0x0c
    1768:	8d 85       	ldd	r24, Y+13	; 0x0d
    176a:	9e 85       	ldd	r25, Y+14	; 0x0e
    176c:	20 e0       	ldi	r18, 0x00	; 0
    176e:	30 e0       	ldi	r19, 0x00	; 0
    1770:	40 e2       	ldi	r20, 0x20	; 32
    1772:	51 e4       	ldi	r21, 0x41	; 65
    1774:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1778:	dc 01       	movw	r26, r24
    177a:	cb 01       	movw	r24, r22
    177c:	bc 01       	movw	r22, r24
    177e:	cd 01       	movw	r24, r26
    1780:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1784:	dc 01       	movw	r26, r24
    1786:	cb 01       	movw	r24, r22
    1788:	9e 83       	std	Y+6, r25	; 0x06
    178a:	8d 83       	std	Y+5, r24	; 0x05
    178c:	0f c0       	rjmp	.+30     	; 0x17ac <LCD_voidSendData+0xee>
    178e:	88 ec       	ldi	r24, 0xC8	; 200
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	9c 83       	std	Y+4, r25	; 0x04
    1794:	8b 83       	std	Y+3, r24	; 0x03
    1796:	8b 81       	ldd	r24, Y+3	; 0x03
    1798:	9c 81       	ldd	r25, Y+4	; 0x04
    179a:	01 97       	sbiw	r24, 0x01	; 1
    179c:	f1 f7       	brne	.-4      	; 0x179a <LCD_voidSendData+0xdc>
    179e:	9c 83       	std	Y+4, r25	; 0x04
    17a0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17a2:	8d 81       	ldd	r24, Y+5	; 0x05
    17a4:	9e 81       	ldd	r25, Y+6	; 0x06
    17a6:	01 97       	sbiw	r24, 0x01	; 1
    17a8:	9e 83       	std	Y+6, r25	; 0x06
    17aa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17ac:	8d 81       	ldd	r24, Y+5	; 0x05
    17ae:	9e 81       	ldd	r25, Y+6	; 0x06
    17b0:	00 97       	sbiw	r24, 0x00	; 0
    17b2:	69 f7       	brne	.-38     	; 0x178e <LCD_voidSendData+0xd0>
    17b4:	14 c0       	rjmp	.+40     	; 0x17de <LCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17b6:	6f 81       	ldd	r22, Y+7	; 0x07
    17b8:	78 85       	ldd	r23, Y+8	; 0x08
    17ba:	89 85       	ldd	r24, Y+9	; 0x09
    17bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    17be:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17c2:	dc 01       	movw	r26, r24
    17c4:	cb 01       	movw	r24, r22
    17c6:	9e 83       	std	Y+6, r25	; 0x06
    17c8:	8d 83       	std	Y+5, r24	; 0x05
    17ca:	8d 81       	ldd	r24, Y+5	; 0x05
    17cc:	9e 81       	ldd	r25, Y+6	; 0x06
    17ce:	9a 83       	std	Y+2, r25	; 0x02
    17d0:	89 83       	std	Y+1, r24	; 0x01
    17d2:	89 81       	ldd	r24, Y+1	; 0x01
    17d4:	9a 81       	ldd	r25, Y+2	; 0x02
    17d6:	01 97       	sbiw	r24, 0x01	; 1
    17d8:	f1 f7       	brne	.-4      	; 0x17d6 <LCD_voidSendData+0x118>
    17da:	9a 83       	std	Y+2, r25	; 0x02
    17dc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(LCD_CRTL_PORT, LCD_EN_PIN, DIO_PIN_LOW);
    17de:	83 e0       	ldi	r24, 0x03	; 3
    17e0:	65 e0       	ldi	r22, 0x05	; 5
    17e2:	40 e0       	ldi	r20, 0x00	; 0
    17e4:	0e 94 97 07 	call	0xf2e	; 0xf2e <DIO_u8SetPinValue>
}
    17e8:	2f 96       	adiw	r28, 0x0f	; 15
    17ea:	0f b6       	in	r0, 0x3f	; 63
    17ec:	f8 94       	cli
    17ee:	de bf       	out	0x3e, r29	; 62
    17f0:	0f be       	out	0x3f, r0	; 63
    17f2:	cd bf       	out	0x3d, r28	; 61
    17f4:	cf 91       	pop	r28
    17f6:	df 91       	pop	r29
    17f8:	08 95       	ret

000017fa <LCD_voidInitialize>:

void LCD_voidInitialize(void)
{
    17fa:	df 93       	push	r29
    17fc:	cf 93       	push	r28
    17fe:	cd b7       	in	r28, 0x3d	; 61
    1800:	de b7       	in	r29, 0x3e	; 62
    1802:	2e 97       	sbiw	r28, 0x0e	; 14
    1804:	0f b6       	in	r0, 0x3f	; 63
    1806:	f8 94       	cli
    1808:	de bf       	out	0x3e, r29	; 62
    180a:	0f be       	out	0x3f, r0	; 63
    180c:	cd bf       	out	0x3d, r28	; 61
	/*Set the control pins to be output*/
	DIO_u8SetPinDirection(LCD_CRTL_PORT, LCD_EN_PIN, DIO_PIN_OUTPUT);
    180e:	83 e0       	ldi	r24, 0x03	; 3
    1810:	65 e0       	ldi	r22, 0x05	; 5
    1812:	41 e0       	ldi	r20, 0x01	; 1
    1814:	0e 94 85 06 	call	0xd0a	; 0xd0a <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(LCD_CRTL_PORT, LCD_RW_PIN, DIO_PIN_OUTPUT);
    1818:	83 e0       	ldi	r24, 0x03	; 3
    181a:	66 e0       	ldi	r22, 0x06	; 6
    181c:	41 e0       	ldi	r20, 0x01	; 1
    181e:	0e 94 85 06 	call	0xd0a	; 0xd0a <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(LCD_CRTL_PORT, LCD_RS_PIN, DIO_PIN_OUTPUT);
    1822:	83 e0       	ldi	r24, 0x03	; 3
    1824:	67 e0       	ldi	r22, 0x07	; 7
    1826:	41 e0       	ldi	r20, 0x01	; 1
    1828:	0e 94 85 06 	call	0xd0a	; 0xd0a <DIO_u8SetPinDirection>
    182c:	80 e0       	ldi	r24, 0x00	; 0
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	a0 e2       	ldi	r26, 0x20	; 32
    1832:	b2 e4       	ldi	r27, 0x42	; 66
    1834:	8b 87       	std	Y+11, r24	; 0x0b
    1836:	9c 87       	std	Y+12, r25	; 0x0c
    1838:	ad 87       	std	Y+13, r26	; 0x0d
    183a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    183c:	6b 85       	ldd	r22, Y+11	; 0x0b
    183e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1840:	8d 85       	ldd	r24, Y+13	; 0x0d
    1842:	9e 85       	ldd	r25, Y+14	; 0x0e
    1844:	20 e0       	ldi	r18, 0x00	; 0
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	4a ef       	ldi	r20, 0xFA	; 250
    184a:	54 e4       	ldi	r21, 0x44	; 68
    184c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1850:	dc 01       	movw	r26, r24
    1852:	cb 01       	movw	r24, r22
    1854:	8f 83       	std	Y+7, r24	; 0x07
    1856:	98 87       	std	Y+8, r25	; 0x08
    1858:	a9 87       	std	Y+9, r26	; 0x09
    185a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    185c:	6f 81       	ldd	r22, Y+7	; 0x07
    185e:	78 85       	ldd	r23, Y+8	; 0x08
    1860:	89 85       	ldd	r24, Y+9	; 0x09
    1862:	9a 85       	ldd	r25, Y+10	; 0x0a
    1864:	20 e0       	ldi	r18, 0x00	; 0
    1866:	30 e0       	ldi	r19, 0x00	; 0
    1868:	40 e8       	ldi	r20, 0x80	; 128
    186a:	5f e3       	ldi	r21, 0x3F	; 63
    186c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1870:	88 23       	and	r24, r24
    1872:	2c f4       	brge	.+10     	; 0x187e <LCD_voidInitialize+0x84>
		__ticks = 1;
    1874:	81 e0       	ldi	r24, 0x01	; 1
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	9e 83       	std	Y+6, r25	; 0x06
    187a:	8d 83       	std	Y+5, r24	; 0x05
    187c:	3f c0       	rjmp	.+126    	; 0x18fc <LCD_voidInitialize+0x102>
	else if (__tmp > 65535)
    187e:	6f 81       	ldd	r22, Y+7	; 0x07
    1880:	78 85       	ldd	r23, Y+8	; 0x08
    1882:	89 85       	ldd	r24, Y+9	; 0x09
    1884:	9a 85       	ldd	r25, Y+10	; 0x0a
    1886:	20 e0       	ldi	r18, 0x00	; 0
    1888:	3f ef       	ldi	r19, 0xFF	; 255
    188a:	4f e7       	ldi	r20, 0x7F	; 127
    188c:	57 e4       	ldi	r21, 0x47	; 71
    188e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1892:	18 16       	cp	r1, r24
    1894:	4c f5       	brge	.+82     	; 0x18e8 <LCD_voidInitialize+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1896:	6b 85       	ldd	r22, Y+11	; 0x0b
    1898:	7c 85       	ldd	r23, Y+12	; 0x0c
    189a:	8d 85       	ldd	r24, Y+13	; 0x0d
    189c:	9e 85       	ldd	r25, Y+14	; 0x0e
    189e:	20 e0       	ldi	r18, 0x00	; 0
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	40 e2       	ldi	r20, 0x20	; 32
    18a4:	51 e4       	ldi	r21, 0x41	; 65
    18a6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18aa:	dc 01       	movw	r26, r24
    18ac:	cb 01       	movw	r24, r22
    18ae:	bc 01       	movw	r22, r24
    18b0:	cd 01       	movw	r24, r26
    18b2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18b6:	dc 01       	movw	r26, r24
    18b8:	cb 01       	movw	r24, r22
    18ba:	9e 83       	std	Y+6, r25	; 0x06
    18bc:	8d 83       	std	Y+5, r24	; 0x05
    18be:	0f c0       	rjmp	.+30     	; 0x18de <LCD_voidInitialize+0xe4>
    18c0:	88 ec       	ldi	r24, 0xC8	; 200
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	9c 83       	std	Y+4, r25	; 0x04
    18c6:	8b 83       	std	Y+3, r24	; 0x03
    18c8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ca:	9c 81       	ldd	r25, Y+4	; 0x04
    18cc:	01 97       	sbiw	r24, 0x01	; 1
    18ce:	f1 f7       	brne	.-4      	; 0x18cc <LCD_voidInitialize+0xd2>
    18d0:	9c 83       	std	Y+4, r25	; 0x04
    18d2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18d4:	8d 81       	ldd	r24, Y+5	; 0x05
    18d6:	9e 81       	ldd	r25, Y+6	; 0x06
    18d8:	01 97       	sbiw	r24, 0x01	; 1
    18da:	9e 83       	std	Y+6, r25	; 0x06
    18dc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18de:	8d 81       	ldd	r24, Y+5	; 0x05
    18e0:	9e 81       	ldd	r25, Y+6	; 0x06
    18e2:	00 97       	sbiw	r24, 0x00	; 0
    18e4:	69 f7       	brne	.-38     	; 0x18c0 <LCD_voidInitialize+0xc6>
    18e6:	14 c0       	rjmp	.+40     	; 0x1910 <LCD_voidInitialize+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18e8:	6f 81       	ldd	r22, Y+7	; 0x07
    18ea:	78 85       	ldd	r23, Y+8	; 0x08
    18ec:	89 85       	ldd	r24, Y+9	; 0x09
    18ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    18f0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18f4:	dc 01       	movw	r26, r24
    18f6:	cb 01       	movw	r24, r22
    18f8:	9e 83       	std	Y+6, r25	; 0x06
    18fa:	8d 83       	std	Y+5, r24	; 0x05
    18fc:	8d 81       	ldd	r24, Y+5	; 0x05
    18fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1900:	9a 83       	std	Y+2, r25	; 0x02
    1902:	89 83       	std	Y+1, r24	; 0x01
    1904:	89 81       	ldd	r24, Y+1	; 0x01
    1906:	9a 81       	ldd	r25, Y+2	; 0x02
    1908:	01 97       	sbiw	r24, 0x01	; 1
    190a:	f1 f7       	brne	.-4      	; 0x1908 <LCD_voidInitialize+0x10e>
    190c:	9a 83       	std	Y+2, r25	; 0x02
    190e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(40);

#if LCD_MODE == LCD_EIGHT_BIT

	/*Set the data port to be output*/
	DIO_u8SetPortDirection(LCD_DATA_PORT, DIO_PORT_OUTPUT);
    1910:	82 e0       	ldi	r24, 0x02	; 2
    1912:	6f ef       	ldi	r22, 0xFF	; 255
    1914:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_u8SetPortDirection>

	/*Send the function set command: N = 1 ->2 lines, F = 0 -> 5*8 font size*/
	LCD_voidSendCommand(0x38);
    1918:	88 e3       	ldi	r24, 0x38	; 56
    191a:	0e 94 c1 0a 	call	0x1582	; 0x1582 <LCD_voidSendCommand>

	/*Send the function set command: D = 1 -> DisplayOn, C = 0 -> CursorInvisible, B = 0 -> NoBlinking*/
	LCD_voidSendCommand(0x0C);
    191e:	8c e0       	ldi	r24, 0x0C	; 12
    1920:	0e 94 c1 0a 	call	0x1582	; 0x1582 <LCD_voidSendCommand>

	/*Send the display clear command*/
	LCD_voidSendCommand(0x01);
    1924:	81 e0       	ldi	r24, 0x01	; 1
    1926:	0e 94 c1 0a 	call	0x1582	; 0x1582 <LCD_voidSendCommand>
		LCD_voidSendCommand(0x0C);
	/*Send the display clear command*/
		LCD_voidSendCommand(0x01);

#endif
}
    192a:	2e 96       	adiw	r28, 0x0e	; 14
    192c:	0f b6       	in	r0, 0x3f	; 63
    192e:	f8 94       	cli
    1930:	de bf       	out	0x3e, r29	; 62
    1932:	0f be       	out	0x3f, r0	; 63
    1934:	cd bf       	out	0x3d, r28	; 61
    1936:	cf 91       	pop	r28
    1938:	df 91       	pop	r29
    193a:	08 95       	ret

0000193c <LCD_voidGoToXY>:


void LCD_voidGoToXY(u8 Copy_u8XPostion, u8 Copy_u8YPostion)
{
    193c:	df 93       	push	r29
    193e:	cf 93       	push	r28
    1940:	00 d0       	rcall	.+0      	; 0x1942 <LCD_voidGoToXY+0x6>
    1942:	0f 92       	push	r0
    1944:	cd b7       	in	r28, 0x3d	; 61
    1946:	de b7       	in	r29, 0x3e	; 62
    1948:	8a 83       	std	Y+2, r24	; 0x02
    194a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address = 0;
    194c:	19 82       	std	Y+1, r1	; 0x01
	/* Check the number of row 0 or 1 */
	if (Copy_u8XPostion == LCD_ROW0)
    194e:	8a 81       	ldd	r24, Y+2	; 0x02
    1950:	88 23       	and	r24, r24
    1952:	19 f4       	brne	.+6      	; 0x195a <LCD_voidGoToXY+0x1e>
	{
		Local_u8Address = Copy_u8YPostion;
    1954:	8b 81       	ldd	r24, Y+3	; 0x03
    1956:	89 83       	std	Y+1, r24	; 0x01
    1958:	06 c0       	rjmp	.+12     	; 0x1966 <LCD_voidGoToXY+0x2a>
	}
	else if (Copy_u8XPostion == LCD_ROW1)
    195a:	8a 81       	ldd	r24, Y+2	; 0x02
    195c:	81 30       	cpi	r24, 0x01	; 1
    195e:	19 f4       	brne	.+6      	; 0x1966 <LCD_voidGoToXY+0x2a>
	{
		Local_u8Address = Copy_u8YPostion + DDRAM_OFFSET;
    1960:	8b 81       	ldd	r24, Y+3	; 0x03
    1962:	80 5c       	subi	r24, 0xC0	; 192
    1964:	89 83       	std	Y+1, r24	; 0x01
	}

	SET_BIT(Local_u8Address, 7);
    1966:	89 81       	ldd	r24, Y+1	; 0x01
    1968:	80 68       	ori	r24, 0x80	; 128
    196a:	89 83       	std	Y+1, r24	; 0x01

	LCD_voidSendCommand(Local_u8Address);
    196c:	89 81       	ldd	r24, Y+1	; 0x01
    196e:	0e 94 c1 0a 	call	0x1582	; 0x1582 <LCD_voidSendCommand>

}
    1972:	0f 90       	pop	r0
    1974:	0f 90       	pop	r0
    1976:	0f 90       	pop	r0
    1978:	cf 91       	pop	r28
    197a:	df 91       	pop	r29
    197c:	08 95       	ret

0000197e <LCD_voidSendCustomCharacter>:


void LCD_voidSendCustomCharacter(u8 *Copy_pu8CharacterArray, u8 Copy_u8PatternNumber, u8 Copy_u8XPostion, u8 Copy_u8YPostion)
{
    197e:	df 93       	push	r29
    1980:	cf 93       	push	r28
    1982:	cd b7       	in	r28, 0x3d	; 61
    1984:	de b7       	in	r29, 0x3e	; 62
    1986:	27 97       	sbiw	r28, 0x07	; 7
    1988:	0f b6       	in	r0, 0x3f	; 63
    198a:	f8 94       	cli
    198c:	de bf       	out	0x3e, r29	; 62
    198e:	0f be       	out	0x3f, r0	; 63
    1990:	cd bf       	out	0x3d, r28	; 61
    1992:	9c 83       	std	Y+4, r25	; 0x04
    1994:	8b 83       	std	Y+3, r24	; 0x03
    1996:	6d 83       	std	Y+5, r22	; 0x05
    1998:	4e 83       	std	Y+6, r20	; 0x06
    199a:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMAddress = 0, Local_u8LoopCounter;
    199c:	1a 82       	std	Y+2, r1	; 0x02
	/* Calculating CGRAMAddress */
	Local_u8CGRAMAddress = Copy_u8PatternNumber * 8;
    199e:	8d 81       	ldd	r24, Y+5	; 0x05
    19a0:	88 2f       	mov	r24, r24
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	88 0f       	add	r24, r24
    19a6:	99 1f       	adc	r25, r25
    19a8:	88 0f       	add	r24, r24
    19aa:	99 1f       	adc	r25, r25
    19ac:	88 0f       	add	r24, r24
    19ae:	99 1f       	adc	r25, r25
    19b0:	8a 83       	std	Y+2, r24	; 0x02

	/* make the 6th bit from address to 1 and sending the command to the LCD */
	SET_BIT(Local_u8CGRAMAddress, 6);
    19b2:	8a 81       	ldd	r24, Y+2	; 0x02
    19b4:	80 64       	ori	r24, 0x40	; 64
    19b6:	8a 83       	std	Y+2, r24	; 0x02
	LCD_voidSendCommand(Local_u8CGRAMAddress);
    19b8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ba:	0e 94 c1 0a 	call	0x1582	; 0x1582 <LCD_voidSendCommand>

	/* Sending the bytes from character array to the LCD */
	for(Local_u8LoopCounter = 0; Local_u8LoopCounter < 8; Local_u8LoopCounter++)
    19be:	19 82       	std	Y+1, r1	; 0x01
    19c0:	0e c0       	rjmp	.+28     	; 0x19de <LCD_voidSendCustomCharacter+0x60>
	{
		LCD_voidSendData(Copy_pu8CharacterArray[Local_u8LoopCounter]);
    19c2:	89 81       	ldd	r24, Y+1	; 0x01
    19c4:	28 2f       	mov	r18, r24
    19c6:	30 e0       	ldi	r19, 0x00	; 0
    19c8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ca:	9c 81       	ldd	r25, Y+4	; 0x04
    19cc:	fc 01       	movw	r30, r24
    19ce:	e2 0f       	add	r30, r18
    19d0:	f3 1f       	adc	r31, r19
    19d2:	80 81       	ld	r24, Z
    19d4:	0e 94 5f 0b 	call	0x16be	; 0x16be <LCD_voidSendData>
	/* make the 6th bit from address to 1 and sending the command to the LCD */
	SET_BIT(Local_u8CGRAMAddress, 6);
	LCD_voidSendCommand(Local_u8CGRAMAddress);

	/* Sending the bytes from character array to the LCD */
	for(Local_u8LoopCounter = 0; Local_u8LoopCounter < 8; Local_u8LoopCounter++)
    19d8:	89 81       	ldd	r24, Y+1	; 0x01
    19da:	8f 5f       	subi	r24, 0xFF	; 255
    19dc:	89 83       	std	Y+1, r24	; 0x01
    19de:	89 81       	ldd	r24, Y+1	; 0x01
    19e0:	88 30       	cpi	r24, 0x08	; 8
    19e2:	78 f3       	brcs	.-34     	; 0x19c2 <LCD_voidSendCustomCharacter+0x44>
	{
		LCD_voidSendData(Copy_pu8CharacterArray[Local_u8LoopCounter]);
	}
	/* Send the DDRAM address command and specifying the position of the character */
	LCD_voidGoToXY(Copy_u8XPostion, Copy_u8YPostion);
    19e4:	8e 81       	ldd	r24, Y+6	; 0x06
    19e6:	6f 81       	ldd	r22, Y+7	; 0x07
    19e8:	0e 94 9e 0c 	call	0x193c	; 0x193c <LCD_voidGoToXY>

	/* Displaying the pattern from CGRAM */
	LCD_voidSendData(Copy_u8PatternNumber);
    19ec:	8d 81       	ldd	r24, Y+5	; 0x05
    19ee:	0e 94 5f 0b 	call	0x16be	; 0x16be <LCD_voidSendData>
}
    19f2:	27 96       	adiw	r28, 0x07	; 7
    19f4:	0f b6       	in	r0, 0x3f	; 63
    19f6:	f8 94       	cli
    19f8:	de bf       	out	0x3e, r29	; 62
    19fa:	0f be       	out	0x3f, r0	; 63
    19fc:	cd bf       	out	0x3d, r28	; 61
    19fe:	cf 91       	pop	r28
    1a00:	df 91       	pop	r29
    1a02:	08 95       	ret

00001a04 <LCD_voidSendString>:


void LCD_voidSendString(const u8 *Copy_pu8String)
{
    1a04:	df 93       	push	r29
    1a06:	cf 93       	push	r28
    1a08:	00 d0       	rcall	.+0      	; 0x1a0a <LCD_voidSendString+0x6>
    1a0a:	0f 92       	push	r0
    1a0c:	cd b7       	in	r28, 0x3d	; 61
    1a0e:	de b7       	in	r29, 0x3e	; 62
    1a10:	9b 83       	std	Y+3, r25	; 0x03
    1a12:	8a 83       	std	Y+2, r24	; 0x02
	for(u8 Local_u8Iterator = 0; Copy_pu8String[Local_u8Iterator] != '\0'; Local_u8Iterator++)
    1a14:	19 82       	std	Y+1, r1	; 0x01
    1a16:	0e c0       	rjmp	.+28     	; 0x1a34 <LCD_voidSendString+0x30>
	{
		LCD_voidSendData(Copy_pu8String[Local_u8Iterator]);
    1a18:	89 81       	ldd	r24, Y+1	; 0x01
    1a1a:	28 2f       	mov	r18, r24
    1a1c:	30 e0       	ldi	r19, 0x00	; 0
    1a1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a20:	9b 81       	ldd	r25, Y+3	; 0x03
    1a22:	fc 01       	movw	r30, r24
    1a24:	e2 0f       	add	r30, r18
    1a26:	f3 1f       	adc	r31, r19
    1a28:	80 81       	ld	r24, Z
    1a2a:	0e 94 5f 0b 	call	0x16be	; 0x16be <LCD_voidSendData>
}


void LCD_voidSendString(const u8 *Copy_pu8String)
{
	for(u8 Local_u8Iterator = 0; Copy_pu8String[Local_u8Iterator] != '\0'; Local_u8Iterator++)
    1a2e:	89 81       	ldd	r24, Y+1	; 0x01
    1a30:	8f 5f       	subi	r24, 0xFF	; 255
    1a32:	89 83       	std	Y+1, r24	; 0x01
    1a34:	89 81       	ldd	r24, Y+1	; 0x01
    1a36:	28 2f       	mov	r18, r24
    1a38:	30 e0       	ldi	r19, 0x00	; 0
    1a3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3c:	9b 81       	ldd	r25, Y+3	; 0x03
    1a3e:	fc 01       	movw	r30, r24
    1a40:	e2 0f       	add	r30, r18
    1a42:	f3 1f       	adc	r31, r19
    1a44:	80 81       	ld	r24, Z
    1a46:	88 23       	and	r24, r24
    1a48:	39 f7       	brne	.-50     	; 0x1a18 <LCD_voidSendString+0x14>
	{
		LCD_voidSendData(Copy_pu8String[Local_u8Iterator]);
	}
}
    1a4a:	0f 90       	pop	r0
    1a4c:	0f 90       	pop	r0
    1a4e:	0f 90       	pop	r0
    1a50:	cf 91       	pop	r28
    1a52:	df 91       	pop	r29
    1a54:	08 95       	ret

00001a56 <LCD_voidSplitNumber>:

void LCD_voidSplitNumber(s32 Copy_s32Number)
{
    1a56:	ef 92       	push	r14
    1a58:	ff 92       	push	r15
    1a5a:	0f 93       	push	r16
    1a5c:	1f 93       	push	r17
    1a5e:	df 93       	push	r29
    1a60:	cf 93       	push	r28
    1a62:	cd b7       	in	r28, 0x3d	; 61
    1a64:	de b7       	in	r29, 0x3e	; 62
    1a66:	62 97       	sbiw	r28, 0x12	; 18
    1a68:	0f b6       	in	r0, 0x3f	; 63
    1a6a:	f8 94       	cli
    1a6c:	de bf       	out	0x3e, r29	; 62
    1a6e:	0f be       	out	0x3f, r0	; 63
    1a70:	cd bf       	out	0x3d, r28	; 61
    1a72:	9a 8b       	std	Y+18, r25	; 0x12
    1a74:	89 8b       	std	Y+17, r24	; 0x11
	s8 Local_s8Array[11], Local_s8Digits = 0;
    1a76:	1d 82       	std	Y+5, r1	; 0x05
	s32 Local_s32Copy;

	if (Copy_s32Number > 0)
    1a78:	89 89       	ldd	r24, Y+17	; 0x11
    1a7a:	9a 89       	ldd	r25, Y+18	; 0x12
    1a7c:	18 16       	cp	r1, r24
    1a7e:	19 06       	cpc	r1, r25
    1a80:	bc f4       	brge	.+46     	; 0x1ab0 <LCD_voidSplitNumber+0x5a>
	{
		Local_s32Copy = Copy_s32Number;
    1a82:	89 89       	ldd	r24, Y+17	; 0x11
    1a84:	9a 89       	ldd	r25, Y+18	; 0x12
    1a86:	9c 83       	std	Y+4, r25	; 0x04
    1a88:	8b 83       	std	Y+3, r24	; 0x03
    1a8a:	0d c0       	rjmp	.+26     	; 0x1aa6 <LCD_voidSplitNumber+0x50>
		while (Local_s32Copy != 0)
		{
			Local_s32Copy /= 10;
    1a8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a90:	2a e0       	ldi	r18, 0x0A	; 10
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	b9 01       	movw	r22, r18
    1a96:	0e 94 bd 11 	call	0x237a	; 0x237a <__divmodhi4>
    1a9a:	cb 01       	movw	r24, r22
    1a9c:	9c 83       	std	Y+4, r25	; 0x04
    1a9e:	8b 83       	std	Y+3, r24	; 0x03
			Local_s8Digits++;
    1aa0:	8d 81       	ldd	r24, Y+5	; 0x05
    1aa2:	8f 5f       	subi	r24, 0xFF	; 255
    1aa4:	8d 83       	std	Y+5, r24	; 0x05
	s32 Local_s32Copy;

	if (Copy_s32Number > 0)
	{
		Local_s32Copy = Copy_s32Number;
		while (Local_s32Copy != 0)
    1aa6:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa8:	9c 81       	ldd	r25, Y+4	; 0x04
    1aaa:	00 97       	sbiw	r24, 0x00	; 0
    1aac:	79 f7       	brne	.-34     	; 0x1a8c <LCD_voidSplitNumber+0x36>
    1aae:	38 c0       	rjmp	.+112    	; 0x1b20 <LCD_voidSplitNumber+0xca>
		{
			Local_s32Copy /= 10;
			Local_s8Digits++;
		}
	}
	else if (Copy_s32Number < 0)
    1ab0:	89 89       	ldd	r24, Y+17	; 0x11
    1ab2:	9a 89       	ldd	r25, Y+18	; 0x12
    1ab4:	99 23       	and	r25, r25
    1ab6:	d4 f4       	brge	.+52     	; 0x1aec <LCD_voidSplitNumber+0x96>
	{
		Local_s32Copy = -Copy_s32Number;
    1ab8:	89 89       	ldd	r24, Y+17	; 0x11
    1aba:	9a 89       	ldd	r25, Y+18	; 0x12
    1abc:	90 95       	com	r25
    1abe:	81 95       	neg	r24
    1ac0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ac2:	9c 83       	std	Y+4, r25	; 0x04
    1ac4:	8b 83       	std	Y+3, r24	; 0x03
    1ac6:	0d c0       	rjmp	.+26     	; 0x1ae2 <LCD_voidSplitNumber+0x8c>

		{
			while (Local_s32Copy != 0)
			{
				Local_s32Copy /= 10;
    1ac8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aca:	9c 81       	ldd	r25, Y+4	; 0x04
    1acc:	2a e0       	ldi	r18, 0x0A	; 10
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	b9 01       	movw	r22, r18
    1ad2:	0e 94 bd 11 	call	0x237a	; 0x237a <__divmodhi4>
    1ad6:	cb 01       	movw	r24, r22
    1ad8:	9c 83       	std	Y+4, r25	; 0x04
    1ada:	8b 83       	std	Y+3, r24	; 0x03
				Local_s8Digits++;
    1adc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ade:	8f 5f       	subi	r24, 0xFF	; 255
    1ae0:	8d 83       	std	Y+5, r24	; 0x05
	else if (Copy_s32Number < 0)
	{
		Local_s32Copy = -Copy_s32Number;

		{
			while (Local_s32Copy != 0)
    1ae2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae6:	00 97       	sbiw	r24, 0x00	; 0
    1ae8:	79 f7       	brne	.-34     	; 0x1ac8 <LCD_voidSplitNumber+0x72>
    1aea:	1a c0       	rjmp	.+52     	; 0x1b20 <LCD_voidSplitNumber+0xca>
			}
		}
	}
	else
	{
		Local_s8Array[Local_s8Digits] = Copy_s32Number;
    1aec:	8d 81       	ldd	r24, Y+5	; 0x05
    1aee:	28 2f       	mov	r18, r24
    1af0:	33 27       	eor	r19, r19
    1af2:	27 fd       	sbrc	r18, 7
    1af4:	30 95       	com	r19
    1af6:	49 89       	ldd	r20, Y+17	; 0x11
    1af8:	ce 01       	movw	r24, r28
    1afa:	06 96       	adiw	r24, 0x06	; 6
    1afc:	fc 01       	movw	r30, r24
    1afe:	e2 0f       	add	r30, r18
    1b00:	f3 1f       	adc	r31, r19
    1b02:	40 83       	st	Z, r20
		LCD_voidSendData(Local_s8Array[Local_s8Digits] + '0');
    1b04:	8d 81       	ldd	r24, Y+5	; 0x05
    1b06:	28 2f       	mov	r18, r24
    1b08:	33 27       	eor	r19, r19
    1b0a:	27 fd       	sbrc	r18, 7
    1b0c:	30 95       	com	r19
    1b0e:	ce 01       	movw	r24, r28
    1b10:	06 96       	adiw	r24, 0x06	; 6
    1b12:	fc 01       	movw	r30, r24
    1b14:	e2 0f       	add	r30, r18
    1b16:	f3 1f       	adc	r31, r19
    1b18:	80 81       	ld	r24, Z
    1b1a:	80 5d       	subi	r24, 0xD0	; 208
    1b1c:	0e 94 5f 0b 	call	0x16be	; 0x16be <LCD_voidSendData>
	}

	if (Local_s8Digits > 0)
    1b20:	8d 81       	ldd	r24, Y+5	; 0x05
    1b22:	18 16       	cp	r1, r24
    1b24:	0c f0       	brlt	.+2      	; 0x1b28 <LCD_voidSplitNumber+0xd2>
    1b26:	e4 c0       	rjmp	.+456    	; 0x1cf0 <LCD_voidSplitNumber+0x29a>
	{
		if (Copy_s32Number > 0)
    1b28:	89 89       	ldd	r24, Y+17	; 0x11
    1b2a:	9a 89       	ldd	r25, Y+18	; 0x12
    1b2c:	18 16       	cp	r1, r24
    1b2e:	19 06       	cpc	r1, r25
    1b30:	0c f0       	brlt	.+2      	; 0x1b34 <LCD_voidSplitNumber+0xde>
    1b32:	5e c0       	rjmp	.+188    	; 0x1bf0 <LCD_voidSplitNumber+0x19a>
		{
			for (u8 Local_u8Iterator= 0; Local_s8Digits != 0; Local_u8Iterator++)
    1b34:	1a 82       	std	Y+2, r1	; 0x02
    1b36:	57 c0       	rjmp	.+174    	; 0x1be6 <LCD_voidSplitNumber+0x190>
			{
				Local_s8Array[Local_u8Iterator] = Copy_s32Number / LCD_u32Power(10, Local_s8Digits-1);
    1b38:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3a:	e8 2e       	mov	r14, r24
    1b3c:	ff 24       	eor	r15, r15
    1b3e:	09 89       	ldd	r16, Y+17	; 0x11
    1b40:	1a 89       	ldd	r17, Y+18	; 0x12
    1b42:	8d 81       	ldd	r24, Y+5	; 0x05
    1b44:	99 27       	eor	r25, r25
    1b46:	87 fd       	sbrc	r24, 7
    1b48:	90 95       	com	r25
    1b4a:	01 97       	sbiw	r24, 0x01	; 1
    1b4c:	9c 01       	movw	r18, r24
    1b4e:	8a e0       	ldi	r24, 0x0A	; 10
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	b9 01       	movw	r22, r18
    1b54:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <LCD_u32Power>
    1b58:	9c 01       	movw	r18, r24
    1b5a:	c8 01       	movw	r24, r16
    1b5c:	b9 01       	movw	r22, r18
    1b5e:	0e 94 a9 11 	call	0x2352	; 0x2352 <__udivmodhi4>
    1b62:	cb 01       	movw	r24, r22
    1b64:	28 2f       	mov	r18, r24
    1b66:	ce 01       	movw	r24, r28
    1b68:	06 96       	adiw	r24, 0x06	; 6
    1b6a:	fc 01       	movw	r30, r24
    1b6c:	ee 0d       	add	r30, r14
    1b6e:	ff 1d       	adc	r31, r15
    1b70:	20 83       	st	Z, r18
				Copy_s32Number -= Local_s8Array[Local_u8Iterator] * LCD_u32Power(10, Local_s8Digits-1);
    1b72:	e9 88       	ldd	r14, Y+17	; 0x11
    1b74:	fa 88       	ldd	r15, Y+18	; 0x12
    1b76:	8a 81       	ldd	r24, Y+2	; 0x02
    1b78:	28 2f       	mov	r18, r24
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	ce 01       	movw	r24, r28
    1b7e:	06 96       	adiw	r24, 0x06	; 6
    1b80:	fc 01       	movw	r30, r24
    1b82:	e2 0f       	add	r30, r18
    1b84:	f3 1f       	adc	r31, r19
    1b86:	80 81       	ld	r24, Z
    1b88:	08 2f       	mov	r16, r24
    1b8a:	11 27       	eor	r17, r17
    1b8c:	07 fd       	sbrc	r16, 7
    1b8e:	10 95       	com	r17
    1b90:	8d 81       	ldd	r24, Y+5	; 0x05
    1b92:	99 27       	eor	r25, r25
    1b94:	87 fd       	sbrc	r24, 7
    1b96:	90 95       	com	r25
    1b98:	01 97       	sbiw	r24, 0x01	; 1
    1b9a:	9c 01       	movw	r18, r24
    1b9c:	8a e0       	ldi	r24, 0x0A	; 10
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	b9 01       	movw	r22, r18
    1ba2:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <LCD_u32Power>
    1ba6:	9c 01       	movw	r18, r24
    1ba8:	02 9f       	mul	r16, r18
    1baa:	c0 01       	movw	r24, r0
    1bac:	03 9f       	mul	r16, r19
    1bae:	90 0d       	add	r25, r0
    1bb0:	12 9f       	mul	r17, r18
    1bb2:	90 0d       	add	r25, r0
    1bb4:	11 24       	eor	r1, r1
    1bb6:	97 01       	movw	r18, r14
    1bb8:	28 1b       	sub	r18, r24
    1bba:	39 0b       	sbc	r19, r25
    1bbc:	c9 01       	movw	r24, r18
    1bbe:	9a 8b       	std	Y+18, r25	; 0x12
    1bc0:	89 8b       	std	Y+17, r24	; 0x11
				Local_s8Digits--;
    1bc2:	8d 81       	ldd	r24, Y+5	; 0x05
    1bc4:	81 50       	subi	r24, 0x01	; 1
    1bc6:	8d 83       	std	Y+5, r24	; 0x05
				LCD_voidSendData(Local_s8Array[Local_u8Iterator] + '0');
    1bc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bca:	28 2f       	mov	r18, r24
    1bcc:	30 e0       	ldi	r19, 0x00	; 0
    1bce:	ce 01       	movw	r24, r28
    1bd0:	06 96       	adiw	r24, 0x06	; 6
    1bd2:	fc 01       	movw	r30, r24
    1bd4:	e2 0f       	add	r30, r18
    1bd6:	f3 1f       	adc	r31, r19
    1bd8:	80 81       	ld	r24, Z
    1bda:	80 5d       	subi	r24, 0xD0	; 208
    1bdc:	0e 94 5f 0b 	call	0x16be	; 0x16be <LCD_voidSendData>

	if (Local_s8Digits > 0)
	{
		if (Copy_s32Number > 0)
		{
			for (u8 Local_u8Iterator= 0; Local_s8Digits != 0; Local_u8Iterator++)
    1be0:	8a 81       	ldd	r24, Y+2	; 0x02
    1be2:	8f 5f       	subi	r24, 0xFF	; 255
    1be4:	8a 83       	std	Y+2, r24	; 0x02
    1be6:	8d 81       	ldd	r24, Y+5	; 0x05
    1be8:	88 23       	and	r24, r24
    1bea:	09 f0       	breq	.+2      	; 0x1bee <LCD_voidSplitNumber+0x198>
    1bec:	a5 cf       	rjmp	.-182    	; 0x1b38 <LCD_voidSplitNumber+0xe2>
    1bee:	80 c0       	rjmp	.+256    	; 0x1cf0 <LCD_voidSplitNumber+0x29a>
				LCD_voidSendData(Local_s8Array[Local_u8Iterator] + '0');
			}
		}
		else
		{
			u8 Local_u8Iterator= 0;
    1bf0:	19 82       	std	Y+1, r1	; 0x01
			Local_s8Array[Local_s8Digits] = '-';
    1bf2:	8d 81       	ldd	r24, Y+5	; 0x05
    1bf4:	28 2f       	mov	r18, r24
    1bf6:	33 27       	eor	r19, r19
    1bf8:	27 fd       	sbrc	r18, 7
    1bfa:	30 95       	com	r19
    1bfc:	ce 01       	movw	r24, r28
    1bfe:	06 96       	adiw	r24, 0x06	; 6
    1c00:	fc 01       	movw	r30, r24
    1c02:	e2 0f       	add	r30, r18
    1c04:	f3 1f       	adc	r31, r19
    1c06:	8d e2       	ldi	r24, 0x2D	; 45
    1c08:	80 83       	st	Z, r24
			LCD_voidSendData(Local_s8Array[Local_s8Digits]);
    1c0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c0c:	28 2f       	mov	r18, r24
    1c0e:	33 27       	eor	r19, r19
    1c10:	27 fd       	sbrc	r18, 7
    1c12:	30 95       	com	r19
    1c14:	ce 01       	movw	r24, r28
    1c16:	06 96       	adiw	r24, 0x06	; 6
    1c18:	fc 01       	movw	r30, r24
    1c1a:	e2 0f       	add	r30, r18
    1c1c:	f3 1f       	adc	r31, r19
    1c1e:	80 81       	ld	r24, Z
    1c20:	0e 94 5f 0b 	call	0x16be	; 0x16be <LCD_voidSendData>
			Local_u8Iterator++;
    1c24:	89 81       	ldd	r24, Y+1	; 0x01
    1c26:	8f 5f       	subi	r24, 0xFF	; 255
    1c28:	89 83       	std	Y+1, r24	; 0x01
			Copy_s32Number = -Copy_s32Number;
    1c2a:	89 89       	ldd	r24, Y+17	; 0x11
    1c2c:	9a 89       	ldd	r25, Y+18	; 0x12
    1c2e:	90 95       	com	r25
    1c30:	81 95       	neg	r24
    1c32:	9f 4f       	sbci	r25, 0xFF	; 255
    1c34:	9a 8b       	std	Y+18, r25	; 0x12
    1c36:	89 8b       	std	Y+17, r24	; 0x11
    1c38:	57 c0       	rjmp	.+174    	; 0x1ce8 <LCD_voidSplitNumber+0x292>
			for (; Local_s8Digits != 0; Local_u8Iterator++)
			{
				Local_s8Array[Local_u8Iterator] = Copy_s32Number / LCD_u32Power(10, Local_s8Digits-1);
    1c3a:	89 81       	ldd	r24, Y+1	; 0x01
    1c3c:	e8 2e       	mov	r14, r24
    1c3e:	ff 24       	eor	r15, r15
    1c40:	09 89       	ldd	r16, Y+17	; 0x11
    1c42:	1a 89       	ldd	r17, Y+18	; 0x12
    1c44:	8d 81       	ldd	r24, Y+5	; 0x05
    1c46:	99 27       	eor	r25, r25
    1c48:	87 fd       	sbrc	r24, 7
    1c4a:	90 95       	com	r25
    1c4c:	01 97       	sbiw	r24, 0x01	; 1
    1c4e:	9c 01       	movw	r18, r24
    1c50:	8a e0       	ldi	r24, 0x0A	; 10
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	b9 01       	movw	r22, r18
    1c56:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <LCD_u32Power>
    1c5a:	9c 01       	movw	r18, r24
    1c5c:	c8 01       	movw	r24, r16
    1c5e:	b9 01       	movw	r22, r18
    1c60:	0e 94 a9 11 	call	0x2352	; 0x2352 <__udivmodhi4>
    1c64:	cb 01       	movw	r24, r22
    1c66:	28 2f       	mov	r18, r24
    1c68:	ce 01       	movw	r24, r28
    1c6a:	06 96       	adiw	r24, 0x06	; 6
    1c6c:	fc 01       	movw	r30, r24
    1c6e:	ee 0d       	add	r30, r14
    1c70:	ff 1d       	adc	r31, r15
    1c72:	20 83       	st	Z, r18
				Copy_s32Number -= Local_s8Array[Local_u8Iterator] * LCD_u32Power(10, Local_s8Digits-1);
    1c74:	e9 88       	ldd	r14, Y+17	; 0x11
    1c76:	fa 88       	ldd	r15, Y+18	; 0x12
    1c78:	89 81       	ldd	r24, Y+1	; 0x01
    1c7a:	28 2f       	mov	r18, r24
    1c7c:	30 e0       	ldi	r19, 0x00	; 0
    1c7e:	ce 01       	movw	r24, r28
    1c80:	06 96       	adiw	r24, 0x06	; 6
    1c82:	fc 01       	movw	r30, r24
    1c84:	e2 0f       	add	r30, r18
    1c86:	f3 1f       	adc	r31, r19
    1c88:	80 81       	ld	r24, Z
    1c8a:	08 2f       	mov	r16, r24
    1c8c:	11 27       	eor	r17, r17
    1c8e:	07 fd       	sbrc	r16, 7
    1c90:	10 95       	com	r17
    1c92:	8d 81       	ldd	r24, Y+5	; 0x05
    1c94:	99 27       	eor	r25, r25
    1c96:	87 fd       	sbrc	r24, 7
    1c98:	90 95       	com	r25
    1c9a:	01 97       	sbiw	r24, 0x01	; 1
    1c9c:	9c 01       	movw	r18, r24
    1c9e:	8a e0       	ldi	r24, 0x0A	; 10
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	b9 01       	movw	r22, r18
    1ca4:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <LCD_u32Power>
    1ca8:	9c 01       	movw	r18, r24
    1caa:	02 9f       	mul	r16, r18
    1cac:	c0 01       	movw	r24, r0
    1cae:	03 9f       	mul	r16, r19
    1cb0:	90 0d       	add	r25, r0
    1cb2:	12 9f       	mul	r17, r18
    1cb4:	90 0d       	add	r25, r0
    1cb6:	11 24       	eor	r1, r1
    1cb8:	97 01       	movw	r18, r14
    1cba:	28 1b       	sub	r18, r24
    1cbc:	39 0b       	sbc	r19, r25
    1cbe:	c9 01       	movw	r24, r18
    1cc0:	9a 8b       	std	Y+18, r25	; 0x12
    1cc2:	89 8b       	std	Y+17, r24	; 0x11
				Local_s8Digits--;
    1cc4:	8d 81       	ldd	r24, Y+5	; 0x05
    1cc6:	81 50       	subi	r24, 0x01	; 1
    1cc8:	8d 83       	std	Y+5, r24	; 0x05
				LCD_voidSendData(Local_s8Array[Local_u8Iterator] + '0');
    1cca:	89 81       	ldd	r24, Y+1	; 0x01
    1ccc:	28 2f       	mov	r18, r24
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	ce 01       	movw	r24, r28
    1cd2:	06 96       	adiw	r24, 0x06	; 6
    1cd4:	fc 01       	movw	r30, r24
    1cd6:	e2 0f       	add	r30, r18
    1cd8:	f3 1f       	adc	r31, r19
    1cda:	80 81       	ld	r24, Z
    1cdc:	80 5d       	subi	r24, 0xD0	; 208
    1cde:	0e 94 5f 0b 	call	0x16be	; 0x16be <LCD_voidSendData>
			u8 Local_u8Iterator= 0;
			Local_s8Array[Local_s8Digits] = '-';
			LCD_voidSendData(Local_s8Array[Local_s8Digits]);
			Local_u8Iterator++;
			Copy_s32Number = -Copy_s32Number;
			for (; Local_s8Digits != 0; Local_u8Iterator++)
    1ce2:	89 81       	ldd	r24, Y+1	; 0x01
    1ce4:	8f 5f       	subi	r24, 0xFF	; 255
    1ce6:	89 83       	std	Y+1, r24	; 0x01
    1ce8:	8d 81       	ldd	r24, Y+5	; 0x05
    1cea:	88 23       	and	r24, r24
    1cec:	09 f0       	breq	.+2      	; 0x1cf0 <LCD_voidSplitNumber+0x29a>
    1cee:	a5 cf       	rjmp	.-182    	; 0x1c3a <LCD_voidSplitNumber+0x1e4>
				Local_s8Digits--;
				LCD_voidSendData(Local_s8Array[Local_u8Iterator] + '0');
			}
		}
	}
}
    1cf0:	62 96       	adiw	r28, 0x12	; 18
    1cf2:	0f b6       	in	r0, 0x3f	; 63
    1cf4:	f8 94       	cli
    1cf6:	de bf       	out	0x3e, r29	; 62
    1cf8:	0f be       	out	0x3f, r0	; 63
    1cfa:	cd bf       	out	0x3d, r28	; 61
    1cfc:	cf 91       	pop	r28
    1cfe:	df 91       	pop	r29
    1d00:	1f 91       	pop	r17
    1d02:	0f 91       	pop	r16
    1d04:	ff 90       	pop	r15
    1d06:	ef 90       	pop	r14
    1d08:	08 95       	ret

00001d0a <LCD_u32Power>:

u32 LCD_u32Power(u32 Copy_u32Base, u32 Copy_u32Power)
{
    1d0a:	df 93       	push	r29
    1d0c:	cf 93       	push	r28
    1d0e:	00 d0       	rcall	.+0      	; 0x1d10 <LCD_u32Power+0x6>
    1d10:	00 d0       	rcall	.+0      	; 0x1d12 <LCD_u32Power+0x8>
    1d12:	00 d0       	rcall	.+0      	; 0x1d14 <LCD_u32Power+0xa>
    1d14:	cd b7       	in	r28, 0x3d	; 61
    1d16:	de b7       	in	r29, 0x3e	; 62
    1d18:	9c 83       	std	Y+4, r25	; 0x04
    1d1a:	8b 83       	std	Y+3, r24	; 0x03
    1d1c:	7e 83       	std	Y+6, r23	; 0x06
    1d1e:	6d 83       	std	Y+5, r22	; 0x05
	u32 Local_u32Number = Copy_u32Base;
    1d20:	8b 81       	ldd	r24, Y+3	; 0x03
    1d22:	9c 81       	ldd	r25, Y+4	; 0x04
    1d24:	9a 83       	std	Y+2, r25	; 0x02
    1d26:	89 83       	std	Y+1, r24	; 0x01

	/*Covering the case if the power of number was 0*/
	if(Copy_u32Power == 0)
    1d28:	8d 81       	ldd	r24, Y+5	; 0x05
    1d2a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d2c:	00 97       	sbiw	r24, 0x00	; 0
    1d2e:	c1 f4       	brne	.+48     	; 0x1d60 <LCD_u32Power+0x56>
	{
		Copy_u32Base = 1;
    1d30:	81 e0       	ldi	r24, 0x01	; 1
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	9c 83       	std	Y+4, r25	; 0x04
    1d36:	8b 83       	std	Y+3, r24	; 0x03
    1d38:	13 c0       	rjmp	.+38     	; 0x1d60 <LCD_u32Power+0x56>
	}

	/*The body of power function for postive number*/
	for(; Copy_u32Power > 1; Copy_u32Power--)
	{
		Copy_u32Base *= Local_u32Number;
    1d3a:	2b 81       	ldd	r18, Y+3	; 0x03
    1d3c:	3c 81       	ldd	r19, Y+4	; 0x04
    1d3e:	89 81       	ldd	r24, Y+1	; 0x01
    1d40:	9a 81       	ldd	r25, Y+2	; 0x02
    1d42:	ac 01       	movw	r20, r24
    1d44:	24 9f       	mul	r18, r20
    1d46:	c0 01       	movw	r24, r0
    1d48:	25 9f       	mul	r18, r21
    1d4a:	90 0d       	add	r25, r0
    1d4c:	34 9f       	mul	r19, r20
    1d4e:	90 0d       	add	r25, r0
    1d50:	11 24       	eor	r1, r1
    1d52:	9c 83       	std	Y+4, r25	; 0x04
    1d54:	8b 83       	std	Y+3, r24	; 0x03
	{
		Copy_u32Base = 1;
	}

	/*The body of power function for postive number*/
	for(; Copy_u32Power > 1; Copy_u32Power--)
    1d56:	8d 81       	ldd	r24, Y+5	; 0x05
    1d58:	9e 81       	ldd	r25, Y+6	; 0x06
    1d5a:	01 97       	sbiw	r24, 0x01	; 1
    1d5c:	9e 83       	std	Y+6, r25	; 0x06
    1d5e:	8d 83       	std	Y+5, r24	; 0x05
    1d60:	8d 81       	ldd	r24, Y+5	; 0x05
    1d62:	9e 81       	ldd	r25, Y+6	; 0x06
    1d64:	82 30       	cpi	r24, 0x02	; 2
    1d66:	91 05       	cpc	r25, r1
    1d68:	40 f7       	brcc	.-48     	; 0x1d3a <LCD_u32Power+0x30>
	{
		Copy_u32Base *= Local_u32Number;
	}
	return Copy_u32Base;
    1d6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d6c:	9c 81       	ldd	r25, Y+4	; 0x04
}
    1d6e:	26 96       	adiw	r28, 0x06	; 6
    1d70:	0f b6       	in	r0, 0x3f	; 63
    1d72:	f8 94       	cli
    1d74:	de bf       	out	0x3e, r29	; 62
    1d76:	0f be       	out	0x3f, r0	; 63
    1d78:	cd bf       	out	0x3d, r28	; 61
    1d7a:	cf 91       	pop	r28
    1d7c:	df 91       	pop	r29
    1d7e:	08 95       	ret

00001d80 <KPD_voidInit>:
#include "KPD_interface.h"
#include "KPD_private.h"
#include "KPD_config.h"

void KPD_voidInit(void)
{
    1d80:	df 93       	push	r29
    1d82:	cf 93       	push	r28
    1d84:	cd b7       	in	r28, 0x3d	; 61
    1d86:	de b7       	in	r29, 0x3e	; 62
	/* Set the columns pins to be output */
	DIO_u8SetPinDirection(KPD_COLUMNS_PORT, KPD_COLUMN0_PIN, DIO_PIN_OUTPUT);
    1d88:	80 e0       	ldi	r24, 0x00	; 0
    1d8a:	63 e0       	ldi	r22, 0x03	; 3
    1d8c:	41 e0       	ldi	r20, 0x01	; 1
    1d8e:	0e 94 85 06 	call	0xd0a	; 0xd0a <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_COLUMNS_PORT, KPD_COLUMN1_PIN, DIO_PIN_OUTPUT);
    1d92:	80 e0       	ldi	r24, 0x00	; 0
    1d94:	62 e0       	ldi	r22, 0x02	; 2
    1d96:	41 e0       	ldi	r20, 0x01	; 1
    1d98:	0e 94 85 06 	call	0xd0a	; 0xd0a <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_COLUMNS_PORT, KPD_COLUMN2_PIN, DIO_PIN_OUTPUT);
    1d9c:	80 e0       	ldi	r24, 0x00	; 0
    1d9e:	61 e0       	ldi	r22, 0x01	; 1
    1da0:	41 e0       	ldi	r20, 0x01	; 1
    1da2:	0e 94 85 06 	call	0xd0a	; 0xd0a <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_COLUMNS_PORT, KPD_COLUMN3_PIN, DIO_PIN_OUTPUT);
    1da6:	80 e0       	ldi	r24, 0x00	; 0
    1da8:	60 e0       	ldi	r22, 0x00	; 0
    1daa:	41 e0       	ldi	r20, 0x01	; 1
    1dac:	0e 94 85 06 	call	0xd0a	; 0xd0a <DIO_u8SetPinDirection>

	/* Set the columns pins to be high */
	DIO_u8SetPinValue(KPD_COLUMNS_PORT, KPD_COLUMN0_PIN, DIO_PIN_HIGH);
    1db0:	80 e0       	ldi	r24, 0x00	; 0
    1db2:	63 e0       	ldi	r22, 0x03	; 3
    1db4:	41 e0       	ldi	r20, 0x01	; 1
    1db6:	0e 94 97 07 	call	0xf2e	; 0xf2e <DIO_u8SetPinValue>
	DIO_u8SetPinValue(KPD_COLUMNS_PORT, KPD_COLUMN1_PIN, DIO_PIN_HIGH);
    1dba:	80 e0       	ldi	r24, 0x00	; 0
    1dbc:	62 e0       	ldi	r22, 0x02	; 2
    1dbe:	41 e0       	ldi	r20, 0x01	; 1
    1dc0:	0e 94 97 07 	call	0xf2e	; 0xf2e <DIO_u8SetPinValue>
	DIO_u8SetPinValue(KPD_COLUMNS_PORT, KPD_COLUMN2_PIN, DIO_PIN_HIGH);
    1dc4:	80 e0       	ldi	r24, 0x00	; 0
    1dc6:	61 e0       	ldi	r22, 0x01	; 1
    1dc8:	41 e0       	ldi	r20, 0x01	; 1
    1dca:	0e 94 97 07 	call	0xf2e	; 0xf2e <DIO_u8SetPinValue>
	DIO_u8SetPinValue(KPD_COLUMNS_PORT, KPD_COLUMN3_PIN, DIO_PIN_HIGH);
    1dce:	80 e0       	ldi	r24, 0x00	; 0
    1dd0:	60 e0       	ldi	r22, 0x00	; 0
    1dd2:	41 e0       	ldi	r20, 0x01	; 1
    1dd4:	0e 94 97 07 	call	0xf2e	; 0xf2e <DIO_u8SetPinValue>

	/* Set the rows pins to be input */
	DIO_u8SetPinDirection(KPD_ROWS_PORT, KPD_ROW0_PIN, DIO_PIN_INPUT);
    1dd8:	80 e0       	ldi	r24, 0x00	; 0
    1dda:	64 e0       	ldi	r22, 0x04	; 4
    1ddc:	40 e0       	ldi	r20, 0x00	; 0
    1dde:	0e 94 85 06 	call	0xd0a	; 0xd0a <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_ROWS_PORT, KPD_ROW1_PIN, DIO_PIN_INPUT);
    1de2:	80 e0       	ldi	r24, 0x00	; 0
    1de4:	65 e0       	ldi	r22, 0x05	; 5
    1de6:	40 e0       	ldi	r20, 0x00	; 0
    1de8:	0e 94 85 06 	call	0xd0a	; 0xd0a <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_ROWS_PORT, KPD_ROW2_PIN, DIO_PIN_INPUT);
    1dec:	80 e0       	ldi	r24, 0x00	; 0
    1dee:	66 e0       	ldi	r22, 0x06	; 6
    1df0:	40 e0       	ldi	r20, 0x00	; 0
    1df2:	0e 94 85 06 	call	0xd0a	; 0xd0a <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_ROWS_PORT, KPD_ROW3_PIN, DIO_PIN_INPUT);
    1df6:	80 e0       	ldi	r24, 0x00	; 0
    1df8:	67 e0       	ldi	r22, 0x07	; 7
    1dfa:	40 e0       	ldi	r20, 0x00	; 0
    1dfc:	0e 94 85 06 	call	0xd0a	; 0xd0a <DIO_u8SetPinDirection>

	/* Set the rows pins to be pulled up */
	DIO_u8SetPinValue(KPD_ROWS_PORT, KPD_ROW0_PIN, DIO_PULLUP);
    1e00:	80 e0       	ldi	r24, 0x00	; 0
    1e02:	64 e0       	ldi	r22, 0x04	; 4
    1e04:	41 e0       	ldi	r20, 0x01	; 1
    1e06:	0e 94 97 07 	call	0xf2e	; 0xf2e <DIO_u8SetPinValue>
	DIO_u8SetPinValue(KPD_ROWS_PORT, KPD_ROW1_PIN, DIO_PULLUP);
    1e0a:	80 e0       	ldi	r24, 0x00	; 0
    1e0c:	65 e0       	ldi	r22, 0x05	; 5
    1e0e:	41 e0       	ldi	r20, 0x01	; 1
    1e10:	0e 94 97 07 	call	0xf2e	; 0xf2e <DIO_u8SetPinValue>
	DIO_u8SetPinValue(KPD_ROWS_PORT, KPD_ROW2_PIN, DIO_PULLUP);
    1e14:	80 e0       	ldi	r24, 0x00	; 0
    1e16:	66 e0       	ldi	r22, 0x06	; 6
    1e18:	41 e0       	ldi	r20, 0x01	; 1
    1e1a:	0e 94 97 07 	call	0xf2e	; 0xf2e <DIO_u8SetPinValue>
	DIO_u8SetPinValue(KPD_ROWS_PORT, KPD_ROW3_PIN, DIO_PULLUP);
    1e1e:	80 e0       	ldi	r24, 0x00	; 0
    1e20:	67 e0       	ldi	r22, 0x07	; 7
    1e22:	41 e0       	ldi	r20, 0x01	; 1
    1e24:	0e 94 97 07 	call	0xf2e	; 0xf2e <DIO_u8SetPinValue>
}
    1e28:	cf 91       	pop	r28
    1e2a:	df 91       	pop	r29
    1e2c:	08 95       	ret

00001e2e <KPD_u8GetPressedKey>:

u8 KPD_u8GetPressedKey(void)
{
    1e2e:	df 93       	push	r29
    1e30:	cf 93       	push	r28
    1e32:	cd b7       	in	r28, 0x3d	; 61
    1e34:	de b7       	in	r29, 0x3e	; 62
    1e36:	a2 97       	sbiw	r28, 0x22	; 34
    1e38:	0f b6       	in	r0, 0x3f	; 63
    1e3a:	f8 94       	cli
    1e3c:	de bf       	out	0x3e, r29	; 62
    1e3e:	0f be       	out	0x3f, r0	; 63
    1e40:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8ColumnsIndex, Local_u8RowsIndex, Local_u8PinState, Local_u8PressedKey = KPD_NO_PRESSED_KEY;
    1e42:	8a ea       	ldi	r24, 0xAA	; 170
    1e44:	89 83       	std	Y+1, r24	; 0x01
	u8 Local_u8ColumnsArray[4] = {KPD_COLUMN0_PIN, KPD_COLUMN1_PIN, KPD_COLUMN2_PIN, KPD_COLUMN3_PIN};
    1e46:	83 e0       	ldi	r24, 0x03	; 3
    1e48:	8d 83       	std	Y+5, r24	; 0x05
    1e4a:	82 e0       	ldi	r24, 0x02	; 2
    1e4c:	8e 83       	std	Y+6, r24	; 0x06
    1e4e:	81 e0       	ldi	r24, 0x01	; 1
    1e50:	8f 83       	std	Y+7, r24	; 0x07
    1e52:	18 86       	std	Y+8, r1	; 0x08
	u8 Local_u8RowsArray[4] = {KPD_ROW0_PIN, KPD_ROW1_PIN, KPD_ROW2_PIN, KPD_ROW3_PIN};
    1e54:	84 e0       	ldi	r24, 0x04	; 4
    1e56:	89 87       	std	Y+9, r24	; 0x09
    1e58:	85 e0       	ldi	r24, 0x05	; 5
    1e5a:	8a 87       	std	Y+10, r24	; 0x0a
    1e5c:	86 e0       	ldi	r24, 0x06	; 6
    1e5e:	8b 87       	std	Y+11, r24	; 0x0b
    1e60:	87 e0       	ldi	r24, 0x07	; 7
    1e62:	8c 87       	std	Y+12, r24	; 0x0c
	u8 Local_u8KeysArray[4][4] = KPD_KEYS_ARRAYS_VALUES;
    1e64:	ce 01       	movw	r24, r28
    1e66:	0d 96       	adiw	r24, 0x0d	; 13
    1e68:	9f 8f       	std	Y+31, r25	; 0x1f
    1e6a:	8e 8f       	std	Y+30, r24	; 0x1e
    1e6c:	e2 e7       	ldi	r30, 0x72	; 114
    1e6e:	f0 e0       	ldi	r31, 0x00	; 0
    1e70:	f9 a3       	std	Y+33, r31	; 0x21
    1e72:	e8 a3       	std	Y+32, r30	; 0x20
    1e74:	f0 e1       	ldi	r31, 0x10	; 16
    1e76:	fa a3       	std	Y+34, r31	; 0x22
    1e78:	e8 a1       	ldd	r30, Y+32	; 0x20
    1e7a:	f9 a1       	ldd	r31, Y+33	; 0x21
    1e7c:	00 80       	ld	r0, Z
    1e7e:	88 a1       	ldd	r24, Y+32	; 0x20
    1e80:	99 a1       	ldd	r25, Y+33	; 0x21
    1e82:	01 96       	adiw	r24, 0x01	; 1
    1e84:	99 a3       	std	Y+33, r25	; 0x21
    1e86:	88 a3       	std	Y+32, r24	; 0x20
    1e88:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1e8a:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1e8c:	00 82       	st	Z, r0
    1e8e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1e90:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1e92:	01 96       	adiw	r24, 0x01	; 1
    1e94:	9f 8f       	std	Y+31, r25	; 0x1f
    1e96:	8e 8f       	std	Y+30, r24	; 0x1e
    1e98:	9a a1       	ldd	r25, Y+34	; 0x22
    1e9a:	91 50       	subi	r25, 0x01	; 1
    1e9c:	9a a3       	std	Y+34, r25	; 0x22
    1e9e:	ea a1       	ldd	r30, Y+34	; 0x22
    1ea0:	ee 23       	and	r30, r30
    1ea2:	51 f7       	brne	.-44     	; 0x1e78 <KPD_u8GetPressedKey+0x4a>

	/* Loop for columns */
	for (Local_u8ColumnsIndex = 0; Local_u8ColumnsIndex < 4; Local_u8ColumnsIndex++)
    1ea4:	1b 82       	std	Y+3, r1	; 0x03
    1ea6:	68 c0       	rjmp	.+208    	; 0x1f78 <KPD_u8GetPressedKey+0x14a>
	{
		/* Activate Current Column */
		DIO_u8SetPinValue(KPD_COLUMNS_PORT, Local_u8ColumnsArray[Local_u8ColumnsIndex], DIO_PIN_LOW);
    1ea8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eaa:	28 2f       	mov	r18, r24
    1eac:	30 e0       	ldi	r19, 0x00	; 0
    1eae:	ce 01       	movw	r24, r28
    1eb0:	05 96       	adiw	r24, 0x05	; 5
    1eb2:	fc 01       	movw	r30, r24
    1eb4:	e2 0f       	add	r30, r18
    1eb6:	f3 1f       	adc	r31, r19
    1eb8:	90 81       	ld	r25, Z
    1eba:	80 e0       	ldi	r24, 0x00	; 0
    1ebc:	69 2f       	mov	r22, r25
    1ebe:	40 e0       	ldi	r20, 0x00	; 0
    1ec0:	0e 94 97 07 	call	0xf2e	; 0xf2e <DIO_u8SetPinValue>

		/* Loops for rows */
		for(Local_u8RowsIndex = 0; Local_u8RowsIndex < 4; Local_u8RowsIndex++)
    1ec4:	1a 82       	std	Y+2, r1	; 0x02
    1ec6:	43 c0       	rjmp	.+134    	; 0x1f4e <KPD_u8GetPressedKey+0x120>
		{
			DIO_u8GetPinValue(KPD_ROWS_PORT, Local_u8RowsArray[Local_u8RowsIndex], &Local_u8PinState);
    1ec8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eca:	28 2f       	mov	r18, r24
    1ecc:	30 e0       	ldi	r19, 0x00	; 0
    1ece:	ce 01       	movw	r24, r28
    1ed0:	09 96       	adiw	r24, 0x09	; 9
    1ed2:	fc 01       	movw	r30, r24
    1ed4:	e2 0f       	add	r30, r18
    1ed6:	f3 1f       	adc	r31, r19
    1ed8:	90 81       	ld	r25, Z
    1eda:	9e 01       	movw	r18, r28
    1edc:	2c 5f       	subi	r18, 0xFC	; 252
    1ede:	3f 4f       	sbci	r19, 0xFF	; 255
    1ee0:	80 e0       	ldi	r24, 0x00	; 0
    1ee2:	69 2f       	mov	r22, r25
    1ee4:	a9 01       	movw	r20, r18
    1ee6:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_u8GetPinValue>
			if(Local_u8PinState == 0)
    1eea:	8c 81       	ldd	r24, Y+4	; 0x04
    1eec:	88 23       	and	r24, r24
    1eee:	61 f5       	brne	.+88     	; 0x1f48 <KPD_u8GetPressedKey+0x11a>
			{
				/* Get the pressed Key */
				Local_u8PressedKey = Local_u8KeysArray[Local_u8RowsIndex][Local_u8ColumnsIndex];
    1ef0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef2:	28 2f       	mov	r18, r24
    1ef4:	30 e0       	ldi	r19, 0x00	; 0
    1ef6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef8:	48 2f       	mov	r20, r24
    1efa:	50 e0       	ldi	r21, 0x00	; 0
    1efc:	22 0f       	add	r18, r18
    1efe:	33 1f       	adc	r19, r19
    1f00:	22 0f       	add	r18, r18
    1f02:	33 1f       	adc	r19, r19
    1f04:	ce 01       	movw	r24, r28
    1f06:	01 96       	adiw	r24, 0x01	; 1
    1f08:	82 0f       	add	r24, r18
    1f0a:	93 1f       	adc	r25, r19
    1f0c:	84 0f       	add	r24, r20
    1f0e:	95 1f       	adc	r25, r21
    1f10:	fc 01       	movw	r30, r24
    1f12:	3c 96       	adiw	r30, 0x0c	; 12
    1f14:	80 81       	ld	r24, Z
    1f16:	89 83       	std	Y+1, r24	; 0x01
    1f18:	11 c0       	rjmp	.+34     	; 0x1f3c <KPD_u8GetPressedKey+0x10e>
				/* Polling (Busy Waiting), Wait until the pressed key is released */
				while(Local_u8PinState == 0)
				{
					DIO_u8GetPinValue(KPD_ROWS_PORT, Local_u8RowsArray[Local_u8RowsIndex], &Local_u8PinState);
    1f1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f1c:	28 2f       	mov	r18, r24
    1f1e:	30 e0       	ldi	r19, 0x00	; 0
    1f20:	ce 01       	movw	r24, r28
    1f22:	09 96       	adiw	r24, 0x09	; 9
    1f24:	fc 01       	movw	r30, r24
    1f26:	e2 0f       	add	r30, r18
    1f28:	f3 1f       	adc	r31, r19
    1f2a:	90 81       	ld	r25, Z
    1f2c:	9e 01       	movw	r18, r28
    1f2e:	2c 5f       	subi	r18, 0xFC	; 252
    1f30:	3f 4f       	sbci	r19, 0xFF	; 255
    1f32:	80 e0       	ldi	r24, 0x00	; 0
    1f34:	69 2f       	mov	r22, r25
    1f36:	a9 01       	movw	r20, r18
    1f38:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_u8GetPinValue>
			if(Local_u8PinState == 0)
			{
				/* Get the pressed Key */
				Local_u8PressedKey = Local_u8KeysArray[Local_u8RowsIndex][Local_u8ColumnsIndex];
				/* Polling (Busy Waiting), Wait until the pressed key is released */
				while(Local_u8PinState == 0)
    1f3c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f3e:	88 23       	and	r24, r24
    1f40:	61 f3       	breq	.-40     	; 0x1f1a <KPD_u8GetPressedKey+0xec>
				{
					DIO_u8GetPinValue(KPD_ROWS_PORT, Local_u8RowsArray[Local_u8RowsIndex], &Local_u8PinState);
				}
				return Local_u8PressedKey;
    1f42:	f9 81       	ldd	r31, Y+1	; 0x01
    1f44:	fd 8f       	std	Y+29, r31	; 0x1d
    1f46:	1e c0       	rjmp	.+60     	; 0x1f84 <KPD_u8GetPressedKey+0x156>
	{
		/* Activate Current Column */
		DIO_u8SetPinValue(KPD_COLUMNS_PORT, Local_u8ColumnsArray[Local_u8ColumnsIndex], DIO_PIN_LOW);

		/* Loops for rows */
		for(Local_u8RowsIndex = 0; Local_u8RowsIndex < 4; Local_u8RowsIndex++)
    1f48:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4a:	8f 5f       	subi	r24, 0xFF	; 255
    1f4c:	8a 83       	std	Y+2, r24	; 0x02
    1f4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f50:	84 30       	cpi	r24, 0x04	; 4
    1f52:	08 f4       	brcc	.+2      	; 0x1f56 <KPD_u8GetPressedKey+0x128>
    1f54:	b9 cf       	rjmp	.-142    	; 0x1ec8 <KPD_u8GetPressedKey+0x9a>
				}
				return Local_u8PressedKey;
			}
		}
		/* Deactivate Current Column */
		DIO_u8SetPinValue(KPD_COLUMNS_PORT, Local_u8ColumnsArray[Local_u8ColumnsIndex], DIO_PIN_HIGH);
    1f56:	8b 81       	ldd	r24, Y+3	; 0x03
    1f58:	28 2f       	mov	r18, r24
    1f5a:	30 e0       	ldi	r19, 0x00	; 0
    1f5c:	ce 01       	movw	r24, r28
    1f5e:	05 96       	adiw	r24, 0x05	; 5
    1f60:	fc 01       	movw	r30, r24
    1f62:	e2 0f       	add	r30, r18
    1f64:	f3 1f       	adc	r31, r19
    1f66:	90 81       	ld	r25, Z
    1f68:	80 e0       	ldi	r24, 0x00	; 0
    1f6a:	69 2f       	mov	r22, r25
    1f6c:	41 e0       	ldi	r20, 0x01	; 1
    1f6e:	0e 94 97 07 	call	0xf2e	; 0xf2e <DIO_u8SetPinValue>
	u8 Local_u8ColumnsArray[4] = {KPD_COLUMN0_PIN, KPD_COLUMN1_PIN, KPD_COLUMN2_PIN, KPD_COLUMN3_PIN};
	u8 Local_u8RowsArray[4] = {KPD_ROW0_PIN, KPD_ROW1_PIN, KPD_ROW2_PIN, KPD_ROW3_PIN};
	u8 Local_u8KeysArray[4][4] = KPD_KEYS_ARRAYS_VALUES;

	/* Loop for columns */
	for (Local_u8ColumnsIndex = 0; Local_u8ColumnsIndex < 4; Local_u8ColumnsIndex++)
    1f72:	8b 81       	ldd	r24, Y+3	; 0x03
    1f74:	8f 5f       	subi	r24, 0xFF	; 255
    1f76:	8b 83       	std	Y+3, r24	; 0x03
    1f78:	8b 81       	ldd	r24, Y+3	; 0x03
    1f7a:	84 30       	cpi	r24, 0x04	; 4
    1f7c:	08 f4       	brcc	.+2      	; 0x1f80 <KPD_u8GetPressedKey+0x152>
    1f7e:	94 cf       	rjmp	.-216    	; 0x1ea8 <KPD_u8GetPressedKey+0x7a>
			}
		}
		/* Deactivate Current Column */
		DIO_u8SetPinValue(KPD_COLUMNS_PORT, Local_u8ColumnsArray[Local_u8ColumnsIndex], DIO_PIN_HIGH);
	}
	return Local_u8PressedKey;
    1f80:	89 81       	ldd	r24, Y+1	; 0x01
    1f82:	8d 8f       	std	Y+29, r24	; 0x1d
    1f84:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    1f86:	a2 96       	adiw	r28, 0x22	; 34
    1f88:	0f b6       	in	r0, 0x3f	; 63
    1f8a:	f8 94       	cli
    1f8c:	de bf       	out	0x3e, r29	; 62
    1f8e:	0f be       	out	0x3f, r0	; 63
    1f90:	cd bf       	out	0x3d, r28	; 61
    1f92:	cf 91       	pop	r28
    1f94:	df 91       	pop	r29
    1f96:	08 95       	ret

00001f98 <main>:
#include "../LIB/BIT_MATH.h"
#include "../MCAL/DIO/DIO_interface.h"
#include "../HAL/Motor/MOTOR_interface.h"

void main (void)
{
    1f98:	df 93       	push	r29
    1f9a:	cf 93       	push	r28
    1f9c:	cd b7       	in	r28, 0x3d	; 61
    1f9e:	de b7       	in	r29, 0x3e	; 62
    1fa0:	e8 97       	sbiw	r28, 0x38	; 56
    1fa2:	0f b6       	in	r0, 0x3f	; 63
    1fa4:	f8 94       	cli
    1fa6:	de bf       	out	0x3e, r29	; 62
    1fa8:	0f be       	out	0x3f, r0	; 63
    1faa:	cd bf       	out	0x3d, r28	; 61
	MOTOR_voidInitialize();
    1fac:	0e 94 ff 09 	call	0x13fe	; 0x13fe <MOTOR_voidInitialize>
	while (1)
	{
		MOTOR_voidClockWise();
    1fb0:	0e 94 21 0a 	call	0x1442	; 0x1442 <MOTOR_voidClockWise>
    1fb4:	80 e0       	ldi	r24, 0x00	; 0
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	aa ef       	ldi	r26, 0xFA	; 250
    1fba:	b4 e4       	ldi	r27, 0x44	; 68
    1fbc:	8d ab       	std	Y+53, r24	; 0x35
    1fbe:	9e ab       	std	Y+54, r25	; 0x36
    1fc0:	af ab       	std	Y+55, r26	; 0x37
    1fc2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fc4:	6d a9       	ldd	r22, Y+53	; 0x35
    1fc6:	7e a9       	ldd	r23, Y+54	; 0x36
    1fc8:	8f a9       	ldd	r24, Y+55	; 0x37
    1fca:	98 ad       	ldd	r25, Y+56	; 0x38
    1fcc:	20 e0       	ldi	r18, 0x00	; 0
    1fce:	30 e0       	ldi	r19, 0x00	; 0
    1fd0:	4a ef       	ldi	r20, 0xFA	; 250
    1fd2:	54 e4       	ldi	r21, 0x44	; 68
    1fd4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fd8:	dc 01       	movw	r26, r24
    1fda:	cb 01       	movw	r24, r22
    1fdc:	89 ab       	std	Y+49, r24	; 0x31
    1fde:	9a ab       	std	Y+50, r25	; 0x32
    1fe0:	ab ab       	std	Y+51, r26	; 0x33
    1fe2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1fe4:	69 a9       	ldd	r22, Y+49	; 0x31
    1fe6:	7a a9       	ldd	r23, Y+50	; 0x32
    1fe8:	8b a9       	ldd	r24, Y+51	; 0x33
    1fea:	9c a9       	ldd	r25, Y+52	; 0x34
    1fec:	20 e0       	ldi	r18, 0x00	; 0
    1fee:	30 e0       	ldi	r19, 0x00	; 0
    1ff0:	40 e8       	ldi	r20, 0x80	; 128
    1ff2:	5f e3       	ldi	r21, 0x3F	; 63
    1ff4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1ff8:	88 23       	and	r24, r24
    1ffa:	2c f4       	brge	.+10     	; 0x2006 <main+0x6e>
		__ticks = 1;
    1ffc:	81 e0       	ldi	r24, 0x01	; 1
    1ffe:	90 e0       	ldi	r25, 0x00	; 0
    2000:	98 ab       	std	Y+48, r25	; 0x30
    2002:	8f a7       	std	Y+47, r24	; 0x2f
    2004:	3f c0       	rjmp	.+126    	; 0x2084 <main+0xec>
	else if (__tmp > 65535)
    2006:	69 a9       	ldd	r22, Y+49	; 0x31
    2008:	7a a9       	ldd	r23, Y+50	; 0x32
    200a:	8b a9       	ldd	r24, Y+51	; 0x33
    200c:	9c a9       	ldd	r25, Y+52	; 0x34
    200e:	20 e0       	ldi	r18, 0x00	; 0
    2010:	3f ef       	ldi	r19, 0xFF	; 255
    2012:	4f e7       	ldi	r20, 0x7F	; 127
    2014:	57 e4       	ldi	r21, 0x47	; 71
    2016:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    201a:	18 16       	cp	r1, r24
    201c:	4c f5       	brge	.+82     	; 0x2070 <main+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    201e:	6d a9       	ldd	r22, Y+53	; 0x35
    2020:	7e a9       	ldd	r23, Y+54	; 0x36
    2022:	8f a9       	ldd	r24, Y+55	; 0x37
    2024:	98 ad       	ldd	r25, Y+56	; 0x38
    2026:	20 e0       	ldi	r18, 0x00	; 0
    2028:	30 e0       	ldi	r19, 0x00	; 0
    202a:	40 e2       	ldi	r20, 0x20	; 32
    202c:	51 e4       	ldi	r21, 0x41	; 65
    202e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2032:	dc 01       	movw	r26, r24
    2034:	cb 01       	movw	r24, r22
    2036:	bc 01       	movw	r22, r24
    2038:	cd 01       	movw	r24, r26
    203a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    203e:	dc 01       	movw	r26, r24
    2040:	cb 01       	movw	r24, r22
    2042:	98 ab       	std	Y+48, r25	; 0x30
    2044:	8f a7       	std	Y+47, r24	; 0x2f
    2046:	0f c0       	rjmp	.+30     	; 0x2066 <main+0xce>
    2048:	88 ec       	ldi	r24, 0xC8	; 200
    204a:	90 e0       	ldi	r25, 0x00	; 0
    204c:	9e a7       	std	Y+46, r25	; 0x2e
    204e:	8d a7       	std	Y+45, r24	; 0x2d
    2050:	8d a5       	ldd	r24, Y+45	; 0x2d
    2052:	9e a5       	ldd	r25, Y+46	; 0x2e
    2054:	01 97       	sbiw	r24, 0x01	; 1
    2056:	f1 f7       	brne	.-4      	; 0x2054 <main+0xbc>
    2058:	9e a7       	std	Y+46, r25	; 0x2e
    205a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    205c:	8f a5       	ldd	r24, Y+47	; 0x2f
    205e:	98 a9       	ldd	r25, Y+48	; 0x30
    2060:	01 97       	sbiw	r24, 0x01	; 1
    2062:	98 ab       	std	Y+48, r25	; 0x30
    2064:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2066:	8f a5       	ldd	r24, Y+47	; 0x2f
    2068:	98 a9       	ldd	r25, Y+48	; 0x30
    206a:	00 97       	sbiw	r24, 0x00	; 0
    206c:	69 f7       	brne	.-38     	; 0x2048 <main+0xb0>
    206e:	14 c0       	rjmp	.+40     	; 0x2098 <main+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2070:	69 a9       	ldd	r22, Y+49	; 0x31
    2072:	7a a9       	ldd	r23, Y+50	; 0x32
    2074:	8b a9       	ldd	r24, Y+51	; 0x33
    2076:	9c a9       	ldd	r25, Y+52	; 0x34
    2078:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    207c:	dc 01       	movw	r26, r24
    207e:	cb 01       	movw	r24, r22
    2080:	98 ab       	std	Y+48, r25	; 0x30
    2082:	8f a7       	std	Y+47, r24	; 0x2f
    2084:	8f a5       	ldd	r24, Y+47	; 0x2f
    2086:	98 a9       	ldd	r25, Y+48	; 0x30
    2088:	9c a7       	std	Y+44, r25	; 0x2c
    208a:	8b a7       	std	Y+43, r24	; 0x2b
    208c:	8b a5       	ldd	r24, Y+43	; 0x2b
    208e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2090:	01 97       	sbiw	r24, 0x01	; 1
    2092:	f1 f7       	brne	.-4      	; 0x2090 <main+0xf8>
    2094:	9c a7       	std	Y+44, r25	; 0x2c
    2096:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(2000);
		MOTOR_voidStop();
    2098:	0e 94 32 0a 	call	0x1464	; 0x1464 <MOTOR_voidStop>
    209c:	80 e0       	ldi	r24, 0x00	; 0
    209e:	90 e0       	ldi	r25, 0x00	; 0
    20a0:	aa e7       	ldi	r26, 0x7A	; 122
    20a2:	b4 e4       	ldi	r27, 0x44	; 68
    20a4:	8f a3       	std	Y+39, r24	; 0x27
    20a6:	98 a7       	std	Y+40, r25	; 0x28
    20a8:	a9 a7       	std	Y+41, r26	; 0x29
    20aa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20ac:	6f a1       	ldd	r22, Y+39	; 0x27
    20ae:	78 a5       	ldd	r23, Y+40	; 0x28
    20b0:	89 a5       	ldd	r24, Y+41	; 0x29
    20b2:	9a a5       	ldd	r25, Y+42	; 0x2a
    20b4:	20 e0       	ldi	r18, 0x00	; 0
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	4a ef       	ldi	r20, 0xFA	; 250
    20ba:	54 e4       	ldi	r21, 0x44	; 68
    20bc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20c0:	dc 01       	movw	r26, r24
    20c2:	cb 01       	movw	r24, r22
    20c4:	8b a3       	std	Y+35, r24	; 0x23
    20c6:	9c a3       	std	Y+36, r25	; 0x24
    20c8:	ad a3       	std	Y+37, r26	; 0x25
    20ca:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    20cc:	6b a1       	ldd	r22, Y+35	; 0x23
    20ce:	7c a1       	ldd	r23, Y+36	; 0x24
    20d0:	8d a1       	ldd	r24, Y+37	; 0x25
    20d2:	9e a1       	ldd	r25, Y+38	; 0x26
    20d4:	20 e0       	ldi	r18, 0x00	; 0
    20d6:	30 e0       	ldi	r19, 0x00	; 0
    20d8:	40 e8       	ldi	r20, 0x80	; 128
    20da:	5f e3       	ldi	r21, 0x3F	; 63
    20dc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    20e0:	88 23       	and	r24, r24
    20e2:	2c f4       	brge	.+10     	; 0x20ee <main+0x156>
		__ticks = 1;
    20e4:	81 e0       	ldi	r24, 0x01	; 1
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	9a a3       	std	Y+34, r25	; 0x22
    20ea:	89 a3       	std	Y+33, r24	; 0x21
    20ec:	3f c0       	rjmp	.+126    	; 0x216c <main+0x1d4>
	else if (__tmp > 65535)
    20ee:	6b a1       	ldd	r22, Y+35	; 0x23
    20f0:	7c a1       	ldd	r23, Y+36	; 0x24
    20f2:	8d a1       	ldd	r24, Y+37	; 0x25
    20f4:	9e a1       	ldd	r25, Y+38	; 0x26
    20f6:	20 e0       	ldi	r18, 0x00	; 0
    20f8:	3f ef       	ldi	r19, 0xFF	; 255
    20fa:	4f e7       	ldi	r20, 0x7F	; 127
    20fc:	57 e4       	ldi	r21, 0x47	; 71
    20fe:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2102:	18 16       	cp	r1, r24
    2104:	4c f5       	brge	.+82     	; 0x2158 <main+0x1c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2106:	6f a1       	ldd	r22, Y+39	; 0x27
    2108:	78 a5       	ldd	r23, Y+40	; 0x28
    210a:	89 a5       	ldd	r24, Y+41	; 0x29
    210c:	9a a5       	ldd	r25, Y+42	; 0x2a
    210e:	20 e0       	ldi	r18, 0x00	; 0
    2110:	30 e0       	ldi	r19, 0x00	; 0
    2112:	40 e2       	ldi	r20, 0x20	; 32
    2114:	51 e4       	ldi	r21, 0x41	; 65
    2116:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    211a:	dc 01       	movw	r26, r24
    211c:	cb 01       	movw	r24, r22
    211e:	bc 01       	movw	r22, r24
    2120:	cd 01       	movw	r24, r26
    2122:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2126:	dc 01       	movw	r26, r24
    2128:	cb 01       	movw	r24, r22
    212a:	9a a3       	std	Y+34, r25	; 0x22
    212c:	89 a3       	std	Y+33, r24	; 0x21
    212e:	0f c0       	rjmp	.+30     	; 0x214e <main+0x1b6>
    2130:	88 ec       	ldi	r24, 0xC8	; 200
    2132:	90 e0       	ldi	r25, 0x00	; 0
    2134:	98 a3       	std	Y+32, r25	; 0x20
    2136:	8f 8f       	std	Y+31, r24	; 0x1f
    2138:	8f 8d       	ldd	r24, Y+31	; 0x1f
    213a:	98 a1       	ldd	r25, Y+32	; 0x20
    213c:	01 97       	sbiw	r24, 0x01	; 1
    213e:	f1 f7       	brne	.-4      	; 0x213c <main+0x1a4>
    2140:	98 a3       	std	Y+32, r25	; 0x20
    2142:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2144:	89 a1       	ldd	r24, Y+33	; 0x21
    2146:	9a a1       	ldd	r25, Y+34	; 0x22
    2148:	01 97       	sbiw	r24, 0x01	; 1
    214a:	9a a3       	std	Y+34, r25	; 0x22
    214c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    214e:	89 a1       	ldd	r24, Y+33	; 0x21
    2150:	9a a1       	ldd	r25, Y+34	; 0x22
    2152:	00 97       	sbiw	r24, 0x00	; 0
    2154:	69 f7       	brne	.-38     	; 0x2130 <main+0x198>
    2156:	14 c0       	rjmp	.+40     	; 0x2180 <main+0x1e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2158:	6b a1       	ldd	r22, Y+35	; 0x23
    215a:	7c a1       	ldd	r23, Y+36	; 0x24
    215c:	8d a1       	ldd	r24, Y+37	; 0x25
    215e:	9e a1       	ldd	r25, Y+38	; 0x26
    2160:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2164:	dc 01       	movw	r26, r24
    2166:	cb 01       	movw	r24, r22
    2168:	9a a3       	std	Y+34, r25	; 0x22
    216a:	89 a3       	std	Y+33, r24	; 0x21
    216c:	89 a1       	ldd	r24, Y+33	; 0x21
    216e:	9a a1       	ldd	r25, Y+34	; 0x22
    2170:	9e 8f       	std	Y+30, r25	; 0x1e
    2172:	8d 8f       	std	Y+29, r24	; 0x1d
    2174:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2176:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2178:	01 97       	sbiw	r24, 0x01	; 1
    217a:	f1 f7       	brne	.-4      	; 0x2178 <main+0x1e0>
    217c:	9e 8f       	std	Y+30, r25	; 0x1e
    217e:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1000);
		MOTOR_voidCounterClockWise();
    2180:	0e 94 10 0a 	call	0x1420	; 0x1420 <MOTOR_voidCounterClockWise>
    2184:	80 e0       	ldi	r24, 0x00	; 0
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	aa ef       	ldi	r26, 0xFA	; 250
    218a:	b4 e4       	ldi	r27, 0x44	; 68
    218c:	89 8f       	std	Y+25, r24	; 0x19
    218e:	9a 8f       	std	Y+26, r25	; 0x1a
    2190:	ab 8f       	std	Y+27, r26	; 0x1b
    2192:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2194:	69 8d       	ldd	r22, Y+25	; 0x19
    2196:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2198:	8b 8d       	ldd	r24, Y+27	; 0x1b
    219a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    219c:	20 e0       	ldi	r18, 0x00	; 0
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	4a ef       	ldi	r20, 0xFA	; 250
    21a2:	54 e4       	ldi	r21, 0x44	; 68
    21a4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21a8:	dc 01       	movw	r26, r24
    21aa:	cb 01       	movw	r24, r22
    21ac:	8d 8b       	std	Y+21, r24	; 0x15
    21ae:	9e 8b       	std	Y+22, r25	; 0x16
    21b0:	af 8b       	std	Y+23, r26	; 0x17
    21b2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    21b4:	6d 89       	ldd	r22, Y+21	; 0x15
    21b6:	7e 89       	ldd	r23, Y+22	; 0x16
    21b8:	8f 89       	ldd	r24, Y+23	; 0x17
    21ba:	98 8d       	ldd	r25, Y+24	; 0x18
    21bc:	20 e0       	ldi	r18, 0x00	; 0
    21be:	30 e0       	ldi	r19, 0x00	; 0
    21c0:	40 e8       	ldi	r20, 0x80	; 128
    21c2:	5f e3       	ldi	r21, 0x3F	; 63
    21c4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    21c8:	88 23       	and	r24, r24
    21ca:	2c f4       	brge	.+10     	; 0x21d6 <main+0x23e>
		__ticks = 1;
    21cc:	81 e0       	ldi	r24, 0x01	; 1
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	9c 8b       	std	Y+20, r25	; 0x14
    21d2:	8b 8b       	std	Y+19, r24	; 0x13
    21d4:	3f c0       	rjmp	.+126    	; 0x2254 <main+0x2bc>
	else if (__tmp > 65535)
    21d6:	6d 89       	ldd	r22, Y+21	; 0x15
    21d8:	7e 89       	ldd	r23, Y+22	; 0x16
    21da:	8f 89       	ldd	r24, Y+23	; 0x17
    21dc:	98 8d       	ldd	r25, Y+24	; 0x18
    21de:	20 e0       	ldi	r18, 0x00	; 0
    21e0:	3f ef       	ldi	r19, 0xFF	; 255
    21e2:	4f e7       	ldi	r20, 0x7F	; 127
    21e4:	57 e4       	ldi	r21, 0x47	; 71
    21e6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    21ea:	18 16       	cp	r1, r24
    21ec:	4c f5       	brge	.+82     	; 0x2240 <main+0x2a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ee:	69 8d       	ldd	r22, Y+25	; 0x19
    21f0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21f6:	20 e0       	ldi	r18, 0x00	; 0
    21f8:	30 e0       	ldi	r19, 0x00	; 0
    21fa:	40 e2       	ldi	r20, 0x20	; 32
    21fc:	51 e4       	ldi	r21, 0x41	; 65
    21fe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2202:	dc 01       	movw	r26, r24
    2204:	cb 01       	movw	r24, r22
    2206:	bc 01       	movw	r22, r24
    2208:	cd 01       	movw	r24, r26
    220a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    220e:	dc 01       	movw	r26, r24
    2210:	cb 01       	movw	r24, r22
    2212:	9c 8b       	std	Y+20, r25	; 0x14
    2214:	8b 8b       	std	Y+19, r24	; 0x13
    2216:	0f c0       	rjmp	.+30     	; 0x2236 <main+0x29e>
    2218:	88 ec       	ldi	r24, 0xC8	; 200
    221a:	90 e0       	ldi	r25, 0x00	; 0
    221c:	9a 8b       	std	Y+18, r25	; 0x12
    221e:	89 8b       	std	Y+17, r24	; 0x11
    2220:	89 89       	ldd	r24, Y+17	; 0x11
    2222:	9a 89       	ldd	r25, Y+18	; 0x12
    2224:	01 97       	sbiw	r24, 0x01	; 1
    2226:	f1 f7       	brne	.-4      	; 0x2224 <main+0x28c>
    2228:	9a 8b       	std	Y+18, r25	; 0x12
    222a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    222c:	8b 89       	ldd	r24, Y+19	; 0x13
    222e:	9c 89       	ldd	r25, Y+20	; 0x14
    2230:	01 97       	sbiw	r24, 0x01	; 1
    2232:	9c 8b       	std	Y+20, r25	; 0x14
    2234:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2236:	8b 89       	ldd	r24, Y+19	; 0x13
    2238:	9c 89       	ldd	r25, Y+20	; 0x14
    223a:	00 97       	sbiw	r24, 0x00	; 0
    223c:	69 f7       	brne	.-38     	; 0x2218 <main+0x280>
    223e:	14 c0       	rjmp	.+40     	; 0x2268 <main+0x2d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2240:	6d 89       	ldd	r22, Y+21	; 0x15
    2242:	7e 89       	ldd	r23, Y+22	; 0x16
    2244:	8f 89       	ldd	r24, Y+23	; 0x17
    2246:	98 8d       	ldd	r25, Y+24	; 0x18
    2248:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    224c:	dc 01       	movw	r26, r24
    224e:	cb 01       	movw	r24, r22
    2250:	9c 8b       	std	Y+20, r25	; 0x14
    2252:	8b 8b       	std	Y+19, r24	; 0x13
    2254:	8b 89       	ldd	r24, Y+19	; 0x13
    2256:	9c 89       	ldd	r25, Y+20	; 0x14
    2258:	98 8b       	std	Y+16, r25	; 0x10
    225a:	8f 87       	std	Y+15, r24	; 0x0f
    225c:	8f 85       	ldd	r24, Y+15	; 0x0f
    225e:	98 89       	ldd	r25, Y+16	; 0x10
    2260:	01 97       	sbiw	r24, 0x01	; 1
    2262:	f1 f7       	brne	.-4      	; 0x2260 <main+0x2c8>
    2264:	98 8b       	std	Y+16, r25	; 0x10
    2266:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(2000);
		MOTOR_voidStop();
    2268:	0e 94 32 0a 	call	0x1464	; 0x1464 <MOTOR_voidStop>
    226c:	80 e0       	ldi	r24, 0x00	; 0
    226e:	90 e0       	ldi	r25, 0x00	; 0
    2270:	aa e7       	ldi	r26, 0x7A	; 122
    2272:	b4 e4       	ldi	r27, 0x44	; 68
    2274:	8b 87       	std	Y+11, r24	; 0x0b
    2276:	9c 87       	std	Y+12, r25	; 0x0c
    2278:	ad 87       	std	Y+13, r26	; 0x0d
    227a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    227c:	6b 85       	ldd	r22, Y+11	; 0x0b
    227e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2280:	8d 85       	ldd	r24, Y+13	; 0x0d
    2282:	9e 85       	ldd	r25, Y+14	; 0x0e
    2284:	20 e0       	ldi	r18, 0x00	; 0
    2286:	30 e0       	ldi	r19, 0x00	; 0
    2288:	4a ef       	ldi	r20, 0xFA	; 250
    228a:	54 e4       	ldi	r21, 0x44	; 68
    228c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2290:	dc 01       	movw	r26, r24
    2292:	cb 01       	movw	r24, r22
    2294:	8f 83       	std	Y+7, r24	; 0x07
    2296:	98 87       	std	Y+8, r25	; 0x08
    2298:	a9 87       	std	Y+9, r26	; 0x09
    229a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    229c:	6f 81       	ldd	r22, Y+7	; 0x07
    229e:	78 85       	ldd	r23, Y+8	; 0x08
    22a0:	89 85       	ldd	r24, Y+9	; 0x09
    22a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    22a4:	20 e0       	ldi	r18, 0x00	; 0
    22a6:	30 e0       	ldi	r19, 0x00	; 0
    22a8:	40 e8       	ldi	r20, 0x80	; 128
    22aa:	5f e3       	ldi	r21, 0x3F	; 63
    22ac:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    22b0:	88 23       	and	r24, r24
    22b2:	2c f4       	brge	.+10     	; 0x22be <main+0x326>
		__ticks = 1;
    22b4:	81 e0       	ldi	r24, 0x01	; 1
    22b6:	90 e0       	ldi	r25, 0x00	; 0
    22b8:	9e 83       	std	Y+6, r25	; 0x06
    22ba:	8d 83       	std	Y+5, r24	; 0x05
    22bc:	3f c0       	rjmp	.+126    	; 0x233c <main+0x3a4>
	else if (__tmp > 65535)
    22be:	6f 81       	ldd	r22, Y+7	; 0x07
    22c0:	78 85       	ldd	r23, Y+8	; 0x08
    22c2:	89 85       	ldd	r24, Y+9	; 0x09
    22c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    22c6:	20 e0       	ldi	r18, 0x00	; 0
    22c8:	3f ef       	ldi	r19, 0xFF	; 255
    22ca:	4f e7       	ldi	r20, 0x7F	; 127
    22cc:	57 e4       	ldi	r21, 0x47	; 71
    22ce:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    22d2:	18 16       	cp	r1, r24
    22d4:	4c f5       	brge	.+82     	; 0x2328 <main+0x390>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    22d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    22da:	8d 85       	ldd	r24, Y+13	; 0x0d
    22dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    22de:	20 e0       	ldi	r18, 0x00	; 0
    22e0:	30 e0       	ldi	r19, 0x00	; 0
    22e2:	40 e2       	ldi	r20, 0x20	; 32
    22e4:	51 e4       	ldi	r21, 0x41	; 65
    22e6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22ea:	dc 01       	movw	r26, r24
    22ec:	cb 01       	movw	r24, r22
    22ee:	bc 01       	movw	r22, r24
    22f0:	cd 01       	movw	r24, r26
    22f2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22f6:	dc 01       	movw	r26, r24
    22f8:	cb 01       	movw	r24, r22
    22fa:	9e 83       	std	Y+6, r25	; 0x06
    22fc:	8d 83       	std	Y+5, r24	; 0x05
    22fe:	0f c0       	rjmp	.+30     	; 0x231e <main+0x386>
    2300:	88 ec       	ldi	r24, 0xC8	; 200
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	9c 83       	std	Y+4, r25	; 0x04
    2306:	8b 83       	std	Y+3, r24	; 0x03
    2308:	8b 81       	ldd	r24, Y+3	; 0x03
    230a:	9c 81       	ldd	r25, Y+4	; 0x04
    230c:	01 97       	sbiw	r24, 0x01	; 1
    230e:	f1 f7       	brne	.-4      	; 0x230c <main+0x374>
    2310:	9c 83       	std	Y+4, r25	; 0x04
    2312:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2314:	8d 81       	ldd	r24, Y+5	; 0x05
    2316:	9e 81       	ldd	r25, Y+6	; 0x06
    2318:	01 97       	sbiw	r24, 0x01	; 1
    231a:	9e 83       	std	Y+6, r25	; 0x06
    231c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    231e:	8d 81       	ldd	r24, Y+5	; 0x05
    2320:	9e 81       	ldd	r25, Y+6	; 0x06
    2322:	00 97       	sbiw	r24, 0x00	; 0
    2324:	69 f7       	brne	.-38     	; 0x2300 <main+0x368>
    2326:	44 ce       	rjmp	.-888    	; 0x1fb0 <main+0x18>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2328:	6f 81       	ldd	r22, Y+7	; 0x07
    232a:	78 85       	ldd	r23, Y+8	; 0x08
    232c:	89 85       	ldd	r24, Y+9	; 0x09
    232e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2330:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2334:	dc 01       	movw	r26, r24
    2336:	cb 01       	movw	r24, r22
    2338:	9e 83       	std	Y+6, r25	; 0x06
    233a:	8d 83       	std	Y+5, r24	; 0x05
    233c:	8d 81       	ldd	r24, Y+5	; 0x05
    233e:	9e 81       	ldd	r25, Y+6	; 0x06
    2340:	9a 83       	std	Y+2, r25	; 0x02
    2342:	89 83       	std	Y+1, r24	; 0x01
    2344:	89 81       	ldd	r24, Y+1	; 0x01
    2346:	9a 81       	ldd	r25, Y+2	; 0x02
    2348:	01 97       	sbiw	r24, 0x01	; 1
    234a:	f1 f7       	brne	.-4      	; 0x2348 <main+0x3b0>
    234c:	9a 83       	std	Y+2, r25	; 0x02
    234e:	89 83       	std	Y+1, r24	; 0x01
    2350:	2f ce       	rjmp	.-930    	; 0x1fb0 <main+0x18>

00002352 <__udivmodhi4>:
    2352:	aa 1b       	sub	r26, r26
    2354:	bb 1b       	sub	r27, r27
    2356:	51 e1       	ldi	r21, 0x11	; 17
    2358:	07 c0       	rjmp	.+14     	; 0x2368 <__udivmodhi4_ep>

0000235a <__udivmodhi4_loop>:
    235a:	aa 1f       	adc	r26, r26
    235c:	bb 1f       	adc	r27, r27
    235e:	a6 17       	cp	r26, r22
    2360:	b7 07       	cpc	r27, r23
    2362:	10 f0       	brcs	.+4      	; 0x2368 <__udivmodhi4_ep>
    2364:	a6 1b       	sub	r26, r22
    2366:	b7 0b       	sbc	r27, r23

00002368 <__udivmodhi4_ep>:
    2368:	88 1f       	adc	r24, r24
    236a:	99 1f       	adc	r25, r25
    236c:	5a 95       	dec	r21
    236e:	a9 f7       	brne	.-22     	; 0x235a <__udivmodhi4_loop>
    2370:	80 95       	com	r24
    2372:	90 95       	com	r25
    2374:	bc 01       	movw	r22, r24
    2376:	cd 01       	movw	r24, r26
    2378:	08 95       	ret

0000237a <__divmodhi4>:
    237a:	97 fb       	bst	r25, 7
    237c:	09 2e       	mov	r0, r25
    237e:	07 26       	eor	r0, r23
    2380:	0a d0       	rcall	.+20     	; 0x2396 <__divmodhi4_neg1>
    2382:	77 fd       	sbrc	r23, 7
    2384:	04 d0       	rcall	.+8      	; 0x238e <__divmodhi4_neg2>
    2386:	e5 df       	rcall	.-54     	; 0x2352 <__udivmodhi4>
    2388:	06 d0       	rcall	.+12     	; 0x2396 <__divmodhi4_neg1>
    238a:	00 20       	and	r0, r0
    238c:	1a f4       	brpl	.+6      	; 0x2394 <__divmodhi4_exit>

0000238e <__divmodhi4_neg2>:
    238e:	70 95       	com	r23
    2390:	61 95       	neg	r22
    2392:	7f 4f       	sbci	r23, 0xFF	; 255

00002394 <__divmodhi4_exit>:
    2394:	08 95       	ret

00002396 <__divmodhi4_neg1>:
    2396:	f6 f7       	brtc	.-4      	; 0x2394 <__divmodhi4_exit>
    2398:	90 95       	com	r25
    239a:	81 95       	neg	r24
    239c:	9f 4f       	sbci	r25, 0xFF	; 255
    239e:	08 95       	ret

000023a0 <__prologue_saves__>:
    23a0:	2f 92       	push	r2
    23a2:	3f 92       	push	r3
    23a4:	4f 92       	push	r4
    23a6:	5f 92       	push	r5
    23a8:	6f 92       	push	r6
    23aa:	7f 92       	push	r7
    23ac:	8f 92       	push	r8
    23ae:	9f 92       	push	r9
    23b0:	af 92       	push	r10
    23b2:	bf 92       	push	r11
    23b4:	cf 92       	push	r12
    23b6:	df 92       	push	r13
    23b8:	ef 92       	push	r14
    23ba:	ff 92       	push	r15
    23bc:	0f 93       	push	r16
    23be:	1f 93       	push	r17
    23c0:	cf 93       	push	r28
    23c2:	df 93       	push	r29
    23c4:	cd b7       	in	r28, 0x3d	; 61
    23c6:	de b7       	in	r29, 0x3e	; 62
    23c8:	ca 1b       	sub	r28, r26
    23ca:	db 0b       	sbc	r29, r27
    23cc:	0f b6       	in	r0, 0x3f	; 63
    23ce:	f8 94       	cli
    23d0:	de bf       	out	0x3e, r29	; 62
    23d2:	0f be       	out	0x3f, r0	; 63
    23d4:	cd bf       	out	0x3d, r28	; 61
    23d6:	09 94       	ijmp

000023d8 <__epilogue_restores__>:
    23d8:	2a 88       	ldd	r2, Y+18	; 0x12
    23da:	39 88       	ldd	r3, Y+17	; 0x11
    23dc:	48 88       	ldd	r4, Y+16	; 0x10
    23de:	5f 84       	ldd	r5, Y+15	; 0x0f
    23e0:	6e 84       	ldd	r6, Y+14	; 0x0e
    23e2:	7d 84       	ldd	r7, Y+13	; 0x0d
    23e4:	8c 84       	ldd	r8, Y+12	; 0x0c
    23e6:	9b 84       	ldd	r9, Y+11	; 0x0b
    23e8:	aa 84       	ldd	r10, Y+10	; 0x0a
    23ea:	b9 84       	ldd	r11, Y+9	; 0x09
    23ec:	c8 84       	ldd	r12, Y+8	; 0x08
    23ee:	df 80       	ldd	r13, Y+7	; 0x07
    23f0:	ee 80       	ldd	r14, Y+6	; 0x06
    23f2:	fd 80       	ldd	r15, Y+5	; 0x05
    23f4:	0c 81       	ldd	r16, Y+4	; 0x04
    23f6:	1b 81       	ldd	r17, Y+3	; 0x03
    23f8:	aa 81       	ldd	r26, Y+2	; 0x02
    23fa:	b9 81       	ldd	r27, Y+1	; 0x01
    23fc:	ce 0f       	add	r28, r30
    23fe:	d1 1d       	adc	r29, r1
    2400:	0f b6       	in	r0, 0x3f	; 63
    2402:	f8 94       	cli
    2404:	de bf       	out	0x3e, r29	; 62
    2406:	0f be       	out	0x3f, r0	; 63
    2408:	cd bf       	out	0x3d, r28	; 61
    240a:	ed 01       	movw	r28, r26
    240c:	08 95       	ret

0000240e <_exit>:
    240e:	f8 94       	cli

00002410 <__stop_program>:
    2410:	ff cf       	rjmp	.-2      	; 0x2410 <__stop_program>
