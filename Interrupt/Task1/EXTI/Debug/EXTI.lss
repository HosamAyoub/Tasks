
EXTI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002568  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  00002568  000025dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002d78  00000000  00000000  00002600  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001546  00000000  00000000  00005378  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  000068be  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  000069fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00006b6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  000087b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  000096a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000a450  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000a5b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000a83d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000b00b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 c7 06 	jmp	0xd8e	; 0xd8e <__vector_1>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e6       	ldi	r30, 0x68	; 104
      68:	f5 e2       	ldi	r31, 0x25	; 37
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 38       	cpi	r26, 0x82	; 130
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 3b 12 	call	0x2476	; 0x2476 <main>
      7a:	0c 94 b2 12 	jmp	0x2564	; 0x2564 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 7b 12 	jmp	0x24f6	; 0x24f6 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 97 12 	jmp	0x252e	; 0x252e <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 87 12 	jmp	0x250e	; 0x250e <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 a3 12 	jmp	0x2546	; 0x2546 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 87 12 	jmp	0x250e	; 0x250e <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 a3 12 	jmp	0x2546	; 0x2546 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 7b 12 	jmp	0x24f6	; 0x24f6 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 97 12 	jmp	0x252e	; 0x252e <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 87 12 	jmp	0x250e	; 0x250e <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 a3 12 	jmp	0x2546	; 0x2546 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 87 12 	jmp	0x250e	; 0x250e <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 a3 12 	jmp	0x2546	; 0x2546 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 87 12 	jmp	0x250e	; 0x250e <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 a3 12 	jmp	0x2546	; 0x2546 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 8b 12 	jmp	0x2516	; 0x2516 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 a7 12 	jmp	0x254e	; 0x254e <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <GIE_voidEnableGlobalInterrupt>:
#include "GIE_interface.h"
#include "GIE_private.h"
#include "GIE_config.h"

void GIE_voidEnableGlobalInterrupt(void)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG, SREG_I);
     b3e:	af e5       	ldi	r26, 0x5F	; 95
     b40:	b0 e0       	ldi	r27, 0x00	; 0
     b42:	ef e5       	ldi	r30, 0x5F	; 95
     b44:	f0 e0       	ldi	r31, 0x00	; 0
     b46:	80 81       	ld	r24, Z
     b48:	80 68       	ori	r24, 0x80	; 128
     b4a:	8c 93       	st	X, r24
}
     b4c:	cf 91       	pop	r28
     b4e:	df 91       	pop	r29
     b50:	08 95       	ret

00000b52 <GIE_voidDisableGlobalInterrupt>:

void GIE_voidDisableGlobalInterrupt(void)
{
     b52:	df 93       	push	r29
     b54:	cf 93       	push	r28
     b56:	cd b7       	in	r28, 0x3d	; 61
     b58:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG, SREG_I);
     b5a:	af e5       	ldi	r26, 0x5F	; 95
     b5c:	b0 e0       	ldi	r27, 0x00	; 0
     b5e:	ef e5       	ldi	r30, 0x5F	; 95
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	80 81       	ld	r24, Z
     b64:	8f 77       	andi	r24, 0x7F	; 127
     b66:	8c 93       	st	X, r24
}
     b68:	cf 91       	pop	r28
     b6a:	df 91       	pop	r29
     b6c:	08 95       	ret

00000b6e <EXTI_voidSetInt0SenseControl>:
#include "../DIO/DIO_interface.h"
#define F_CPU 8000000UL
#include <util/delay.h>

void EXTI_voidSetInt0SenseControl(u8 Copy_u8SenseControl)
{
     b6e:	df 93       	push	r29
     b70:	cf 93       	push	r28
     b72:	00 d0       	rcall	.+0      	; 0xb74 <EXTI_voidSetInt0SenseControl+0x6>
     b74:	0f 92       	push	r0
     b76:	cd b7       	in	r28, 0x3d	; 61
     b78:	de b7       	in	r29, 0x3e	; 62
     b7a:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8SenseControl)
     b7c:	89 81       	ldd	r24, Y+1	; 0x01
     b7e:	28 2f       	mov	r18, r24
     b80:	30 e0       	ldi	r19, 0x00	; 0
     b82:	3b 83       	std	Y+3, r19	; 0x03
     b84:	2a 83       	std	Y+2, r18	; 0x02
     b86:	8a 81       	ldd	r24, Y+2	; 0x02
     b88:	9b 81       	ldd	r25, Y+3	; 0x03
     b8a:	81 30       	cpi	r24, 0x01	; 1
     b8c:	91 05       	cpc	r25, r1
     b8e:	09 f4       	brne	.+2      	; 0xb92 <EXTI_voidSetInt0SenseControl+0x24>
     b90:	42 c0       	rjmp	.+132    	; 0xc16 <EXTI_voidSetInt0SenseControl+0xa8>
     b92:	2a 81       	ldd	r18, Y+2	; 0x02
     b94:	3b 81       	ldd	r19, Y+3	; 0x03
     b96:	22 30       	cpi	r18, 0x02	; 2
     b98:	31 05       	cpc	r19, r1
     b9a:	2c f4       	brge	.+10     	; 0xba6 <EXTI_voidSetInt0SenseControl+0x38>
     b9c:	8a 81       	ldd	r24, Y+2	; 0x02
     b9e:	9b 81       	ldd	r25, Y+3	; 0x03
     ba0:	00 97       	sbiw	r24, 0x00	; 0
     ba2:	51 f1       	breq	.+84     	; 0xbf8 <EXTI_voidSetInt0SenseControl+0x8a>
     ba4:	46 c0       	rjmp	.+140    	; 0xc32 <EXTI_voidSetInt0SenseControl+0xc4>
     ba6:	2a 81       	ldd	r18, Y+2	; 0x02
     ba8:	3b 81       	ldd	r19, Y+3	; 0x03
     baa:	22 30       	cpi	r18, 0x02	; 2
     bac:	31 05       	cpc	r19, r1
     bae:	31 f0       	breq	.+12     	; 0xbbc <EXTI_voidSetInt0SenseControl+0x4e>
     bb0:	8a 81       	ldd	r24, Y+2	; 0x02
     bb2:	9b 81       	ldd	r25, Y+3	; 0x03
     bb4:	83 30       	cpi	r24, 0x03	; 3
     bb6:	91 05       	cpc	r25, r1
     bb8:	81 f0       	breq	.+32     	; 0xbda <EXTI_voidSetInt0SenseControl+0x6c>
     bba:	3b c0       	rjmp	.+118    	; 0xc32 <EXTI_voidSetInt0SenseControl+0xc4>
	{
	case LOW_LEVEL:
	{
		CLR_BIT(MCUCR, MCUCR_ISC01);
     bbc:	a5 e5       	ldi	r26, 0x55	; 85
     bbe:	b0 e0       	ldi	r27, 0x00	; 0
     bc0:	e5 e5       	ldi	r30, 0x55	; 85
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	80 81       	ld	r24, Z
     bc6:	8d 7f       	andi	r24, 0xFD	; 253
     bc8:	8c 93       	st	X, r24
		CLR_BIT(MCUCR, MCUCR_ISC00);
     bca:	a5 e5       	ldi	r26, 0x55	; 85
     bcc:	b0 e0       	ldi	r27, 0x00	; 0
     bce:	e5 e5       	ldi	r30, 0x55	; 85
     bd0:	f0 e0       	ldi	r31, 0x00	; 0
     bd2:	80 81       	ld	r24, Z
     bd4:	8e 7f       	andi	r24, 0xFE	; 254
     bd6:	8c 93       	st	X, r24
     bd8:	2c c0       	rjmp	.+88     	; 0xc32 <EXTI_voidSetInt0SenseControl+0xc4>
		break;
	}
	case ON_CHANGE:
	{
		CLR_BIT(MCUCR, MCUCR_ISC01);
     bda:	a5 e5       	ldi	r26, 0x55	; 85
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	e5 e5       	ldi	r30, 0x55	; 85
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
     be4:	8d 7f       	andi	r24, 0xFD	; 253
     be6:	8c 93       	st	X, r24
		SET_BIT(MCUCR, MCUCR_ISC00);
     be8:	a5 e5       	ldi	r26, 0x55	; 85
     bea:	b0 e0       	ldi	r27, 0x00	; 0
     bec:	e5 e5       	ldi	r30, 0x55	; 85
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	80 81       	ld	r24, Z
     bf2:	81 60       	ori	r24, 0x01	; 1
     bf4:	8c 93       	st	X, r24
     bf6:	1d c0       	rjmp	.+58     	; 0xc32 <EXTI_voidSetInt0SenseControl+0xc4>
		break;
	}
	case FALLING_EDGE:
	{
		SET_BIT(MCUCR, MCUCR_ISC01);
     bf8:	a5 e5       	ldi	r26, 0x55	; 85
     bfa:	b0 e0       	ldi	r27, 0x00	; 0
     bfc:	e5 e5       	ldi	r30, 0x55	; 85
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	80 81       	ld	r24, Z
     c02:	82 60       	ori	r24, 0x02	; 2
     c04:	8c 93       	st	X, r24
		CLR_BIT(MCUCR, MCUCR_ISC00);
     c06:	a5 e5       	ldi	r26, 0x55	; 85
     c08:	b0 e0       	ldi	r27, 0x00	; 0
     c0a:	e5 e5       	ldi	r30, 0x55	; 85
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
     c0e:	80 81       	ld	r24, Z
     c10:	8e 7f       	andi	r24, 0xFE	; 254
     c12:	8c 93       	st	X, r24
     c14:	0e c0       	rjmp	.+28     	; 0xc32 <EXTI_voidSetInt0SenseControl+0xc4>
		break;
	}
	case RISING_EDGE:
	{
		SET_BIT(MCUCR, MCUCR_ISC01);
     c16:	a5 e5       	ldi	r26, 0x55	; 85
     c18:	b0 e0       	ldi	r27, 0x00	; 0
     c1a:	e5 e5       	ldi	r30, 0x55	; 85
     c1c:	f0 e0       	ldi	r31, 0x00	; 0
     c1e:	80 81       	ld	r24, Z
     c20:	82 60       	ori	r24, 0x02	; 2
     c22:	8c 93       	st	X, r24
		SET_BIT(MCUCR, MCUCR_ISC00);
     c24:	a5 e5       	ldi	r26, 0x55	; 85
     c26:	b0 e0       	ldi	r27, 0x00	; 0
     c28:	e5 e5       	ldi	r30, 0x55	; 85
     c2a:	f0 e0       	ldi	r31, 0x00	; 0
     c2c:	80 81       	ld	r24, Z
     c2e:	81 60       	ori	r24, 0x01	; 1
     c30:	8c 93       	st	X, r24
	default:
	{
		break;
	}
	}
	SET_BIT(GICR, GICR_INT0);
     c32:	ab e5       	ldi	r26, 0x5B	; 91
     c34:	b0 e0       	ldi	r27, 0x00	; 0
     c36:	eb e5       	ldi	r30, 0x5B	; 91
     c38:	f0 e0       	ldi	r31, 0x00	; 0
     c3a:	80 81       	ld	r24, Z
     c3c:	80 64       	ori	r24, 0x40	; 64
     c3e:	8c 93       	st	X, r24
}
     c40:	0f 90       	pop	r0
     c42:	0f 90       	pop	r0
     c44:	0f 90       	pop	r0
     c46:	cf 91       	pop	r28
     c48:	df 91       	pop	r29
     c4a:	08 95       	ret

00000c4c <EXTI_voidSetInt1SenseControl>:

void EXTI_voidSetInt1SenseControl(u8 Copy_u8SenseControl)
{
     c4c:	df 93       	push	r29
     c4e:	cf 93       	push	r28
     c50:	00 d0       	rcall	.+0      	; 0xc52 <EXTI_voidSetInt1SenseControl+0x6>
     c52:	0f 92       	push	r0
     c54:	cd b7       	in	r28, 0x3d	; 61
     c56:	de b7       	in	r29, 0x3e	; 62
     c58:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8SenseControl)
     c5a:	89 81       	ldd	r24, Y+1	; 0x01
     c5c:	28 2f       	mov	r18, r24
     c5e:	30 e0       	ldi	r19, 0x00	; 0
     c60:	3b 83       	std	Y+3, r19	; 0x03
     c62:	2a 83       	std	Y+2, r18	; 0x02
     c64:	8a 81       	ldd	r24, Y+2	; 0x02
     c66:	9b 81       	ldd	r25, Y+3	; 0x03
     c68:	81 30       	cpi	r24, 0x01	; 1
     c6a:	91 05       	cpc	r25, r1
     c6c:	09 f4       	brne	.+2      	; 0xc70 <EXTI_voidSetInt1SenseControl+0x24>
     c6e:	42 c0       	rjmp	.+132    	; 0xcf4 <EXTI_voidSetInt1SenseControl+0xa8>
     c70:	2a 81       	ldd	r18, Y+2	; 0x02
     c72:	3b 81       	ldd	r19, Y+3	; 0x03
     c74:	22 30       	cpi	r18, 0x02	; 2
     c76:	31 05       	cpc	r19, r1
     c78:	2c f4       	brge	.+10     	; 0xc84 <EXTI_voidSetInt1SenseControl+0x38>
     c7a:	8a 81       	ldd	r24, Y+2	; 0x02
     c7c:	9b 81       	ldd	r25, Y+3	; 0x03
     c7e:	00 97       	sbiw	r24, 0x00	; 0
     c80:	51 f1       	breq	.+84     	; 0xcd6 <EXTI_voidSetInt1SenseControl+0x8a>
     c82:	46 c0       	rjmp	.+140    	; 0xd10 <EXTI_voidSetInt1SenseControl+0xc4>
     c84:	2a 81       	ldd	r18, Y+2	; 0x02
     c86:	3b 81       	ldd	r19, Y+3	; 0x03
     c88:	22 30       	cpi	r18, 0x02	; 2
     c8a:	31 05       	cpc	r19, r1
     c8c:	31 f0       	breq	.+12     	; 0xc9a <EXTI_voidSetInt1SenseControl+0x4e>
     c8e:	8a 81       	ldd	r24, Y+2	; 0x02
     c90:	9b 81       	ldd	r25, Y+3	; 0x03
     c92:	83 30       	cpi	r24, 0x03	; 3
     c94:	91 05       	cpc	r25, r1
     c96:	81 f0       	breq	.+32     	; 0xcb8 <EXTI_voidSetInt1SenseControl+0x6c>
     c98:	3b c0       	rjmp	.+118    	; 0xd10 <EXTI_voidSetInt1SenseControl+0xc4>
	{
	case LOW_LEVEL:
	{
		CLR_BIT(MCUCR, MCUCR_ISC11);
     c9a:	a5 e5       	ldi	r26, 0x55	; 85
     c9c:	b0 e0       	ldi	r27, 0x00	; 0
     c9e:	e5 e5       	ldi	r30, 0x55	; 85
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	80 81       	ld	r24, Z
     ca4:	87 7f       	andi	r24, 0xF7	; 247
     ca6:	8c 93       	st	X, r24
		CLR_BIT(MCUCR, MCUCR_ISC10);
     ca8:	a5 e5       	ldi	r26, 0x55	; 85
     caa:	b0 e0       	ldi	r27, 0x00	; 0
     cac:	e5 e5       	ldi	r30, 0x55	; 85
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	80 81       	ld	r24, Z
     cb2:	8b 7f       	andi	r24, 0xFB	; 251
     cb4:	8c 93       	st	X, r24
     cb6:	2c c0       	rjmp	.+88     	; 0xd10 <EXTI_voidSetInt1SenseControl+0xc4>
		break;
	}
	case ON_CHANGE:
	{
		CLR_BIT(MCUCR, MCUCR_ISC11);
     cb8:	a5 e5       	ldi	r26, 0x55	; 85
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	e5 e5       	ldi	r30, 0x55	; 85
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	80 81       	ld	r24, Z
     cc2:	87 7f       	andi	r24, 0xF7	; 247
     cc4:	8c 93       	st	X, r24
		SET_BIT(MCUCR, MCUCR_ISC10);
     cc6:	a5 e5       	ldi	r26, 0x55	; 85
     cc8:	b0 e0       	ldi	r27, 0x00	; 0
     cca:	e5 e5       	ldi	r30, 0x55	; 85
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	80 81       	ld	r24, Z
     cd0:	84 60       	ori	r24, 0x04	; 4
     cd2:	8c 93       	st	X, r24
     cd4:	1d c0       	rjmp	.+58     	; 0xd10 <EXTI_voidSetInt1SenseControl+0xc4>
		break;
	}
	case FALLING_EDGE:
	{
		SET_BIT(MCUCR, MCUCR_ISC11);
     cd6:	a5 e5       	ldi	r26, 0x55	; 85
     cd8:	b0 e0       	ldi	r27, 0x00	; 0
     cda:	e5 e5       	ldi	r30, 0x55	; 85
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	80 81       	ld	r24, Z
     ce0:	88 60       	ori	r24, 0x08	; 8
     ce2:	8c 93       	st	X, r24
		CLR_BIT(MCUCR, MCUCR_ISC10);
     ce4:	a5 e5       	ldi	r26, 0x55	; 85
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	e5 e5       	ldi	r30, 0x55	; 85
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	8b 7f       	andi	r24, 0xFB	; 251
     cf0:	8c 93       	st	X, r24
     cf2:	0e c0       	rjmp	.+28     	; 0xd10 <EXTI_voidSetInt1SenseControl+0xc4>
		break;
	}
	case RISING_EDGE:
	{
		SET_BIT(MCUCR, MCUCR_ISC11);
     cf4:	a5 e5       	ldi	r26, 0x55	; 85
     cf6:	b0 e0       	ldi	r27, 0x00	; 0
     cf8:	e5 e5       	ldi	r30, 0x55	; 85
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	80 81       	ld	r24, Z
     cfe:	88 60       	ori	r24, 0x08	; 8
     d00:	8c 93       	st	X, r24
		SET_BIT(MCUCR, MCUCR_ISC10);
     d02:	a5 e5       	ldi	r26, 0x55	; 85
     d04:	b0 e0       	ldi	r27, 0x00	; 0
     d06:	e5 e5       	ldi	r30, 0x55	; 85
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	80 81       	ld	r24, Z
     d0c:	84 60       	ori	r24, 0x04	; 4
     d0e:	8c 93       	st	X, r24
	default:
	{
		break;
	}
	}
	SET_BIT(GICR, GICR_INT1);
     d10:	ab e5       	ldi	r26, 0x5B	; 91
     d12:	b0 e0       	ldi	r27, 0x00	; 0
     d14:	eb e5       	ldi	r30, 0x5B	; 91
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	80 81       	ld	r24, Z
     d1a:	80 68       	ori	r24, 0x80	; 128
     d1c:	8c 93       	st	X, r24
}
     d1e:	0f 90       	pop	r0
     d20:	0f 90       	pop	r0
     d22:	0f 90       	pop	r0
     d24:	cf 91       	pop	r28
     d26:	df 91       	pop	r29
     d28:	08 95       	ret

00000d2a <EXTI_voidSetInt2SenseControl>:

void EXTI_voidSetInt2SenseControl(u8 Copy_u8SenseControl)
{
     d2a:	df 93       	push	r29
     d2c:	cf 93       	push	r28
     d2e:	00 d0       	rcall	.+0      	; 0xd30 <EXTI_voidSetInt2SenseControl+0x6>
     d30:	0f 92       	push	r0
     d32:	cd b7       	in	r28, 0x3d	; 61
     d34:	de b7       	in	r29, 0x3e	; 62
     d36:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8SenseControl)
     d38:	89 81       	ldd	r24, Y+1	; 0x01
     d3a:	28 2f       	mov	r18, r24
     d3c:	30 e0       	ldi	r19, 0x00	; 0
     d3e:	3b 83       	std	Y+3, r19	; 0x03
     d40:	2a 83       	std	Y+2, r18	; 0x02
     d42:	8a 81       	ldd	r24, Y+2	; 0x02
     d44:	9b 81       	ldd	r25, Y+3	; 0x03
     d46:	00 97       	sbiw	r24, 0x00	; 0
     d48:	31 f0       	breq	.+12     	; 0xd56 <EXTI_voidSetInt2SenseControl+0x2c>
     d4a:	2a 81       	ldd	r18, Y+2	; 0x02
     d4c:	3b 81       	ldd	r19, Y+3	; 0x03
     d4e:	21 30       	cpi	r18, 0x01	; 1
     d50:	31 05       	cpc	r19, r1
     d52:	49 f0       	breq	.+18     	; 0xd66 <EXTI_voidSetInt2SenseControl+0x3c>
     d54:	0f c0       	rjmp	.+30     	; 0xd74 <EXTI_voidSetInt2SenseControl+0x4a>
	{
	case FALLING_EDGE:
	{
		CLR_BIT(MCUCSR, MCUCSR_ISC2);
     d56:	a4 e5       	ldi	r26, 0x54	; 84
     d58:	b0 e0       	ldi	r27, 0x00	; 0
     d5a:	e4 e5       	ldi	r30, 0x54	; 84
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	80 81       	ld	r24, Z
     d60:	8f 7b       	andi	r24, 0xBF	; 191
     d62:	8c 93       	st	X, r24
     d64:	07 c0       	rjmp	.+14     	; 0xd74 <EXTI_voidSetInt2SenseControl+0x4a>
		break;
	}
	case RISING_EDGE:
	{
		SET_BIT(MCUCSR, MCUCSR_ISC2);
     d66:	a4 e5       	ldi	r26, 0x54	; 84
     d68:	b0 e0       	ldi	r27, 0x00	; 0
     d6a:	e4 e5       	ldi	r30, 0x54	; 84
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	80 81       	ld	r24, Z
     d70:	80 64       	ori	r24, 0x40	; 64
     d72:	8c 93       	st	X, r24
	default:
	{
		break;
	}
	}
	SET_BIT(GICR, GICR_INT2);
     d74:	ab e5       	ldi	r26, 0x5B	; 91
     d76:	b0 e0       	ldi	r27, 0x00	; 0
     d78:	eb e5       	ldi	r30, 0x5B	; 91
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	80 81       	ld	r24, Z
     d7e:	80 62       	ori	r24, 0x20	; 32
     d80:	8c 93       	st	X, r24
}
     d82:	0f 90       	pop	r0
     d84:	0f 90       	pop	r0
     d86:	0f 90       	pop	r0
     d88:	cf 91       	pop	r28
     d8a:	df 91       	pop	r29
     d8c:	08 95       	ret

00000d8e <__vector_1>:


/*ISR for INT0*/
void __vector_1 (void) __attribute__((signal));
void __vector_1 (void)
{
     d8e:	1f 92       	push	r1
     d90:	0f 92       	push	r0
     d92:	0f b6       	in	r0, 0x3f	; 63
     d94:	0f 92       	push	r0
     d96:	11 24       	eor	r1, r1
     d98:	2f 93       	push	r18
     d9a:	3f 93       	push	r19
     d9c:	4f 93       	push	r20
     d9e:	5f 93       	push	r21
     da0:	6f 93       	push	r22
     da2:	7f 93       	push	r23
     da4:	8f 93       	push	r24
     da6:	9f 93       	push	r25
     da8:	af 93       	push	r26
     daa:	bf 93       	push	r27
     dac:	ef 93       	push	r30
     dae:	ff 93       	push	r31
     db0:	df 93       	push	r29
     db2:	cf 93       	push	r28
     db4:	cd b7       	in	r28, 0x3d	; 61
     db6:	de b7       	in	r29, 0x3e	; 62
	/*Toggle LED*/
	DIO_u8TogglePin(DIO_PORTC, DIO_PIN7);
     db8:	82 e0       	ldi	r24, 0x02	; 2
     dba:	67 e0       	ldi	r22, 0x07	; 7
     dbc:	0e 94 99 0a 	call	0x1532	; 0x1532 <DIO_u8TogglePin>
//	}
//	else if (v == 1)
//	{
//		DIO_u8SetPinValue(DIO_PORTC, DIO_PIN0, DIO_PIN_LOW);
//	}
}
     dc0:	cf 91       	pop	r28
     dc2:	df 91       	pop	r29
     dc4:	ff 91       	pop	r31
     dc6:	ef 91       	pop	r30
     dc8:	bf 91       	pop	r27
     dca:	af 91       	pop	r26
     dcc:	9f 91       	pop	r25
     dce:	8f 91       	pop	r24
     dd0:	7f 91       	pop	r23
     dd2:	6f 91       	pop	r22
     dd4:	5f 91       	pop	r21
     dd6:	4f 91       	pop	r20
     dd8:	3f 91       	pop	r19
     dda:	2f 91       	pop	r18
     ddc:	0f 90       	pop	r0
     dde:	0f be       	out	0x3f, r0	; 63
     de0:	0f 90       	pop	r0
     de2:	1f 90       	pop	r1
     de4:	18 95       	reti

00000de6 <DIO_u8SetPortDirection>:
#include "DIO_private.h"
#include "DIO_config.h"


u8 DIO_u8SetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
     de6:	df 93       	push	r29
     de8:	cf 93       	push	r28
     dea:	00 d0       	rcall	.+0      	; 0xdec <DIO_u8SetPortDirection+0x6>
     dec:	00 d0       	rcall	.+0      	; 0xdee <DIO_u8SetPortDirection+0x8>
     dee:	0f 92       	push	r0
     df0:	cd b7       	in	r28, 0x3d	; 61
     df2:	de b7       	in	r29, 0x3e	; 62
     df4:	8a 83       	std	Y+2, r24	; 0x02
     df6:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8RunState = DIO_OK;
     df8:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
     dfa:	8a 81       	ldd	r24, Y+2	; 0x02
     dfc:	28 2f       	mov	r18, r24
     dfe:	30 e0       	ldi	r19, 0x00	; 0
     e00:	3d 83       	std	Y+5, r19	; 0x05
     e02:	2c 83       	std	Y+4, r18	; 0x04
     e04:	8c 81       	ldd	r24, Y+4	; 0x04
     e06:	9d 81       	ldd	r25, Y+5	; 0x05
     e08:	81 30       	cpi	r24, 0x01	; 1
     e0a:	91 05       	cpc	r25, r1
     e0c:	d1 f0       	breq	.+52     	; 0xe42 <DIO_u8SetPortDirection+0x5c>
     e0e:	2c 81       	ldd	r18, Y+4	; 0x04
     e10:	3d 81       	ldd	r19, Y+5	; 0x05
     e12:	22 30       	cpi	r18, 0x02	; 2
     e14:	31 05       	cpc	r19, r1
     e16:	2c f4       	brge	.+10     	; 0xe22 <DIO_u8SetPortDirection+0x3c>
     e18:	8c 81       	ldd	r24, Y+4	; 0x04
     e1a:	9d 81       	ldd	r25, Y+5	; 0x05
     e1c:	00 97       	sbiw	r24, 0x00	; 0
     e1e:	61 f0       	breq	.+24     	; 0xe38 <DIO_u8SetPortDirection+0x52>
     e20:	1f c0       	rjmp	.+62     	; 0xe60 <DIO_u8SetPortDirection+0x7a>
     e22:	2c 81       	ldd	r18, Y+4	; 0x04
     e24:	3d 81       	ldd	r19, Y+5	; 0x05
     e26:	22 30       	cpi	r18, 0x02	; 2
     e28:	31 05       	cpc	r19, r1
     e2a:	81 f0       	breq	.+32     	; 0xe4c <DIO_u8SetPortDirection+0x66>
     e2c:	8c 81       	ldd	r24, Y+4	; 0x04
     e2e:	9d 81       	ldd	r25, Y+5	; 0x05
     e30:	83 30       	cpi	r24, 0x03	; 3
     e32:	91 05       	cpc	r25, r1
     e34:	81 f0       	breq	.+32     	; 0xe56 <DIO_u8SetPortDirection+0x70>
     e36:	14 c0       	rjmp	.+40     	; 0xe60 <DIO_u8SetPortDirection+0x7a>
	{
	case DIO_PORTA: DDRA = Copy_u8Direction; break;
     e38:	ea e3       	ldi	r30, 0x3A	; 58
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	8b 81       	ldd	r24, Y+3	; 0x03
     e3e:	80 83       	st	Z, r24
     e40:	11 c0       	rjmp	.+34     	; 0xe64 <DIO_u8SetPortDirection+0x7e>
	case DIO_PORTB:	DDRB = Copy_u8Direction; break;
     e42:	e7 e3       	ldi	r30, 0x37	; 55
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	8b 81       	ldd	r24, Y+3	; 0x03
     e48:	80 83       	st	Z, r24
     e4a:	0c c0       	rjmp	.+24     	; 0xe64 <DIO_u8SetPortDirection+0x7e>
	case DIO_PORTC: DDRC = Copy_u8Direction; break;
     e4c:	e4 e3       	ldi	r30, 0x34	; 52
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	8b 81       	ldd	r24, Y+3	; 0x03
     e52:	80 83       	st	Z, r24
     e54:	07 c0       	rjmp	.+14     	; 0xe64 <DIO_u8SetPortDirection+0x7e>
	case DIO_PORTD: DDRD = Copy_u8Direction; break;
     e56:	e1 e3       	ldi	r30, 0x31	; 49
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	8b 81       	ldd	r24, Y+3	; 0x03
     e5c:	80 83       	st	Z, r24
     e5e:	02 c0       	rjmp	.+4      	; 0xe64 <DIO_u8SetPortDirection+0x7e>
	default: Local_u8RunState = DIO_ERROR;
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8RunState;
     e64:	89 81       	ldd	r24, Y+1	; 0x01
}
     e66:	0f 90       	pop	r0
     e68:	0f 90       	pop	r0
     e6a:	0f 90       	pop	r0
     e6c:	0f 90       	pop	r0
     e6e:	0f 90       	pop	r0
     e70:	cf 91       	pop	r28
     e72:	df 91       	pop	r29
     e74:	08 95       	ret

00000e76 <DIO_u8SetPortValue>:


u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
     e76:	df 93       	push	r29
     e78:	cf 93       	push	r28
     e7a:	00 d0       	rcall	.+0      	; 0xe7c <DIO_u8SetPortValue+0x6>
     e7c:	00 d0       	rcall	.+0      	; 0xe7e <DIO_u8SetPortValue+0x8>
     e7e:	0f 92       	push	r0
     e80:	cd b7       	in	r28, 0x3d	; 61
     e82:	de b7       	in	r29, 0x3e	; 62
     e84:	8a 83       	std	Y+2, r24	; 0x02
     e86:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8RunState = DIO_OK;
     e88:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
     e8a:	8a 81       	ldd	r24, Y+2	; 0x02
     e8c:	28 2f       	mov	r18, r24
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	3d 83       	std	Y+5, r19	; 0x05
     e92:	2c 83       	std	Y+4, r18	; 0x04
     e94:	8c 81       	ldd	r24, Y+4	; 0x04
     e96:	9d 81       	ldd	r25, Y+5	; 0x05
     e98:	81 30       	cpi	r24, 0x01	; 1
     e9a:	91 05       	cpc	r25, r1
     e9c:	d1 f0       	breq	.+52     	; 0xed2 <DIO_u8SetPortValue+0x5c>
     e9e:	2c 81       	ldd	r18, Y+4	; 0x04
     ea0:	3d 81       	ldd	r19, Y+5	; 0x05
     ea2:	22 30       	cpi	r18, 0x02	; 2
     ea4:	31 05       	cpc	r19, r1
     ea6:	2c f4       	brge	.+10     	; 0xeb2 <DIO_u8SetPortValue+0x3c>
     ea8:	8c 81       	ldd	r24, Y+4	; 0x04
     eaa:	9d 81       	ldd	r25, Y+5	; 0x05
     eac:	00 97       	sbiw	r24, 0x00	; 0
     eae:	61 f0       	breq	.+24     	; 0xec8 <DIO_u8SetPortValue+0x52>
     eb0:	1f c0       	rjmp	.+62     	; 0xef0 <DIO_u8SetPortValue+0x7a>
     eb2:	2c 81       	ldd	r18, Y+4	; 0x04
     eb4:	3d 81       	ldd	r19, Y+5	; 0x05
     eb6:	22 30       	cpi	r18, 0x02	; 2
     eb8:	31 05       	cpc	r19, r1
     eba:	81 f0       	breq	.+32     	; 0xedc <DIO_u8SetPortValue+0x66>
     ebc:	8c 81       	ldd	r24, Y+4	; 0x04
     ebe:	9d 81       	ldd	r25, Y+5	; 0x05
     ec0:	83 30       	cpi	r24, 0x03	; 3
     ec2:	91 05       	cpc	r25, r1
     ec4:	81 f0       	breq	.+32     	; 0xee6 <DIO_u8SetPortValue+0x70>
     ec6:	14 c0       	rjmp	.+40     	; 0xef0 <DIO_u8SetPortValue+0x7a>
	{
	case DIO_PORTA: PORTA = Copy_u8Value; break;
     ec8:	eb e3       	ldi	r30, 0x3B	; 59
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	8b 81       	ldd	r24, Y+3	; 0x03
     ece:	80 83       	st	Z, r24
     ed0:	11 c0       	rjmp	.+34     	; 0xef4 <DIO_u8SetPortValue+0x7e>
	case DIO_PORTB:	PORTB = Copy_u8Value; break;
     ed2:	e8 e3       	ldi	r30, 0x38	; 56
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	8b 81       	ldd	r24, Y+3	; 0x03
     ed8:	80 83       	st	Z, r24
     eda:	0c c0       	rjmp	.+24     	; 0xef4 <DIO_u8SetPortValue+0x7e>
	case DIO_PORTC: PORTC = Copy_u8Value; break;
     edc:	e5 e3       	ldi	r30, 0x35	; 53
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	8b 81       	ldd	r24, Y+3	; 0x03
     ee2:	80 83       	st	Z, r24
     ee4:	07 c0       	rjmp	.+14     	; 0xef4 <DIO_u8SetPortValue+0x7e>
	case DIO_PORTD: PORTD = Copy_u8Value; break;
     ee6:	e2 e3       	ldi	r30, 0x32	; 50
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	8b 81       	ldd	r24, Y+3	; 0x03
     eec:	80 83       	st	Z, r24
     eee:	02 c0       	rjmp	.+4      	; 0xef4 <DIO_u8SetPortValue+0x7e>
	default: Local_u8RunState = DIO_ERROR;
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8RunState;
     ef4:	89 81       	ldd	r24, Y+1	; 0x01
}
     ef6:	0f 90       	pop	r0
     ef8:	0f 90       	pop	r0
     efa:	0f 90       	pop	r0
     efc:	0f 90       	pop	r0
     efe:	0f 90       	pop	r0
     f00:	cf 91       	pop	r28
     f02:	df 91       	pop	r29
     f04:	08 95       	ret

00000f06 <DIO_u8GetPortValue>:


u8 DIO_u8GetPortValue(u8 Copy_u8Port, u8 *Copy_u8Variable)
{
     f06:	df 93       	push	r29
     f08:	cf 93       	push	r28
     f0a:	00 d0       	rcall	.+0      	; 0xf0c <DIO_u8GetPortValue+0x6>
     f0c:	00 d0       	rcall	.+0      	; 0xf0e <DIO_u8GetPortValue+0x8>
     f0e:	00 d0       	rcall	.+0      	; 0xf10 <DIO_u8GetPortValue+0xa>
     f10:	cd b7       	in	r28, 0x3d	; 61
     f12:	de b7       	in	r29, 0x3e	; 62
     f14:	8a 83       	std	Y+2, r24	; 0x02
     f16:	7c 83       	std	Y+4, r23	; 0x04
     f18:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8RunState = DIO_OK;
     f1a:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Variable != NULL)
     f1c:	8b 81       	ldd	r24, Y+3	; 0x03
     f1e:	9c 81       	ldd	r25, Y+4	; 0x04
     f20:	00 97       	sbiw	r24, 0x00	; 0
     f22:	09 f4       	brne	.+2      	; 0xf26 <DIO_u8GetPortValue+0x20>
     f24:	3e c0       	rjmp	.+124    	; 0xfa2 <DIO_u8GetPortValue+0x9c>
	{
		switch(Copy_u8Port)
     f26:	8a 81       	ldd	r24, Y+2	; 0x02
     f28:	28 2f       	mov	r18, r24
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	3e 83       	std	Y+6, r19	; 0x06
     f2e:	2d 83       	std	Y+5, r18	; 0x05
     f30:	8d 81       	ldd	r24, Y+5	; 0x05
     f32:	9e 81       	ldd	r25, Y+6	; 0x06
     f34:	81 30       	cpi	r24, 0x01	; 1
     f36:	91 05       	cpc	r25, r1
     f38:	e1 f0       	breq	.+56     	; 0xf72 <DIO_u8GetPortValue+0x6c>
     f3a:	2d 81       	ldd	r18, Y+5	; 0x05
     f3c:	3e 81       	ldd	r19, Y+6	; 0x06
     f3e:	22 30       	cpi	r18, 0x02	; 2
     f40:	31 05       	cpc	r19, r1
     f42:	2c f4       	brge	.+10     	; 0xf4e <DIO_u8GetPortValue+0x48>
     f44:	8d 81       	ldd	r24, Y+5	; 0x05
     f46:	9e 81       	ldd	r25, Y+6	; 0x06
     f48:	00 97       	sbiw	r24, 0x00	; 0
     f4a:	61 f0       	breq	.+24     	; 0xf64 <DIO_u8GetPortValue+0x5e>
     f4c:	27 c0       	rjmp	.+78     	; 0xf9c <DIO_u8GetPortValue+0x96>
     f4e:	2d 81       	ldd	r18, Y+5	; 0x05
     f50:	3e 81       	ldd	r19, Y+6	; 0x06
     f52:	22 30       	cpi	r18, 0x02	; 2
     f54:	31 05       	cpc	r19, r1
     f56:	a1 f0       	breq	.+40     	; 0xf80 <DIO_u8GetPortValue+0x7a>
     f58:	8d 81       	ldd	r24, Y+5	; 0x05
     f5a:	9e 81       	ldd	r25, Y+6	; 0x06
     f5c:	83 30       	cpi	r24, 0x03	; 3
     f5e:	91 05       	cpc	r25, r1
     f60:	b1 f0       	breq	.+44     	; 0xf8e <DIO_u8GetPortValue+0x88>
     f62:	1c c0       	rjmp	.+56     	; 0xf9c <DIO_u8GetPortValue+0x96>
		{
		case DIO_PORTA: *Copy_u8Variable = PINA; break;
     f64:	e9 e3       	ldi	r30, 0x39	; 57
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 81       	ld	r24, Z
     f6a:	eb 81       	ldd	r30, Y+3	; 0x03
     f6c:	fc 81       	ldd	r31, Y+4	; 0x04
     f6e:	80 83       	st	Z, r24
     f70:	1a c0       	rjmp	.+52     	; 0xfa6 <DIO_u8GetPortValue+0xa0>
		case DIO_PORTB:	*Copy_u8Variable = PINB; break;
     f72:	e6 e3       	ldi	r30, 0x36	; 54
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	eb 81       	ldd	r30, Y+3	; 0x03
     f7a:	fc 81       	ldd	r31, Y+4	; 0x04
     f7c:	80 83       	st	Z, r24
     f7e:	13 c0       	rjmp	.+38     	; 0xfa6 <DIO_u8GetPortValue+0xa0>
		case DIO_PORTC: *Copy_u8Variable = PINC; break;
     f80:	e3 e3       	ldi	r30, 0x33	; 51
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	80 81       	ld	r24, Z
     f86:	eb 81       	ldd	r30, Y+3	; 0x03
     f88:	fc 81       	ldd	r31, Y+4	; 0x04
     f8a:	80 83       	st	Z, r24
     f8c:	0c c0       	rjmp	.+24     	; 0xfa6 <DIO_u8GetPortValue+0xa0>
		case DIO_PORTD: *Copy_u8Variable = PIND; break;
     f8e:	e0 e3       	ldi	r30, 0x30	; 48
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	80 81       	ld	r24, Z
     f94:	eb 81       	ldd	r30, Y+3	; 0x03
     f96:	fc 81       	ldd	r31, Y+4	; 0x04
     f98:	80 83       	st	Z, r24
     f9a:	05 c0       	rjmp	.+10     	; 0xfa6 <DIO_u8GetPortValue+0xa0>
		default: Local_u8RunState = DIO_ERROR;
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	89 83       	std	Y+1, r24	; 0x01
     fa0:	02 c0       	rjmp	.+4      	; 0xfa6 <DIO_u8GetPortValue+0xa0>
		}
	}
	else
	{
		Local_u8RunState = DIO_ERROR;
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8RunState;
     fa6:	89 81       	ldd	r24, Y+1	; 0x01
}
     fa8:	26 96       	adiw	r28, 0x06	; 6
     faa:	0f b6       	in	r0, 0x3f	; 63
     fac:	f8 94       	cli
     fae:	de bf       	out	0x3e, r29	; 62
     fb0:	0f be       	out	0x3f, r0	; 63
     fb2:	cd bf       	out	0x3d, r28	; 61
     fb4:	cf 91       	pop	r28
     fb6:	df 91       	pop	r29
     fb8:	08 95       	ret

00000fba <DIO_u8SetPinDirection>:


u8 DIO_u8SetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
     fba:	df 93       	push	r29
     fbc:	cf 93       	push	r28
     fbe:	cd b7       	in	r28, 0x3d	; 61
     fc0:	de b7       	in	r29, 0x3e	; 62
     fc2:	28 97       	sbiw	r28, 0x08	; 8
     fc4:	0f b6       	in	r0, 0x3f	; 63
     fc6:	f8 94       	cli
     fc8:	de bf       	out	0x3e, r29	; 62
     fca:	0f be       	out	0x3f, r0	; 63
     fcc:	cd bf       	out	0x3d, r28	; 61
     fce:	8a 83       	std	Y+2, r24	; 0x02
     fd0:	6b 83       	std	Y+3, r22	; 0x03
     fd2:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8RunState = DIO_OK;
     fd4:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8Pin >= DIO_PIN0) && (Copy_u8Pin <= DIO_PIN7))
     fd6:	8b 81       	ldd	r24, Y+3	; 0x03
     fd8:	88 30       	cpi	r24, 0x08	; 8
     fda:	08 f0       	brcs	.+2      	; 0xfde <DIO_u8SetPinDirection+0x24>
     fdc:	f4 c0       	rjmp	.+488    	; 0x11c6 <DIO_u8SetPinDirection+0x20c>
	{
		if(Copy_u8Direction == DIO_PIN_INPUT)
     fde:	8c 81       	ldd	r24, Y+4	; 0x04
     fe0:	88 23       	and	r24, r24
     fe2:	09 f0       	breq	.+2      	; 0xfe6 <DIO_u8SetPinDirection+0x2c>
     fe4:	77 c0       	rjmp	.+238    	; 0x10d4 <DIO_u8SetPinDirection+0x11a>
		{
			switch(Copy_u8Port)
     fe6:	8a 81       	ldd	r24, Y+2	; 0x02
     fe8:	28 2f       	mov	r18, r24
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	38 87       	std	Y+8, r19	; 0x08
     fee:	2f 83       	std	Y+7, r18	; 0x07
     ff0:	8f 81       	ldd	r24, Y+7	; 0x07
     ff2:	98 85       	ldd	r25, Y+8	; 0x08
     ff4:	81 30       	cpi	r24, 0x01	; 1
     ff6:	91 05       	cpc	r25, r1
     ff8:	59 f1       	breq	.+86     	; 0x1050 <DIO_u8SetPinDirection+0x96>
     ffa:	2f 81       	ldd	r18, Y+7	; 0x07
     ffc:	38 85       	ldd	r19, Y+8	; 0x08
     ffe:	22 30       	cpi	r18, 0x02	; 2
    1000:	31 05       	cpc	r19, r1
    1002:	2c f4       	brge	.+10     	; 0x100e <DIO_u8SetPinDirection+0x54>
    1004:	8f 81       	ldd	r24, Y+7	; 0x07
    1006:	98 85       	ldd	r25, Y+8	; 0x08
    1008:	00 97       	sbiw	r24, 0x00	; 0
    100a:	69 f0       	breq	.+26     	; 0x1026 <DIO_u8SetPinDirection+0x6c>
    100c:	60 c0       	rjmp	.+192    	; 0x10ce <DIO_u8SetPinDirection+0x114>
    100e:	2f 81       	ldd	r18, Y+7	; 0x07
    1010:	38 85       	ldd	r19, Y+8	; 0x08
    1012:	22 30       	cpi	r18, 0x02	; 2
    1014:	31 05       	cpc	r19, r1
    1016:	89 f1       	breq	.+98     	; 0x107a <DIO_u8SetPinDirection+0xc0>
    1018:	8f 81       	ldd	r24, Y+7	; 0x07
    101a:	98 85       	ldd	r25, Y+8	; 0x08
    101c:	83 30       	cpi	r24, 0x03	; 3
    101e:	91 05       	cpc	r25, r1
    1020:	09 f4       	brne	.+2      	; 0x1024 <DIO_u8SetPinDirection+0x6a>
    1022:	40 c0       	rjmp	.+128    	; 0x10a4 <DIO_u8SetPinDirection+0xea>
    1024:	54 c0       	rjmp	.+168    	; 0x10ce <DIO_u8SetPinDirection+0x114>
			{
			case DIO_PORTA: CLR_BIT(DDRA, Copy_u8Pin); break;
    1026:	aa e3       	ldi	r26, 0x3A	; 58
    1028:	b0 e0       	ldi	r27, 0x00	; 0
    102a:	ea e3       	ldi	r30, 0x3A	; 58
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	80 81       	ld	r24, Z
    1030:	48 2f       	mov	r20, r24
    1032:	8b 81       	ldd	r24, Y+3	; 0x03
    1034:	28 2f       	mov	r18, r24
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	02 2e       	mov	r0, r18
    103e:	02 c0       	rjmp	.+4      	; 0x1044 <DIO_u8SetPinDirection+0x8a>
    1040:	88 0f       	add	r24, r24
    1042:	99 1f       	adc	r25, r25
    1044:	0a 94       	dec	r0
    1046:	e2 f7       	brpl	.-8      	; 0x1040 <DIO_u8SetPinDirection+0x86>
    1048:	80 95       	com	r24
    104a:	84 23       	and	r24, r20
    104c:	8c 93       	st	X, r24
    104e:	bd c0       	rjmp	.+378    	; 0x11ca <DIO_u8SetPinDirection+0x210>
			case DIO_PORTB:	CLR_BIT(DDRB, Copy_u8Pin); break;
    1050:	a7 e3       	ldi	r26, 0x37	; 55
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	e7 e3       	ldi	r30, 0x37	; 55
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	48 2f       	mov	r20, r24
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	28 2f       	mov	r18, r24
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	81 e0       	ldi	r24, 0x01	; 1
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	02 2e       	mov	r0, r18
    1068:	02 c0       	rjmp	.+4      	; 0x106e <DIO_u8SetPinDirection+0xb4>
    106a:	88 0f       	add	r24, r24
    106c:	99 1f       	adc	r25, r25
    106e:	0a 94       	dec	r0
    1070:	e2 f7       	brpl	.-8      	; 0x106a <DIO_u8SetPinDirection+0xb0>
    1072:	80 95       	com	r24
    1074:	84 23       	and	r24, r20
    1076:	8c 93       	st	X, r24
    1078:	a8 c0       	rjmp	.+336    	; 0x11ca <DIO_u8SetPinDirection+0x210>
			case DIO_PORTC: CLR_BIT(DDRC, Copy_u8Pin); break;
    107a:	a4 e3       	ldi	r26, 0x34	; 52
    107c:	b0 e0       	ldi	r27, 0x00	; 0
    107e:	e4 e3       	ldi	r30, 0x34	; 52
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	80 81       	ld	r24, Z
    1084:	48 2f       	mov	r20, r24
    1086:	8b 81       	ldd	r24, Y+3	; 0x03
    1088:	28 2f       	mov	r18, r24
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	81 e0       	ldi	r24, 0x01	; 1
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	02 2e       	mov	r0, r18
    1092:	02 c0       	rjmp	.+4      	; 0x1098 <DIO_u8SetPinDirection+0xde>
    1094:	88 0f       	add	r24, r24
    1096:	99 1f       	adc	r25, r25
    1098:	0a 94       	dec	r0
    109a:	e2 f7       	brpl	.-8      	; 0x1094 <DIO_u8SetPinDirection+0xda>
    109c:	80 95       	com	r24
    109e:	84 23       	and	r24, r20
    10a0:	8c 93       	st	X, r24
    10a2:	93 c0       	rjmp	.+294    	; 0x11ca <DIO_u8SetPinDirection+0x210>
			case DIO_PORTD: CLR_BIT(DDRD, Copy_u8Pin); break;
    10a4:	a1 e3       	ldi	r26, 0x31	; 49
    10a6:	b0 e0       	ldi	r27, 0x00	; 0
    10a8:	e1 e3       	ldi	r30, 0x31	; 49
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	80 81       	ld	r24, Z
    10ae:	48 2f       	mov	r20, r24
    10b0:	8b 81       	ldd	r24, Y+3	; 0x03
    10b2:	28 2f       	mov	r18, r24
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	02 2e       	mov	r0, r18
    10bc:	02 c0       	rjmp	.+4      	; 0x10c2 <DIO_u8SetPinDirection+0x108>
    10be:	88 0f       	add	r24, r24
    10c0:	99 1f       	adc	r25, r25
    10c2:	0a 94       	dec	r0
    10c4:	e2 f7       	brpl	.-8      	; 0x10be <DIO_u8SetPinDirection+0x104>
    10c6:	80 95       	com	r24
    10c8:	84 23       	and	r24, r20
    10ca:	8c 93       	st	X, r24
    10cc:	7e c0       	rjmp	.+252    	; 0x11ca <DIO_u8SetPinDirection+0x210>
			default: Local_u8RunState = DIO_ERROR;
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	89 83       	std	Y+1, r24	; 0x01
    10d2:	7b c0       	rjmp	.+246    	; 0x11ca <DIO_u8SetPinDirection+0x210>
			}
		}
		else if(Copy_u8Direction == DIO_PIN_OUTPUT)
    10d4:	8c 81       	ldd	r24, Y+4	; 0x04
    10d6:	81 30       	cpi	r24, 0x01	; 1
    10d8:	09 f0       	breq	.+2      	; 0x10dc <DIO_u8SetPinDirection+0x122>
    10da:	72 c0       	rjmp	.+228    	; 0x11c0 <DIO_u8SetPinDirection+0x206>
		{
			switch(Copy_u8Port)
    10dc:	8a 81       	ldd	r24, Y+2	; 0x02
    10de:	28 2f       	mov	r18, r24
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	3e 83       	std	Y+6, r19	; 0x06
    10e4:	2d 83       	std	Y+5, r18	; 0x05
    10e6:	8d 81       	ldd	r24, Y+5	; 0x05
    10e8:	9e 81       	ldd	r25, Y+6	; 0x06
    10ea:	81 30       	cpi	r24, 0x01	; 1
    10ec:	91 05       	cpc	r25, r1
    10ee:	49 f1       	breq	.+82     	; 0x1142 <DIO_u8SetPinDirection+0x188>
    10f0:	2d 81       	ldd	r18, Y+5	; 0x05
    10f2:	3e 81       	ldd	r19, Y+6	; 0x06
    10f4:	22 30       	cpi	r18, 0x02	; 2
    10f6:	31 05       	cpc	r19, r1
    10f8:	2c f4       	brge	.+10     	; 0x1104 <DIO_u8SetPinDirection+0x14a>
    10fa:	8d 81       	ldd	r24, Y+5	; 0x05
    10fc:	9e 81       	ldd	r25, Y+6	; 0x06
    10fe:	00 97       	sbiw	r24, 0x00	; 0
    1100:	61 f0       	breq	.+24     	; 0x111a <DIO_u8SetPinDirection+0x160>
    1102:	5b c0       	rjmp	.+182    	; 0x11ba <DIO_u8SetPinDirection+0x200>
    1104:	2d 81       	ldd	r18, Y+5	; 0x05
    1106:	3e 81       	ldd	r19, Y+6	; 0x06
    1108:	22 30       	cpi	r18, 0x02	; 2
    110a:	31 05       	cpc	r19, r1
    110c:	71 f1       	breq	.+92     	; 0x116a <DIO_u8SetPinDirection+0x1b0>
    110e:	8d 81       	ldd	r24, Y+5	; 0x05
    1110:	9e 81       	ldd	r25, Y+6	; 0x06
    1112:	83 30       	cpi	r24, 0x03	; 3
    1114:	91 05       	cpc	r25, r1
    1116:	e9 f1       	breq	.+122    	; 0x1192 <DIO_u8SetPinDirection+0x1d8>
    1118:	50 c0       	rjmp	.+160    	; 0x11ba <DIO_u8SetPinDirection+0x200>
			{
			case DIO_PORTA: SET_BIT(DDRA, Copy_u8Pin); break;
    111a:	aa e3       	ldi	r26, 0x3A	; 58
    111c:	b0 e0       	ldi	r27, 0x00	; 0
    111e:	ea e3       	ldi	r30, 0x3A	; 58
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	80 81       	ld	r24, Z
    1124:	48 2f       	mov	r20, r24
    1126:	8b 81       	ldd	r24, Y+3	; 0x03
    1128:	28 2f       	mov	r18, r24
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	81 e0       	ldi	r24, 0x01	; 1
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	02 2e       	mov	r0, r18
    1132:	02 c0       	rjmp	.+4      	; 0x1138 <DIO_u8SetPinDirection+0x17e>
    1134:	88 0f       	add	r24, r24
    1136:	99 1f       	adc	r25, r25
    1138:	0a 94       	dec	r0
    113a:	e2 f7       	brpl	.-8      	; 0x1134 <DIO_u8SetPinDirection+0x17a>
    113c:	84 2b       	or	r24, r20
    113e:	8c 93       	st	X, r24
    1140:	44 c0       	rjmp	.+136    	; 0x11ca <DIO_u8SetPinDirection+0x210>
			case DIO_PORTB:	SET_BIT(DDRB, Copy_u8Pin); break;
    1142:	a7 e3       	ldi	r26, 0x37	; 55
    1144:	b0 e0       	ldi	r27, 0x00	; 0
    1146:	e7 e3       	ldi	r30, 0x37	; 55
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	80 81       	ld	r24, Z
    114c:	48 2f       	mov	r20, r24
    114e:	8b 81       	ldd	r24, Y+3	; 0x03
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	81 e0       	ldi	r24, 0x01	; 1
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	02 2e       	mov	r0, r18
    115a:	02 c0       	rjmp	.+4      	; 0x1160 <DIO_u8SetPinDirection+0x1a6>
    115c:	88 0f       	add	r24, r24
    115e:	99 1f       	adc	r25, r25
    1160:	0a 94       	dec	r0
    1162:	e2 f7       	brpl	.-8      	; 0x115c <DIO_u8SetPinDirection+0x1a2>
    1164:	84 2b       	or	r24, r20
    1166:	8c 93       	st	X, r24
    1168:	30 c0       	rjmp	.+96     	; 0x11ca <DIO_u8SetPinDirection+0x210>
			case DIO_PORTC: SET_BIT(DDRC, Copy_u8Pin); break;
    116a:	a4 e3       	ldi	r26, 0x34	; 52
    116c:	b0 e0       	ldi	r27, 0x00	; 0
    116e:	e4 e3       	ldi	r30, 0x34	; 52
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	48 2f       	mov	r20, r24
    1176:	8b 81       	ldd	r24, Y+3	; 0x03
    1178:	28 2f       	mov	r18, r24
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	02 2e       	mov	r0, r18
    1182:	02 c0       	rjmp	.+4      	; 0x1188 <DIO_u8SetPinDirection+0x1ce>
    1184:	88 0f       	add	r24, r24
    1186:	99 1f       	adc	r25, r25
    1188:	0a 94       	dec	r0
    118a:	e2 f7       	brpl	.-8      	; 0x1184 <DIO_u8SetPinDirection+0x1ca>
    118c:	84 2b       	or	r24, r20
    118e:	8c 93       	st	X, r24
    1190:	1c c0       	rjmp	.+56     	; 0x11ca <DIO_u8SetPinDirection+0x210>
			case DIO_PORTD: SET_BIT(DDRD, Copy_u8Pin); break;
    1192:	a1 e3       	ldi	r26, 0x31	; 49
    1194:	b0 e0       	ldi	r27, 0x00	; 0
    1196:	e1 e3       	ldi	r30, 0x31	; 49
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	48 2f       	mov	r20, r24
    119e:	8b 81       	ldd	r24, Y+3	; 0x03
    11a0:	28 2f       	mov	r18, r24
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	81 e0       	ldi	r24, 0x01	; 1
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	02 2e       	mov	r0, r18
    11aa:	02 c0       	rjmp	.+4      	; 0x11b0 <DIO_u8SetPinDirection+0x1f6>
    11ac:	88 0f       	add	r24, r24
    11ae:	99 1f       	adc	r25, r25
    11b0:	0a 94       	dec	r0
    11b2:	e2 f7       	brpl	.-8      	; 0x11ac <DIO_u8SetPinDirection+0x1f2>
    11b4:	84 2b       	or	r24, r20
    11b6:	8c 93       	st	X, r24
    11b8:	08 c0       	rjmp	.+16     	; 0x11ca <DIO_u8SetPinDirection+0x210>
			default: Local_u8RunState = DIO_ERROR;
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	89 83       	std	Y+1, r24	; 0x01
    11be:	05 c0       	rjmp	.+10     	; 0x11ca <DIO_u8SetPinDirection+0x210>
			}
		}
		else
		{
			Local_u8RunState = DIO_ERROR;
    11c0:	81 e0       	ldi	r24, 0x01	; 1
    11c2:	89 83       	std	Y+1, r24	; 0x01
    11c4:	02 c0       	rjmp	.+4      	; 0x11ca <DIO_u8SetPinDirection+0x210>
		}
	}
	else
	{
		Local_u8RunState = DIO_ERROR;
    11c6:	81 e0       	ldi	r24, 0x01	; 1
    11c8:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8RunState;
    11ca:	89 81       	ldd	r24, Y+1	; 0x01
}
    11cc:	28 96       	adiw	r28, 0x08	; 8
    11ce:	0f b6       	in	r0, 0x3f	; 63
    11d0:	f8 94       	cli
    11d2:	de bf       	out	0x3e, r29	; 62
    11d4:	0f be       	out	0x3f, r0	; 63
    11d6:	cd bf       	out	0x3d, r28	; 61
    11d8:	cf 91       	pop	r28
    11da:	df 91       	pop	r29
    11dc:	08 95       	ret

000011de <DIO_u8SetPinValue>:


u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
    11de:	df 93       	push	r29
    11e0:	cf 93       	push	r28
    11e2:	cd b7       	in	r28, 0x3d	; 61
    11e4:	de b7       	in	r29, 0x3e	; 62
    11e6:	28 97       	sbiw	r28, 0x08	; 8
    11e8:	0f b6       	in	r0, 0x3f	; 63
    11ea:	f8 94       	cli
    11ec:	de bf       	out	0x3e, r29	; 62
    11ee:	0f be       	out	0x3f, r0	; 63
    11f0:	cd bf       	out	0x3d, r28	; 61
    11f2:	8a 83       	std	Y+2, r24	; 0x02
    11f4:	6b 83       	std	Y+3, r22	; 0x03
    11f6:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8RunState = DIO_OK;
    11f8:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8Pin >= DIO_PIN0) && (Copy_u8Pin <= DIO_PIN7))
    11fa:	8b 81       	ldd	r24, Y+3	; 0x03
    11fc:	88 30       	cpi	r24, 0x08	; 8
    11fe:	08 f0       	brcs	.+2      	; 0x1202 <DIO_u8SetPinValue+0x24>
    1200:	f4 c0       	rjmp	.+488    	; 0x13ea <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value == DIO_PIN_LOW)
    1202:	8c 81       	ldd	r24, Y+4	; 0x04
    1204:	88 23       	and	r24, r24
    1206:	09 f0       	breq	.+2      	; 0x120a <DIO_u8SetPinValue+0x2c>
    1208:	77 c0       	rjmp	.+238    	; 0x12f8 <DIO_u8SetPinValue+0x11a>
		{
			switch(Copy_u8Port)
    120a:	8a 81       	ldd	r24, Y+2	; 0x02
    120c:	28 2f       	mov	r18, r24
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	38 87       	std	Y+8, r19	; 0x08
    1212:	2f 83       	std	Y+7, r18	; 0x07
    1214:	8f 81       	ldd	r24, Y+7	; 0x07
    1216:	98 85       	ldd	r25, Y+8	; 0x08
    1218:	81 30       	cpi	r24, 0x01	; 1
    121a:	91 05       	cpc	r25, r1
    121c:	59 f1       	breq	.+86     	; 0x1274 <DIO_u8SetPinValue+0x96>
    121e:	2f 81       	ldd	r18, Y+7	; 0x07
    1220:	38 85       	ldd	r19, Y+8	; 0x08
    1222:	22 30       	cpi	r18, 0x02	; 2
    1224:	31 05       	cpc	r19, r1
    1226:	2c f4       	brge	.+10     	; 0x1232 <DIO_u8SetPinValue+0x54>
    1228:	8f 81       	ldd	r24, Y+7	; 0x07
    122a:	98 85       	ldd	r25, Y+8	; 0x08
    122c:	00 97       	sbiw	r24, 0x00	; 0
    122e:	69 f0       	breq	.+26     	; 0x124a <DIO_u8SetPinValue+0x6c>
    1230:	60 c0       	rjmp	.+192    	; 0x12f2 <DIO_u8SetPinValue+0x114>
    1232:	2f 81       	ldd	r18, Y+7	; 0x07
    1234:	38 85       	ldd	r19, Y+8	; 0x08
    1236:	22 30       	cpi	r18, 0x02	; 2
    1238:	31 05       	cpc	r19, r1
    123a:	89 f1       	breq	.+98     	; 0x129e <DIO_u8SetPinValue+0xc0>
    123c:	8f 81       	ldd	r24, Y+7	; 0x07
    123e:	98 85       	ldd	r25, Y+8	; 0x08
    1240:	83 30       	cpi	r24, 0x03	; 3
    1242:	91 05       	cpc	r25, r1
    1244:	09 f4       	brne	.+2      	; 0x1248 <DIO_u8SetPinValue+0x6a>
    1246:	40 c0       	rjmp	.+128    	; 0x12c8 <DIO_u8SetPinValue+0xea>
    1248:	54 c0       	rjmp	.+168    	; 0x12f2 <DIO_u8SetPinValue+0x114>
			{
			case DIO_PORTA: CLR_BIT(PORTA, Copy_u8Pin); break;
    124a:	ab e3       	ldi	r26, 0x3B	; 59
    124c:	b0 e0       	ldi	r27, 0x00	; 0
    124e:	eb e3       	ldi	r30, 0x3B	; 59
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	80 81       	ld	r24, Z
    1254:	48 2f       	mov	r20, r24
    1256:	8b 81       	ldd	r24, Y+3	; 0x03
    1258:	28 2f       	mov	r18, r24
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	02 2e       	mov	r0, r18
    1262:	02 c0       	rjmp	.+4      	; 0x1268 <DIO_u8SetPinValue+0x8a>
    1264:	88 0f       	add	r24, r24
    1266:	99 1f       	adc	r25, r25
    1268:	0a 94       	dec	r0
    126a:	e2 f7       	brpl	.-8      	; 0x1264 <DIO_u8SetPinValue+0x86>
    126c:	80 95       	com	r24
    126e:	84 23       	and	r24, r20
    1270:	8c 93       	st	X, r24
    1272:	bd c0       	rjmp	.+378    	; 0x13ee <DIO_u8SetPinValue+0x210>
			case DIO_PORTB:	CLR_BIT(PORTB, Copy_u8Pin); break;
    1274:	a8 e3       	ldi	r26, 0x38	; 56
    1276:	b0 e0       	ldi	r27, 0x00	; 0
    1278:	e8 e3       	ldi	r30, 0x38	; 56
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	80 81       	ld	r24, Z
    127e:	48 2f       	mov	r20, r24
    1280:	8b 81       	ldd	r24, Y+3	; 0x03
    1282:	28 2f       	mov	r18, r24
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	81 e0       	ldi	r24, 0x01	; 1
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	02 2e       	mov	r0, r18
    128c:	02 c0       	rjmp	.+4      	; 0x1292 <DIO_u8SetPinValue+0xb4>
    128e:	88 0f       	add	r24, r24
    1290:	99 1f       	adc	r25, r25
    1292:	0a 94       	dec	r0
    1294:	e2 f7       	brpl	.-8      	; 0x128e <DIO_u8SetPinValue+0xb0>
    1296:	80 95       	com	r24
    1298:	84 23       	and	r24, r20
    129a:	8c 93       	st	X, r24
    129c:	a8 c0       	rjmp	.+336    	; 0x13ee <DIO_u8SetPinValue+0x210>
			case DIO_PORTC: CLR_BIT(PORTC, Copy_u8Pin); break;
    129e:	a5 e3       	ldi	r26, 0x35	; 53
    12a0:	b0 e0       	ldi	r27, 0x00	; 0
    12a2:	e5 e3       	ldi	r30, 0x35	; 53
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	80 81       	ld	r24, Z
    12a8:	48 2f       	mov	r20, r24
    12aa:	8b 81       	ldd	r24, Y+3	; 0x03
    12ac:	28 2f       	mov	r18, r24
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	02 2e       	mov	r0, r18
    12b6:	02 c0       	rjmp	.+4      	; 0x12bc <DIO_u8SetPinValue+0xde>
    12b8:	88 0f       	add	r24, r24
    12ba:	99 1f       	adc	r25, r25
    12bc:	0a 94       	dec	r0
    12be:	e2 f7       	brpl	.-8      	; 0x12b8 <DIO_u8SetPinValue+0xda>
    12c0:	80 95       	com	r24
    12c2:	84 23       	and	r24, r20
    12c4:	8c 93       	st	X, r24
    12c6:	93 c0       	rjmp	.+294    	; 0x13ee <DIO_u8SetPinValue+0x210>
			case DIO_PORTD: CLR_BIT(PORTD, Copy_u8Pin); break;
    12c8:	a2 e3       	ldi	r26, 0x32	; 50
    12ca:	b0 e0       	ldi	r27, 0x00	; 0
    12cc:	e2 e3       	ldi	r30, 0x32	; 50
    12ce:	f0 e0       	ldi	r31, 0x00	; 0
    12d0:	80 81       	ld	r24, Z
    12d2:	48 2f       	mov	r20, r24
    12d4:	8b 81       	ldd	r24, Y+3	; 0x03
    12d6:	28 2f       	mov	r18, r24
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	81 e0       	ldi	r24, 0x01	; 1
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	02 2e       	mov	r0, r18
    12e0:	02 c0       	rjmp	.+4      	; 0x12e6 <DIO_u8SetPinValue+0x108>
    12e2:	88 0f       	add	r24, r24
    12e4:	99 1f       	adc	r25, r25
    12e6:	0a 94       	dec	r0
    12e8:	e2 f7       	brpl	.-8      	; 0x12e2 <DIO_u8SetPinValue+0x104>
    12ea:	80 95       	com	r24
    12ec:	84 23       	and	r24, r20
    12ee:	8c 93       	st	X, r24
    12f0:	7e c0       	rjmp	.+252    	; 0x13ee <DIO_u8SetPinValue+0x210>
			default: Local_u8RunState = DIO_ERROR;
    12f2:	81 e0       	ldi	r24, 0x01	; 1
    12f4:	89 83       	std	Y+1, r24	; 0x01
    12f6:	7b c0       	rjmp	.+246    	; 0x13ee <DIO_u8SetPinValue+0x210>
			}
		}
		else if(Copy_u8Value == DIO_PIN_HIGH)
    12f8:	8c 81       	ldd	r24, Y+4	; 0x04
    12fa:	81 30       	cpi	r24, 0x01	; 1
    12fc:	09 f0       	breq	.+2      	; 0x1300 <DIO_u8SetPinValue+0x122>
    12fe:	72 c0       	rjmp	.+228    	; 0x13e4 <DIO_u8SetPinValue+0x206>
		{
			switch(Copy_u8Port)
    1300:	8a 81       	ldd	r24, Y+2	; 0x02
    1302:	28 2f       	mov	r18, r24
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	3e 83       	std	Y+6, r19	; 0x06
    1308:	2d 83       	std	Y+5, r18	; 0x05
    130a:	8d 81       	ldd	r24, Y+5	; 0x05
    130c:	9e 81       	ldd	r25, Y+6	; 0x06
    130e:	81 30       	cpi	r24, 0x01	; 1
    1310:	91 05       	cpc	r25, r1
    1312:	49 f1       	breq	.+82     	; 0x1366 <DIO_u8SetPinValue+0x188>
    1314:	2d 81       	ldd	r18, Y+5	; 0x05
    1316:	3e 81       	ldd	r19, Y+6	; 0x06
    1318:	22 30       	cpi	r18, 0x02	; 2
    131a:	31 05       	cpc	r19, r1
    131c:	2c f4       	brge	.+10     	; 0x1328 <DIO_u8SetPinValue+0x14a>
    131e:	8d 81       	ldd	r24, Y+5	; 0x05
    1320:	9e 81       	ldd	r25, Y+6	; 0x06
    1322:	00 97       	sbiw	r24, 0x00	; 0
    1324:	61 f0       	breq	.+24     	; 0x133e <DIO_u8SetPinValue+0x160>
    1326:	5b c0       	rjmp	.+182    	; 0x13de <DIO_u8SetPinValue+0x200>
    1328:	2d 81       	ldd	r18, Y+5	; 0x05
    132a:	3e 81       	ldd	r19, Y+6	; 0x06
    132c:	22 30       	cpi	r18, 0x02	; 2
    132e:	31 05       	cpc	r19, r1
    1330:	71 f1       	breq	.+92     	; 0x138e <DIO_u8SetPinValue+0x1b0>
    1332:	8d 81       	ldd	r24, Y+5	; 0x05
    1334:	9e 81       	ldd	r25, Y+6	; 0x06
    1336:	83 30       	cpi	r24, 0x03	; 3
    1338:	91 05       	cpc	r25, r1
    133a:	e9 f1       	breq	.+122    	; 0x13b6 <DIO_u8SetPinValue+0x1d8>
    133c:	50 c0       	rjmp	.+160    	; 0x13de <DIO_u8SetPinValue+0x200>
			{
			case DIO_PORTA: SET_BIT(PORTA, Copy_u8Pin); break;
    133e:	ab e3       	ldi	r26, 0x3B	; 59
    1340:	b0 e0       	ldi	r27, 0x00	; 0
    1342:	eb e3       	ldi	r30, 0x3B	; 59
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	80 81       	ld	r24, Z
    1348:	48 2f       	mov	r20, r24
    134a:	8b 81       	ldd	r24, Y+3	; 0x03
    134c:	28 2f       	mov	r18, r24
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	81 e0       	ldi	r24, 0x01	; 1
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	02 2e       	mov	r0, r18
    1356:	02 c0       	rjmp	.+4      	; 0x135c <DIO_u8SetPinValue+0x17e>
    1358:	88 0f       	add	r24, r24
    135a:	99 1f       	adc	r25, r25
    135c:	0a 94       	dec	r0
    135e:	e2 f7       	brpl	.-8      	; 0x1358 <DIO_u8SetPinValue+0x17a>
    1360:	84 2b       	or	r24, r20
    1362:	8c 93       	st	X, r24
    1364:	44 c0       	rjmp	.+136    	; 0x13ee <DIO_u8SetPinValue+0x210>
			case DIO_PORTB:	SET_BIT(PORTB, Copy_u8Pin); break;
    1366:	a8 e3       	ldi	r26, 0x38	; 56
    1368:	b0 e0       	ldi	r27, 0x00	; 0
    136a:	e8 e3       	ldi	r30, 0x38	; 56
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	80 81       	ld	r24, Z
    1370:	48 2f       	mov	r20, r24
    1372:	8b 81       	ldd	r24, Y+3	; 0x03
    1374:	28 2f       	mov	r18, r24
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	81 e0       	ldi	r24, 0x01	; 1
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	02 2e       	mov	r0, r18
    137e:	02 c0       	rjmp	.+4      	; 0x1384 <DIO_u8SetPinValue+0x1a6>
    1380:	88 0f       	add	r24, r24
    1382:	99 1f       	adc	r25, r25
    1384:	0a 94       	dec	r0
    1386:	e2 f7       	brpl	.-8      	; 0x1380 <DIO_u8SetPinValue+0x1a2>
    1388:	84 2b       	or	r24, r20
    138a:	8c 93       	st	X, r24
    138c:	30 c0       	rjmp	.+96     	; 0x13ee <DIO_u8SetPinValue+0x210>
			case DIO_PORTC: SET_BIT(PORTC, Copy_u8Pin); break;
    138e:	a5 e3       	ldi	r26, 0x35	; 53
    1390:	b0 e0       	ldi	r27, 0x00	; 0
    1392:	e5 e3       	ldi	r30, 0x35	; 53
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	80 81       	ld	r24, Z
    1398:	48 2f       	mov	r20, r24
    139a:	8b 81       	ldd	r24, Y+3	; 0x03
    139c:	28 2f       	mov	r18, r24
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	81 e0       	ldi	r24, 0x01	; 1
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	02 2e       	mov	r0, r18
    13a6:	02 c0       	rjmp	.+4      	; 0x13ac <DIO_u8SetPinValue+0x1ce>
    13a8:	88 0f       	add	r24, r24
    13aa:	99 1f       	adc	r25, r25
    13ac:	0a 94       	dec	r0
    13ae:	e2 f7       	brpl	.-8      	; 0x13a8 <DIO_u8SetPinValue+0x1ca>
    13b0:	84 2b       	or	r24, r20
    13b2:	8c 93       	st	X, r24
    13b4:	1c c0       	rjmp	.+56     	; 0x13ee <DIO_u8SetPinValue+0x210>
			case DIO_PORTD: SET_BIT(PORTD, Copy_u8Pin); break;
    13b6:	a2 e3       	ldi	r26, 0x32	; 50
    13b8:	b0 e0       	ldi	r27, 0x00	; 0
    13ba:	e2 e3       	ldi	r30, 0x32	; 50
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	80 81       	ld	r24, Z
    13c0:	48 2f       	mov	r20, r24
    13c2:	8b 81       	ldd	r24, Y+3	; 0x03
    13c4:	28 2f       	mov	r18, r24
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	81 e0       	ldi	r24, 0x01	; 1
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	02 2e       	mov	r0, r18
    13ce:	02 c0       	rjmp	.+4      	; 0x13d4 <DIO_u8SetPinValue+0x1f6>
    13d0:	88 0f       	add	r24, r24
    13d2:	99 1f       	adc	r25, r25
    13d4:	0a 94       	dec	r0
    13d6:	e2 f7       	brpl	.-8      	; 0x13d0 <DIO_u8SetPinValue+0x1f2>
    13d8:	84 2b       	or	r24, r20
    13da:	8c 93       	st	X, r24
    13dc:	08 c0       	rjmp	.+16     	; 0x13ee <DIO_u8SetPinValue+0x210>
			default: Local_u8RunState = DIO_ERROR;
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	89 83       	std	Y+1, r24	; 0x01
    13e2:	05 c0       	rjmp	.+10     	; 0x13ee <DIO_u8SetPinValue+0x210>
			}
		}
		else
		{
			Local_u8RunState = DIO_ERROR;
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	89 83       	std	Y+1, r24	; 0x01
    13e8:	02 c0       	rjmp	.+4      	; 0x13ee <DIO_u8SetPinValue+0x210>
		}
	}
	else
	{
		Local_u8RunState = DIO_ERROR;
    13ea:	81 e0       	ldi	r24, 0x01	; 1
    13ec:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8RunState;
    13ee:	89 81       	ldd	r24, Y+1	; 0x01
}
    13f0:	28 96       	adiw	r28, 0x08	; 8
    13f2:	0f b6       	in	r0, 0x3f	; 63
    13f4:	f8 94       	cli
    13f6:	de bf       	out	0x3e, r29	; 62
    13f8:	0f be       	out	0x3f, r0	; 63
    13fa:	cd bf       	out	0x3d, r28	; 61
    13fc:	cf 91       	pop	r28
    13fe:	df 91       	pop	r29
    1400:	08 95       	ret

00001402 <DIO_u8GetPinValue>:


u8 DIO_u8GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 *Copy_u8Variable)
{
    1402:	df 93       	push	r29
    1404:	cf 93       	push	r28
    1406:	cd b7       	in	r28, 0x3d	; 61
    1408:	de b7       	in	r29, 0x3e	; 62
    140a:	27 97       	sbiw	r28, 0x07	; 7
    140c:	0f b6       	in	r0, 0x3f	; 63
    140e:	f8 94       	cli
    1410:	de bf       	out	0x3e, r29	; 62
    1412:	0f be       	out	0x3f, r0	; 63
    1414:	cd bf       	out	0x3d, r28	; 61
    1416:	8a 83       	std	Y+2, r24	; 0x02
    1418:	6b 83       	std	Y+3, r22	; 0x03
    141a:	5d 83       	std	Y+5, r21	; 0x05
    141c:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8RunState = DIO_OK;
    141e:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8Pin >= DIO_PIN0) && (Copy_u8Pin <= DIO_PIN7) && (Copy_u8Variable != NULL))
    1420:	8b 81       	ldd	r24, Y+3	; 0x03
    1422:	88 30       	cpi	r24, 0x08	; 8
    1424:	08 f0       	brcs	.+2      	; 0x1428 <DIO_u8GetPinValue+0x26>
    1426:	79 c0       	rjmp	.+242    	; 0x151a <DIO_u8GetPinValue+0x118>
    1428:	8c 81       	ldd	r24, Y+4	; 0x04
    142a:	9d 81       	ldd	r25, Y+5	; 0x05
    142c:	00 97       	sbiw	r24, 0x00	; 0
    142e:	09 f4       	brne	.+2      	; 0x1432 <DIO_u8GetPinValue+0x30>
    1430:	74 c0       	rjmp	.+232    	; 0x151a <DIO_u8GetPinValue+0x118>
	{
		switch(Copy_u8Port)
    1432:	8a 81       	ldd	r24, Y+2	; 0x02
    1434:	28 2f       	mov	r18, r24
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	3f 83       	std	Y+7, r19	; 0x07
    143a:	2e 83       	std	Y+6, r18	; 0x06
    143c:	4e 81       	ldd	r20, Y+6	; 0x06
    143e:	5f 81       	ldd	r21, Y+7	; 0x07
    1440:	41 30       	cpi	r20, 0x01	; 1
    1442:	51 05       	cpc	r21, r1
    1444:	59 f1       	breq	.+86     	; 0x149c <DIO_u8GetPinValue+0x9a>
    1446:	8e 81       	ldd	r24, Y+6	; 0x06
    1448:	9f 81       	ldd	r25, Y+7	; 0x07
    144a:	82 30       	cpi	r24, 0x02	; 2
    144c:	91 05       	cpc	r25, r1
    144e:	34 f4       	brge	.+12     	; 0x145c <DIO_u8GetPinValue+0x5a>
    1450:	2e 81       	ldd	r18, Y+6	; 0x06
    1452:	3f 81       	ldd	r19, Y+7	; 0x07
    1454:	21 15       	cp	r18, r1
    1456:	31 05       	cpc	r19, r1
    1458:	69 f0       	breq	.+26     	; 0x1474 <DIO_u8GetPinValue+0x72>
    145a:	5c c0       	rjmp	.+184    	; 0x1514 <DIO_u8GetPinValue+0x112>
    145c:	4e 81       	ldd	r20, Y+6	; 0x06
    145e:	5f 81       	ldd	r21, Y+7	; 0x07
    1460:	42 30       	cpi	r20, 0x02	; 2
    1462:	51 05       	cpc	r21, r1
    1464:	79 f1       	breq	.+94     	; 0x14c4 <DIO_u8GetPinValue+0xc2>
    1466:	8e 81       	ldd	r24, Y+6	; 0x06
    1468:	9f 81       	ldd	r25, Y+7	; 0x07
    146a:	83 30       	cpi	r24, 0x03	; 3
    146c:	91 05       	cpc	r25, r1
    146e:	09 f4       	brne	.+2      	; 0x1472 <DIO_u8GetPinValue+0x70>
    1470:	3d c0       	rjmp	.+122    	; 0x14ec <DIO_u8GetPinValue+0xea>
    1472:	50 c0       	rjmp	.+160    	; 0x1514 <DIO_u8GetPinValue+0x112>
		{
		case DIO_PORTA: *Copy_u8Variable = GET_BIT(PINA, Copy_u8Pin); break;
    1474:	e9 e3       	ldi	r30, 0x39	; 57
    1476:	f0 e0       	ldi	r31, 0x00	; 0
    1478:	80 81       	ld	r24, Z
    147a:	28 2f       	mov	r18, r24
    147c:	30 e0       	ldi	r19, 0x00	; 0
    147e:	8b 81       	ldd	r24, Y+3	; 0x03
    1480:	88 2f       	mov	r24, r24
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	a9 01       	movw	r20, r18
    1486:	02 c0       	rjmp	.+4      	; 0x148c <DIO_u8GetPinValue+0x8a>
    1488:	55 95       	asr	r21
    148a:	47 95       	ror	r20
    148c:	8a 95       	dec	r24
    148e:	e2 f7       	brpl	.-8      	; 0x1488 <DIO_u8GetPinValue+0x86>
    1490:	ca 01       	movw	r24, r20
    1492:	81 70       	andi	r24, 0x01	; 1
    1494:	ec 81       	ldd	r30, Y+4	; 0x04
    1496:	fd 81       	ldd	r31, Y+5	; 0x05
    1498:	80 83       	st	Z, r24
    149a:	41 c0       	rjmp	.+130    	; 0x151e <DIO_u8GetPinValue+0x11c>
		case DIO_PORTB:	*Copy_u8Variable = GET_BIT(PINB, Copy_u8Pin); break;
    149c:	e6 e3       	ldi	r30, 0x36	; 54
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	80 81       	ld	r24, Z
    14a2:	28 2f       	mov	r18, r24
    14a4:	30 e0       	ldi	r19, 0x00	; 0
    14a6:	8b 81       	ldd	r24, Y+3	; 0x03
    14a8:	88 2f       	mov	r24, r24
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	a9 01       	movw	r20, r18
    14ae:	02 c0       	rjmp	.+4      	; 0x14b4 <DIO_u8GetPinValue+0xb2>
    14b0:	55 95       	asr	r21
    14b2:	47 95       	ror	r20
    14b4:	8a 95       	dec	r24
    14b6:	e2 f7       	brpl	.-8      	; 0x14b0 <DIO_u8GetPinValue+0xae>
    14b8:	ca 01       	movw	r24, r20
    14ba:	81 70       	andi	r24, 0x01	; 1
    14bc:	ec 81       	ldd	r30, Y+4	; 0x04
    14be:	fd 81       	ldd	r31, Y+5	; 0x05
    14c0:	80 83       	st	Z, r24
    14c2:	2d c0       	rjmp	.+90     	; 0x151e <DIO_u8GetPinValue+0x11c>
		case DIO_PORTC: *Copy_u8Variable = GET_BIT(PINC, Copy_u8Pin); break;
    14c4:	e3 e3       	ldi	r30, 0x33	; 51
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	80 81       	ld	r24, Z
    14ca:	28 2f       	mov	r18, r24
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	8b 81       	ldd	r24, Y+3	; 0x03
    14d0:	88 2f       	mov	r24, r24
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	a9 01       	movw	r20, r18
    14d6:	02 c0       	rjmp	.+4      	; 0x14dc <DIO_u8GetPinValue+0xda>
    14d8:	55 95       	asr	r21
    14da:	47 95       	ror	r20
    14dc:	8a 95       	dec	r24
    14de:	e2 f7       	brpl	.-8      	; 0x14d8 <DIO_u8GetPinValue+0xd6>
    14e0:	ca 01       	movw	r24, r20
    14e2:	81 70       	andi	r24, 0x01	; 1
    14e4:	ec 81       	ldd	r30, Y+4	; 0x04
    14e6:	fd 81       	ldd	r31, Y+5	; 0x05
    14e8:	80 83       	st	Z, r24
    14ea:	19 c0       	rjmp	.+50     	; 0x151e <DIO_u8GetPinValue+0x11c>
		case DIO_PORTD: *Copy_u8Variable = GET_BIT(PIND, Copy_u8Pin); break;
    14ec:	e0 e3       	ldi	r30, 0x30	; 48
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	80 81       	ld	r24, Z
    14f2:	28 2f       	mov	r18, r24
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	8b 81       	ldd	r24, Y+3	; 0x03
    14f8:	88 2f       	mov	r24, r24
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	a9 01       	movw	r20, r18
    14fe:	02 c0       	rjmp	.+4      	; 0x1504 <DIO_u8GetPinValue+0x102>
    1500:	55 95       	asr	r21
    1502:	47 95       	ror	r20
    1504:	8a 95       	dec	r24
    1506:	e2 f7       	brpl	.-8      	; 0x1500 <DIO_u8GetPinValue+0xfe>
    1508:	ca 01       	movw	r24, r20
    150a:	81 70       	andi	r24, 0x01	; 1
    150c:	ec 81       	ldd	r30, Y+4	; 0x04
    150e:	fd 81       	ldd	r31, Y+5	; 0x05
    1510:	80 83       	st	Z, r24
    1512:	05 c0       	rjmp	.+10     	; 0x151e <DIO_u8GetPinValue+0x11c>
		default: Local_u8RunState = DIO_ERROR;
    1514:	81 e0       	ldi	r24, 0x01	; 1
    1516:	89 83       	std	Y+1, r24	; 0x01
    1518:	02 c0       	rjmp	.+4      	; 0x151e <DIO_u8GetPinValue+0x11c>
		}
	}
	else
	{
		Local_u8RunState = DIO_ERROR;
    151a:	81 e0       	ldi	r24, 0x01	; 1
    151c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8RunState;
    151e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1520:	27 96       	adiw	r28, 0x07	; 7
    1522:	0f b6       	in	r0, 0x3f	; 63
    1524:	f8 94       	cli
    1526:	de bf       	out	0x3e, r29	; 62
    1528:	0f be       	out	0x3f, r0	; 63
    152a:	cd bf       	out	0x3d, r28	; 61
    152c:	cf 91       	pop	r28
    152e:	df 91       	pop	r29
    1530:	08 95       	ret

00001532 <DIO_u8TogglePin>:

u8 DIO_u8TogglePin(u8 Copy_u8Port, u8 Copy_u8Pin)
{
    1532:	df 93       	push	r29
    1534:	cf 93       	push	r28
    1536:	00 d0       	rcall	.+0      	; 0x1538 <DIO_u8TogglePin+0x6>
    1538:	00 d0       	rcall	.+0      	; 0x153a <DIO_u8TogglePin+0x8>
    153a:	0f 92       	push	r0
    153c:	cd b7       	in	r28, 0x3d	; 61
    153e:	de b7       	in	r29, 0x3e	; 62
    1540:	8a 83       	std	Y+2, r24	; 0x02
    1542:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8RunState = DIO_OK;
    1544:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8Pin >= DIO_PIN0) && (Copy_u8Pin <= DIO_PIN7))
    1546:	8b 81       	ldd	r24, Y+3	; 0x03
    1548:	88 30       	cpi	r24, 0x08	; 8
    154a:	08 f0       	brcs	.+2      	; 0x154e <DIO_u8TogglePin+0x1c>
    154c:	72 c0       	rjmp	.+228    	; 0x1632 <DIO_u8TogglePin+0x100>
	{
		switch(Copy_u8Port)
    154e:	8a 81       	ldd	r24, Y+2	; 0x02
    1550:	28 2f       	mov	r18, r24
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	3d 83       	std	Y+5, r19	; 0x05
    1556:	2c 83       	std	Y+4, r18	; 0x04
    1558:	8c 81       	ldd	r24, Y+4	; 0x04
    155a:	9d 81       	ldd	r25, Y+5	; 0x05
    155c:	81 30       	cpi	r24, 0x01	; 1
    155e:	91 05       	cpc	r25, r1
    1560:	49 f1       	breq	.+82     	; 0x15b4 <DIO_u8TogglePin+0x82>
    1562:	2c 81       	ldd	r18, Y+4	; 0x04
    1564:	3d 81       	ldd	r19, Y+5	; 0x05
    1566:	22 30       	cpi	r18, 0x02	; 2
    1568:	31 05       	cpc	r19, r1
    156a:	2c f4       	brge	.+10     	; 0x1576 <DIO_u8TogglePin+0x44>
    156c:	8c 81       	ldd	r24, Y+4	; 0x04
    156e:	9d 81       	ldd	r25, Y+5	; 0x05
    1570:	00 97       	sbiw	r24, 0x00	; 0
    1572:	61 f0       	breq	.+24     	; 0x158c <DIO_u8TogglePin+0x5a>
    1574:	5b c0       	rjmp	.+182    	; 0x162c <DIO_u8TogglePin+0xfa>
    1576:	2c 81       	ldd	r18, Y+4	; 0x04
    1578:	3d 81       	ldd	r19, Y+5	; 0x05
    157a:	22 30       	cpi	r18, 0x02	; 2
    157c:	31 05       	cpc	r19, r1
    157e:	71 f1       	breq	.+92     	; 0x15dc <DIO_u8TogglePin+0xaa>
    1580:	8c 81       	ldd	r24, Y+4	; 0x04
    1582:	9d 81       	ldd	r25, Y+5	; 0x05
    1584:	83 30       	cpi	r24, 0x03	; 3
    1586:	91 05       	cpc	r25, r1
    1588:	e9 f1       	breq	.+122    	; 0x1604 <DIO_u8TogglePin+0xd2>
    158a:	50 c0       	rjmp	.+160    	; 0x162c <DIO_u8TogglePin+0xfa>
		{
		case DIO_PORTA: TOG_BIT(PORTA, Copy_u8Pin); break;
    158c:	ab e3       	ldi	r26, 0x3B	; 59
    158e:	b0 e0       	ldi	r27, 0x00	; 0
    1590:	eb e3       	ldi	r30, 0x3B	; 59
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	80 81       	ld	r24, Z
    1596:	48 2f       	mov	r20, r24
    1598:	8b 81       	ldd	r24, Y+3	; 0x03
    159a:	28 2f       	mov	r18, r24
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	81 e0       	ldi	r24, 0x01	; 1
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	02 2e       	mov	r0, r18
    15a4:	02 c0       	rjmp	.+4      	; 0x15aa <DIO_u8TogglePin+0x78>
    15a6:	88 0f       	add	r24, r24
    15a8:	99 1f       	adc	r25, r25
    15aa:	0a 94       	dec	r0
    15ac:	e2 f7       	brpl	.-8      	; 0x15a6 <DIO_u8TogglePin+0x74>
    15ae:	84 27       	eor	r24, r20
    15b0:	8c 93       	st	X, r24
    15b2:	41 c0       	rjmp	.+130    	; 0x1636 <DIO_u8TogglePin+0x104>
		case DIO_PORTB:	TOG_BIT(PORTB, Copy_u8Pin); break;
    15b4:	a8 e3       	ldi	r26, 0x38	; 56
    15b6:	b0 e0       	ldi	r27, 0x00	; 0
    15b8:	e8 e3       	ldi	r30, 0x38	; 56
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	80 81       	ld	r24, Z
    15be:	48 2f       	mov	r20, r24
    15c0:	8b 81       	ldd	r24, Y+3	; 0x03
    15c2:	28 2f       	mov	r18, r24
    15c4:	30 e0       	ldi	r19, 0x00	; 0
    15c6:	81 e0       	ldi	r24, 0x01	; 1
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	02 2e       	mov	r0, r18
    15cc:	02 c0       	rjmp	.+4      	; 0x15d2 <DIO_u8TogglePin+0xa0>
    15ce:	88 0f       	add	r24, r24
    15d0:	99 1f       	adc	r25, r25
    15d2:	0a 94       	dec	r0
    15d4:	e2 f7       	brpl	.-8      	; 0x15ce <DIO_u8TogglePin+0x9c>
    15d6:	84 27       	eor	r24, r20
    15d8:	8c 93       	st	X, r24
    15da:	2d c0       	rjmp	.+90     	; 0x1636 <DIO_u8TogglePin+0x104>
		case DIO_PORTC: TOG_BIT(PORTC, Copy_u8Pin); break;
    15dc:	a5 e3       	ldi	r26, 0x35	; 53
    15de:	b0 e0       	ldi	r27, 0x00	; 0
    15e0:	e5 e3       	ldi	r30, 0x35	; 53
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	80 81       	ld	r24, Z
    15e6:	48 2f       	mov	r20, r24
    15e8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ea:	28 2f       	mov	r18, r24
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	81 e0       	ldi	r24, 0x01	; 1
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	02 2e       	mov	r0, r18
    15f4:	02 c0       	rjmp	.+4      	; 0x15fa <DIO_u8TogglePin+0xc8>
    15f6:	88 0f       	add	r24, r24
    15f8:	99 1f       	adc	r25, r25
    15fa:	0a 94       	dec	r0
    15fc:	e2 f7       	brpl	.-8      	; 0x15f6 <DIO_u8TogglePin+0xc4>
    15fe:	84 27       	eor	r24, r20
    1600:	8c 93       	st	X, r24
    1602:	19 c0       	rjmp	.+50     	; 0x1636 <DIO_u8TogglePin+0x104>
		case DIO_PORTD: TOG_BIT(PORTD, Copy_u8Pin); break;
    1604:	a2 e3       	ldi	r26, 0x32	; 50
    1606:	b0 e0       	ldi	r27, 0x00	; 0
    1608:	e2 e3       	ldi	r30, 0x32	; 50
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	80 81       	ld	r24, Z
    160e:	48 2f       	mov	r20, r24
    1610:	8b 81       	ldd	r24, Y+3	; 0x03
    1612:	28 2f       	mov	r18, r24
    1614:	30 e0       	ldi	r19, 0x00	; 0
    1616:	81 e0       	ldi	r24, 0x01	; 1
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	02 2e       	mov	r0, r18
    161c:	02 c0       	rjmp	.+4      	; 0x1622 <DIO_u8TogglePin+0xf0>
    161e:	88 0f       	add	r24, r24
    1620:	99 1f       	adc	r25, r25
    1622:	0a 94       	dec	r0
    1624:	e2 f7       	brpl	.-8      	; 0x161e <DIO_u8TogglePin+0xec>
    1626:	84 27       	eor	r24, r20
    1628:	8c 93       	st	X, r24
    162a:	05 c0       	rjmp	.+10     	; 0x1636 <DIO_u8TogglePin+0x104>
		default: Local_u8RunState = DIO_ERROR;
    162c:	81 e0       	ldi	r24, 0x01	; 1
    162e:	89 83       	std	Y+1, r24	; 0x01
    1630:	02 c0       	rjmp	.+4      	; 0x1636 <DIO_u8TogglePin+0x104>
		}
	}
	else
	{
		Local_u8RunState = DIO_ERROR;
    1632:	81 e0       	ldi	r24, 0x01	; 1
    1634:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8RunState;
    1636:	89 81       	ldd	r24, Y+1	; 0x01
}
    1638:	0f 90       	pop	r0
    163a:	0f 90       	pop	r0
    163c:	0f 90       	pop	r0
    163e:	0f 90       	pop	r0
    1640:	0f 90       	pop	r0
    1642:	cf 91       	pop	r28
    1644:	df 91       	pop	r29
    1646:	08 95       	ret

00001648 <Transisor_voidIntialization>:
#include "Transistor_private.h"
#include "Transistor_config.h"


void Transisor_voidIntialization(void)
{
    1648:	df 93       	push	r29
    164a:	cf 93       	push	r28
    164c:	cd b7       	in	r28, 0x3d	; 61
    164e:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDirection(TRANSISTOR_BASE_PORT, TRANSISTOR_BASE_PIN, DIO_PIN_OUTPUT);
    1650:	80 e0       	ldi	r24, 0x00	; 0
    1652:	60 e0       	ldi	r22, 0x00	; 0
    1654:	41 e0       	ldi	r20, 0x01	; 1
    1656:	0e 94 dd 07 	call	0xfba	; 0xfba <DIO_u8SetPinDirection>
}
    165a:	cf 91       	pop	r28
    165c:	df 91       	pop	r29
    165e:	08 95       	ret

00001660 <Transisor_voidSaturationMode>:

void Transisor_voidSaturationMode(void)
{
    1660:	df 93       	push	r29
    1662:	cf 93       	push	r28
    1664:	cd b7       	in	r28, 0x3d	; 61
    1666:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(TRANSISTOR_BASE_PORT, TRANSISTOR_BASE_PIN, DIO_PIN_HIGH);
    1668:	80 e0       	ldi	r24, 0x00	; 0
    166a:	60 e0       	ldi	r22, 0x00	; 0
    166c:	41 e0       	ldi	r20, 0x01	; 1
    166e:	0e 94 ef 08 	call	0x11de	; 0x11de <DIO_u8SetPinValue>
}
    1672:	cf 91       	pop	r28
    1674:	df 91       	pop	r29
    1676:	08 95       	ret

00001678 <Transisor_voidCutOffMode>:

void Transisor_voidCutOffMode(void)
{
    1678:	df 93       	push	r29
    167a:	cf 93       	push	r28
    167c:	cd b7       	in	r28, 0x3d	; 61
    167e:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(TRANSISTOR_BASE_PORT, TRANSISTOR_BASE_PIN, DIO_PIN_LOW);
    1680:	80 e0       	ldi	r24, 0x00	; 0
    1682:	60 e0       	ldi	r22, 0x00	; 0
    1684:	40 e0       	ldi	r20, 0x00	; 0
    1686:	0e 94 ef 08 	call	0x11de	; 0x11de <DIO_u8SetPinValue>
}
    168a:	cf 91       	pop	r28
    168c:	df 91       	pop	r29
    168e:	08 95       	ret

00001690 <SSD_u8SetNumber>:
#include "SSD_interface.h"
#include "SSD_private.h"
#include "SSD_config.h"

u8 SSD_u8SetNumber(u8 Copy_u8Number, SSD_t *Copy_pSSD_tElements)
{
    1690:	df 93       	push	r29
    1692:	cf 93       	push	r28
    1694:	cd b7       	in	r28, 0x3d	; 61
    1696:	de b7       	in	r29, 0x3e	; 62
    1698:	63 97       	sbiw	r28, 0x13	; 19
    169a:	0f b6       	in	r0, 0x3f	; 63
    169c:	f8 94       	cli
    169e:	de bf       	out	0x3e, r29	; 62
    16a0:	0f be       	out	0x3f, r0	; 63
    16a2:	cd bf       	out	0x3d, r28	; 61
    16a4:	8c 87       	std	Y+12, r24	; 0x0c
    16a6:	7e 87       	std	Y+14, r23	; 0x0e
    16a8:	6d 87       	std	Y+13, r22	; 0x0d
	u8 Local_u8ErrorState = 0;
    16aa:	19 82       	std	Y+1, r1	; 0x01
	u8 Local_u8ArrayOfNumbers[10] = {0b00111111, 0b00000110, 0b01011011, 0b01001111, 0b01100110,
								0b01101101, 0b01111101, 0b00000111, 0b01111111, 0b01101111};
    16ac:	ce 01       	movw	r24, r28
    16ae:	02 96       	adiw	r24, 0x02	; 2
    16b0:	98 8b       	std	Y+16, r25	; 0x10
    16b2:	8f 87       	std	Y+15, r24	; 0x0f
    16b4:	e8 e6       	ldi	r30, 0x68	; 104
    16b6:	f0 e0       	ldi	r31, 0x00	; 0
    16b8:	fa 8b       	std	Y+18, r31	; 0x12
    16ba:	e9 8b       	std	Y+17, r30	; 0x11
    16bc:	fa e0       	ldi	r31, 0x0A	; 10
    16be:	fb 8b       	std	Y+19, r31	; 0x13
    16c0:	e9 89       	ldd	r30, Y+17	; 0x11
    16c2:	fa 89       	ldd	r31, Y+18	; 0x12
    16c4:	00 80       	ld	r0, Z
    16c6:	89 89       	ldd	r24, Y+17	; 0x11
    16c8:	9a 89       	ldd	r25, Y+18	; 0x12
    16ca:	01 96       	adiw	r24, 0x01	; 1
    16cc:	9a 8b       	std	Y+18, r25	; 0x12
    16ce:	89 8b       	std	Y+17, r24	; 0x11
    16d0:	ef 85       	ldd	r30, Y+15	; 0x0f
    16d2:	f8 89       	ldd	r31, Y+16	; 0x10
    16d4:	00 82       	st	Z, r0
    16d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    16d8:	98 89       	ldd	r25, Y+16	; 0x10
    16da:	01 96       	adiw	r24, 0x01	; 1
    16dc:	98 8b       	std	Y+16, r25	; 0x10
    16de:	8f 87       	std	Y+15, r24	; 0x0f
    16e0:	9b 89       	ldd	r25, Y+19	; 0x13
    16e2:	91 50       	subi	r25, 0x01	; 1
    16e4:	9b 8b       	std	Y+19, r25	; 0x13
    16e6:	eb 89       	ldd	r30, Y+19	; 0x13
    16e8:	ee 23       	and	r30, r30
    16ea:	51 f7       	brne	.-44     	; 0x16c0 <SSD_u8SetNumber+0x30>

	if(Copy_pSSD_tElements != 0)
    16ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    16ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    16f0:	00 97       	sbiw	r24, 0x00	; 0
    16f2:	09 f4       	brne	.+2      	; 0x16f6 <SSD_u8SetNumber+0x66>
    16f4:	5b c0       	rjmp	.+182    	; 0x17ac <SSD_u8SetNumber+0x11c>
	{
		if(Copy_pSSD_tElements->u8CommonType == ANODE)
    16f6:	ed 85       	ldd	r30, Y+13	; 0x0d
    16f8:	fe 85       	ldd	r31, Y+14	; 0x0e
    16fa:	80 81       	ld	r24, Z
    16fc:	88 23       	and	r24, r24
    16fe:	69 f5       	brne	.+90     	; 0x175a <SSD_u8SetNumber+0xca>
		{
			DIO_u8SetPinDirection(Copy_pSSD_tElements->u8EnablePort, Copy_pSSD_tElements->u8EnablePin, DIO_PIN_OUTPUT);
    1700:	ed 85       	ldd	r30, Y+13	; 0x0d
    1702:	fe 85       	ldd	r31, Y+14	; 0x0e
    1704:	82 81       	ldd	r24, Z+2	; 0x02
    1706:	ed 85       	ldd	r30, Y+13	; 0x0d
    1708:	fe 85       	ldd	r31, Y+14	; 0x0e
    170a:	93 81       	ldd	r25, Z+3	; 0x03
    170c:	69 2f       	mov	r22, r25
    170e:	41 e0       	ldi	r20, 0x01	; 1
    1710:	0e 94 dd 07 	call	0xfba	; 0xfba <DIO_u8SetPinDirection>
			DIO_u8SetPinValue(Copy_pSSD_tElements->u8EnablePort, Copy_pSSD_tElements->u8EnablePin, DIO_PIN_HIGH);
    1714:	ed 85       	ldd	r30, Y+13	; 0x0d
    1716:	fe 85       	ldd	r31, Y+14	; 0x0e
    1718:	82 81       	ldd	r24, Z+2	; 0x02
    171a:	ed 85       	ldd	r30, Y+13	; 0x0d
    171c:	fe 85       	ldd	r31, Y+14	; 0x0e
    171e:	93 81       	ldd	r25, Z+3	; 0x03
    1720:	69 2f       	mov	r22, r25
    1722:	41 e0       	ldi	r20, 0x01	; 1
    1724:	0e 94 ef 08 	call	0x11de	; 0x11de <DIO_u8SetPinValue>
			DIO_u8SetPortDirection(Copy_pSSD_tElements->u8Port, DIO_PORT_OUTPUT);
    1728:	ed 85       	ldd	r30, Y+13	; 0x0d
    172a:	fe 85       	ldd	r31, Y+14	; 0x0e
    172c:	81 81       	ldd	r24, Z+1	; 0x01
    172e:	6f ef       	ldi	r22, 0xFF	; 255
    1730:	0e 94 f3 06 	call	0xde6	; 0xde6 <DIO_u8SetPortDirection>
			DIO_u8SetPortValue(Copy_pSSD_tElements->u8Port, ~(Local_u8ArrayOfNumbers[Copy_u8Number]));
    1734:	ed 85       	ldd	r30, Y+13	; 0x0d
    1736:	fe 85       	ldd	r31, Y+14	; 0x0e
    1738:	41 81       	ldd	r20, Z+1	; 0x01
    173a:	8c 85       	ldd	r24, Y+12	; 0x0c
    173c:	28 2f       	mov	r18, r24
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	ce 01       	movw	r24, r28
    1742:	02 96       	adiw	r24, 0x02	; 2
    1744:	fc 01       	movw	r30, r24
    1746:	e2 0f       	add	r30, r18
    1748:	f3 1f       	adc	r31, r19
    174a:	80 81       	ld	r24, Z
    174c:	98 2f       	mov	r25, r24
    174e:	90 95       	com	r25
    1750:	84 2f       	mov	r24, r20
    1752:	69 2f       	mov	r22, r25
    1754:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_u8SetPortValue>
    1758:	2b c0       	rjmp	.+86     	; 0x17b0 <SSD_u8SetNumber+0x120>
		}
		else if(Copy_pSSD_tElements->u8CommonType == CATHODE)
    175a:	ed 85       	ldd	r30, Y+13	; 0x0d
    175c:	fe 85       	ldd	r31, Y+14	; 0x0e
    175e:	80 81       	ld	r24, Z
    1760:	81 30       	cpi	r24, 0x01	; 1
    1762:	09 f5       	brne	.+66     	; 0x17a6 <SSD_u8SetNumber+0x116>
		{
			DIO_u8SetPinDirection(Copy_pSSD_tElements->u8EnablePort, Copy_pSSD_tElements->u8EnablePin, DIO_PIN_INPUT);
    1764:	ed 85       	ldd	r30, Y+13	; 0x0d
    1766:	fe 85       	ldd	r31, Y+14	; 0x0e
    1768:	82 81       	ldd	r24, Z+2	; 0x02
    176a:	ed 85       	ldd	r30, Y+13	; 0x0d
    176c:	fe 85       	ldd	r31, Y+14	; 0x0e
    176e:	93 81       	ldd	r25, Z+3	; 0x03
    1770:	69 2f       	mov	r22, r25
    1772:	40 e0       	ldi	r20, 0x00	; 0
    1774:	0e 94 dd 07 	call	0xfba	; 0xfba <DIO_u8SetPinDirection>
			DIO_u8SetPortDirection(Copy_pSSD_tElements->u8Port, DIO_PORT_OUTPUT);
    1778:	ed 85       	ldd	r30, Y+13	; 0x0d
    177a:	fe 85       	ldd	r31, Y+14	; 0x0e
    177c:	81 81       	ldd	r24, Z+1	; 0x01
    177e:	6f ef       	ldi	r22, 0xFF	; 255
    1780:	0e 94 f3 06 	call	0xde6	; 0xde6 <DIO_u8SetPortDirection>
			DIO_u8SetPortValue(Copy_pSSD_tElements->u8Port, Local_u8ArrayOfNumbers[Copy_u8Number]);
    1784:	ed 85       	ldd	r30, Y+13	; 0x0d
    1786:	fe 85       	ldd	r31, Y+14	; 0x0e
    1788:	41 81       	ldd	r20, Z+1	; 0x01
    178a:	8c 85       	ldd	r24, Y+12	; 0x0c
    178c:	28 2f       	mov	r18, r24
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	ce 01       	movw	r24, r28
    1792:	02 96       	adiw	r24, 0x02	; 2
    1794:	fc 01       	movw	r30, r24
    1796:	e2 0f       	add	r30, r18
    1798:	f3 1f       	adc	r31, r19
    179a:	90 81       	ld	r25, Z
    179c:	84 2f       	mov	r24, r20
    179e:	69 2f       	mov	r22, r25
    17a0:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_u8SetPortValue>
    17a4:	05 c0       	rjmp	.+10     	; 0x17b0 <SSD_u8SetNumber+0x120>
		}
		else
		{
			Local_u8ErrorState = 1;
    17a6:	81 e0       	ldi	r24, 0x01	; 1
    17a8:	89 83       	std	Y+1, r24	; 0x01
    17aa:	02 c0       	rjmp	.+4      	; 0x17b0 <SSD_u8SetNumber+0x120>
		}
	}
	else
	{
		Local_u8ErrorState = 1;
    17ac:	81 e0       	ldi	r24, 0x01	; 1
    17ae:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_u8ErrorState;
    17b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    17b2:	63 96       	adiw	r28, 0x13	; 19
    17b4:	0f b6       	in	r0, 0x3f	; 63
    17b6:	f8 94       	cli
    17b8:	de bf       	out	0x3e, r29	; 62
    17ba:	0f be       	out	0x3f, r0	; 63
    17bc:	cd bf       	out	0x3d, r28	; 61
    17be:	cf 91       	pop	r28
    17c0:	df 91       	pop	r29
    17c2:	08 95       	ret

000017c4 <Relay_voidIntialization>:
#include "Relay_private.h"
#include "Relay_config.h"


void Relay_voidIntialization(void)
{
    17c4:	df 93       	push	r29
    17c6:	cf 93       	push	r28
    17c8:	cd b7       	in	r28, 0x3d	; 61
    17ca:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDirection(RELAY_PORT, RELAY_PIN, DIO_PIN_OUTPUT);
    17cc:	80 e0       	ldi	r24, 0x00	; 0
    17ce:	60 e0       	ldi	r22, 0x00	; 0
    17d0:	41 e0       	ldi	r20, 0x01	; 1
    17d2:	0e 94 dd 07 	call	0xfba	; 0xfba <DIO_u8SetPinDirection>
}
    17d6:	cf 91       	pop	r28
    17d8:	df 91       	pop	r29
    17da:	08 95       	ret

000017dc <Relay_voidNormallyClose>:

void Relay_voidNormallyClose(void)
{
    17dc:	df 93       	push	r29
    17de:	cf 93       	push	r28
    17e0:	cd b7       	in	r28, 0x3d	; 61
    17e2:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(RELAY_PORT, RELAY_PIN, DIO_PIN_LOW);
    17e4:	80 e0       	ldi	r24, 0x00	; 0
    17e6:	60 e0       	ldi	r22, 0x00	; 0
    17e8:	40 e0       	ldi	r20, 0x00	; 0
    17ea:	0e 94 ef 08 	call	0x11de	; 0x11de <DIO_u8SetPinValue>
}
    17ee:	cf 91       	pop	r28
    17f0:	df 91       	pop	r29
    17f2:	08 95       	ret

000017f4 <Relay_voidNormallyOpen>:

void Relay_voidNormallyOpen(void)
{
    17f4:	df 93       	push	r29
    17f6:	cf 93       	push	r28
    17f8:	cd b7       	in	r28, 0x3d	; 61
    17fa:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(RELAY_PORT, RELAY_PIN, DIO_PIN_HIGH);
    17fc:	80 e0       	ldi	r24, 0x00	; 0
    17fe:	60 e0       	ldi	r22, 0x00	; 0
    1800:	41 e0       	ldi	r20, 0x01	; 1
    1802:	0e 94 ef 08 	call	0x11de	; 0x11de <DIO_u8SetPinValue>
}
    1806:	cf 91       	pop	r28
    1808:	df 91       	pop	r29
    180a:	08 95       	ret

0000180c <OptoCoupler_voidIntialization>:
#include "OptoCoupler_private.h"
#include "OptoCoupler_config.h"


void OptoCoupler_voidIntialization(void)
{
    180c:	df 93       	push	r29
    180e:	cf 93       	push	r28
    1810:	cd b7       	in	r28, 0x3d	; 61
    1812:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDirection(OPTOCOUPLER_ANODE_PORT, OPTOCOUPLER_ANODE_PIN, DIO_PIN_OUTPUT);
    1814:	80 e0       	ldi	r24, 0x00	; 0
    1816:	60 e0       	ldi	r22, 0x00	; 0
    1818:	41 e0       	ldi	r20, 0x01	; 1
    181a:	0e 94 dd 07 	call	0xfba	; 0xfba <DIO_u8SetPinDirection>
}
    181e:	cf 91       	pop	r28
    1820:	df 91       	pop	r29
    1822:	08 95       	ret

00001824 <OptoCoupler_voidOnMode>:

void OptoCoupler_voidOnMode(void)
{
    1824:	df 93       	push	r29
    1826:	cf 93       	push	r28
    1828:	cd b7       	in	r28, 0x3d	; 61
    182a:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(OPTOCOUPLER_ANODE_PORT, OPTOCOUPLER_ANODE_PIN, DIO_PIN_HIGH);
    182c:	80 e0       	ldi	r24, 0x00	; 0
    182e:	60 e0       	ldi	r22, 0x00	; 0
    1830:	41 e0       	ldi	r20, 0x01	; 1
    1832:	0e 94 ef 08 	call	0x11de	; 0x11de <DIO_u8SetPinValue>
}
    1836:	cf 91       	pop	r28
    1838:	df 91       	pop	r29
    183a:	08 95       	ret

0000183c <OptoCoupler_voidOffMode>:

void OptoCoupler_voidOffMode(void)
{
    183c:	df 93       	push	r29
    183e:	cf 93       	push	r28
    1840:	cd b7       	in	r28, 0x3d	; 61
    1842:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(OPTOCOUPLER_ANODE_PORT, OPTOCOUPLER_ANODE_PIN, DIO_PIN_LOW);
    1844:	80 e0       	ldi	r24, 0x00	; 0
    1846:	60 e0       	ldi	r22, 0x00	; 0
    1848:	40 e0       	ldi	r20, 0x00	; 0
    184a:	0e 94 ef 08 	call	0x11de	; 0x11de <DIO_u8SetPinValue>
}
    184e:	cf 91       	pop	r28
    1850:	df 91       	pop	r29
    1852:	08 95       	ret

00001854 <MOTOR_voidInitialize>:
#include "MOTOR_interface.h"
#include "MOTOR_private.h"
#include "MOTOR_config.h"

void MOTOR_voidInitialize(void)
{
    1854:	df 93       	push	r29
    1856:	cf 93       	push	r28
    1858:	cd b7       	in	r28, 0x3d	; 61
    185a:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDirection(MOTOR_PORT, MOTOR_CCW_PIN, DIO_PIN_OUTPUT);
    185c:	80 e0       	ldi	r24, 0x00	; 0
    185e:	60 e0       	ldi	r22, 0x00	; 0
    1860:	41 e0       	ldi	r20, 0x01	; 1
    1862:	0e 94 dd 07 	call	0xfba	; 0xfba <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(MOTOR_PORT, MOTOR_CW_PIN, DIO_PIN_OUTPUT);
    1866:	80 e0       	ldi	r24, 0x00	; 0
    1868:	61 e0       	ldi	r22, 0x01	; 1
    186a:	41 e0       	ldi	r20, 0x01	; 1
    186c:	0e 94 dd 07 	call	0xfba	; 0xfba <DIO_u8SetPinDirection>
}
    1870:	cf 91       	pop	r28
    1872:	df 91       	pop	r29
    1874:	08 95       	ret

00001876 <MOTOR_voidCounterClockWise>:

void MOTOR_voidCounterClockWise(void)
{
    1876:	df 93       	push	r29
    1878:	cf 93       	push	r28
    187a:	cd b7       	in	r28, 0x3d	; 61
    187c:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(MOTOR_PORT, MOTOR_CW_PIN, DIO_PIN_LOW);
    187e:	80 e0       	ldi	r24, 0x00	; 0
    1880:	61 e0       	ldi	r22, 0x01	; 1
    1882:	40 e0       	ldi	r20, 0x00	; 0
    1884:	0e 94 ef 08 	call	0x11de	; 0x11de <DIO_u8SetPinValue>
	DIO_u8SetPinValue(MOTOR_PORT, MOTOR_CCW_PIN, DIO_PIN_HIGH);
    1888:	80 e0       	ldi	r24, 0x00	; 0
    188a:	60 e0       	ldi	r22, 0x00	; 0
    188c:	41 e0       	ldi	r20, 0x01	; 1
    188e:	0e 94 ef 08 	call	0x11de	; 0x11de <DIO_u8SetPinValue>
}
    1892:	cf 91       	pop	r28
    1894:	df 91       	pop	r29
    1896:	08 95       	ret

00001898 <MOTOR_voidClockWise>:
void MOTOR_voidClockWise(void)
{
    1898:	df 93       	push	r29
    189a:	cf 93       	push	r28
    189c:	cd b7       	in	r28, 0x3d	; 61
    189e:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(MOTOR_PORT, MOTOR_CCW_PIN, DIO_PIN_LOW);
    18a0:	80 e0       	ldi	r24, 0x00	; 0
    18a2:	60 e0       	ldi	r22, 0x00	; 0
    18a4:	40 e0       	ldi	r20, 0x00	; 0
    18a6:	0e 94 ef 08 	call	0x11de	; 0x11de <DIO_u8SetPinValue>
	DIO_u8SetPinValue(MOTOR_PORT, MOTOR_CW_PIN, DIO_PIN_HIGH);
    18aa:	80 e0       	ldi	r24, 0x00	; 0
    18ac:	61 e0       	ldi	r22, 0x01	; 1
    18ae:	41 e0       	ldi	r20, 0x01	; 1
    18b0:	0e 94 ef 08 	call	0x11de	; 0x11de <DIO_u8SetPinValue>
}
    18b4:	cf 91       	pop	r28
    18b6:	df 91       	pop	r29
    18b8:	08 95       	ret

000018ba <MOTOR_voidStop>:
void MOTOR_voidStop(void)
{
    18ba:	df 93       	push	r29
    18bc:	cf 93       	push	r28
    18be:	cd b7       	in	r28, 0x3d	; 61
    18c0:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(MOTOR_PORT, MOTOR_CCW_PIN, DIO_PIN_LOW);
    18c2:	80 e0       	ldi	r24, 0x00	; 0
    18c4:	60 e0       	ldi	r22, 0x00	; 0
    18c6:	40 e0       	ldi	r20, 0x00	; 0
    18c8:	0e 94 ef 08 	call	0x11de	; 0x11de <DIO_u8SetPinValue>
	DIO_u8SetPinValue(MOTOR_PORT, MOTOR_CW_PIN, DIO_PIN_LOW);
    18cc:	80 e0       	ldi	r24, 0x00	; 0
    18ce:	61 e0       	ldi	r22, 0x01	; 1
    18d0:	40 e0       	ldi	r20, 0x00	; 0
    18d2:	0e 94 ef 08 	call	0x11de	; 0x11de <DIO_u8SetPinValue>
}
    18d6:	cf 91       	pop	r28
    18d8:	df 91       	pop	r29
    18da:	08 95       	ret

000018dc <LED_u8TurnOn>:
#include "LED_private.h"
#include "LED_config.h"


void LED_u8TurnOn(LED_t *Copy_LED_tElements)
{
    18dc:	df 93       	push	r29
    18de:	cf 93       	push	r28
    18e0:	00 d0       	rcall	.+0      	; 0x18e2 <LED_u8TurnOn+0x6>
    18e2:	cd b7       	in	r28, 0x3d	; 61
    18e4:	de b7       	in	r29, 0x3e	; 62
    18e6:	9a 83       	std	Y+2, r25	; 0x02
    18e8:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_LED_tElements->u8ConnectionType == SOURCE)
    18ea:	e9 81       	ldd	r30, Y+1	; 0x01
    18ec:	fa 81       	ldd	r31, Y+2	; 0x02
    18ee:	82 81       	ldd	r24, Z+2	; 0x02
    18f0:	88 23       	and	r24, r24
    18f2:	a9 f4       	brne	.+42     	; 0x191e <LED_u8TurnOn+0x42>
	{
		DIO_u8SetPinDirection(Copy_LED_tElements->u8Port, Copy_LED_tElements->u8Pin, DIO_PIN_OUTPUT);
    18f4:	e9 81       	ldd	r30, Y+1	; 0x01
    18f6:	fa 81       	ldd	r31, Y+2	; 0x02
    18f8:	80 81       	ld	r24, Z
    18fa:	e9 81       	ldd	r30, Y+1	; 0x01
    18fc:	fa 81       	ldd	r31, Y+2	; 0x02
    18fe:	91 81       	ldd	r25, Z+1	; 0x01
    1900:	69 2f       	mov	r22, r25
    1902:	41 e0       	ldi	r20, 0x01	; 1
    1904:	0e 94 dd 07 	call	0xfba	; 0xfba <DIO_u8SetPinDirection>
		DIO_u8SetPinValue(Copy_LED_tElements->u8Port, Copy_LED_tElements->u8Pin, DIO_PIN_HIGH);
    1908:	e9 81       	ldd	r30, Y+1	; 0x01
    190a:	fa 81       	ldd	r31, Y+2	; 0x02
    190c:	80 81       	ld	r24, Z
    190e:	e9 81       	ldd	r30, Y+1	; 0x01
    1910:	fa 81       	ldd	r31, Y+2	; 0x02
    1912:	91 81       	ldd	r25, Z+1	; 0x01
    1914:	69 2f       	mov	r22, r25
    1916:	41 e0       	ldi	r20, 0x01	; 1
    1918:	0e 94 ef 08 	call	0x11de	; 0x11de <DIO_u8SetPinValue>
    191c:	19 c0       	rjmp	.+50     	; 0x1950 <LED_u8TurnOn+0x74>
	}
	else if(Copy_LED_tElements->u8ConnectionType == SINK)
    191e:	e9 81       	ldd	r30, Y+1	; 0x01
    1920:	fa 81       	ldd	r31, Y+2	; 0x02
    1922:	82 81       	ldd	r24, Z+2	; 0x02
    1924:	81 30       	cpi	r24, 0x01	; 1
    1926:	a1 f4       	brne	.+40     	; 0x1950 <LED_u8TurnOn+0x74>
	{
		DIO_u8SetPinDirection(Copy_LED_tElements->u8Port, Copy_LED_tElements->u8Pin, DIO_PIN_OUTPUT);
    1928:	e9 81       	ldd	r30, Y+1	; 0x01
    192a:	fa 81       	ldd	r31, Y+2	; 0x02
    192c:	80 81       	ld	r24, Z
    192e:	e9 81       	ldd	r30, Y+1	; 0x01
    1930:	fa 81       	ldd	r31, Y+2	; 0x02
    1932:	91 81       	ldd	r25, Z+1	; 0x01
    1934:	69 2f       	mov	r22, r25
    1936:	41 e0       	ldi	r20, 0x01	; 1
    1938:	0e 94 dd 07 	call	0xfba	; 0xfba <DIO_u8SetPinDirection>
		DIO_u8SetPinValue(Copy_LED_tElements->u8Port, Copy_LED_tElements->u8Pin, DIO_PIN_LOW);
    193c:	e9 81       	ldd	r30, Y+1	; 0x01
    193e:	fa 81       	ldd	r31, Y+2	; 0x02
    1940:	80 81       	ld	r24, Z
    1942:	e9 81       	ldd	r30, Y+1	; 0x01
    1944:	fa 81       	ldd	r31, Y+2	; 0x02
    1946:	91 81       	ldd	r25, Z+1	; 0x01
    1948:	69 2f       	mov	r22, r25
    194a:	40 e0       	ldi	r20, 0x00	; 0
    194c:	0e 94 ef 08 	call	0x11de	; 0x11de <DIO_u8SetPinValue>
	}
	else
	{
		return;
	}
}
    1950:	0f 90       	pop	r0
    1952:	0f 90       	pop	r0
    1954:	cf 91       	pop	r28
    1956:	df 91       	pop	r29
    1958:	08 95       	ret

0000195a <LED_u8TurnOff>:

void LED_u8TurnOff(LED_t *Copy_LED_tElements)
{
    195a:	df 93       	push	r29
    195c:	cf 93       	push	r28
    195e:	00 d0       	rcall	.+0      	; 0x1960 <LED_u8TurnOff+0x6>
    1960:	cd b7       	in	r28, 0x3d	; 61
    1962:	de b7       	in	r29, 0x3e	; 62
    1964:	9a 83       	std	Y+2, r25	; 0x02
    1966:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_LED_tElements->u8ConnectionType == SOURCE)
    1968:	e9 81       	ldd	r30, Y+1	; 0x01
    196a:	fa 81       	ldd	r31, Y+2	; 0x02
    196c:	82 81       	ldd	r24, Z+2	; 0x02
    196e:	88 23       	and	r24, r24
    1970:	a9 f4       	brne	.+42     	; 0x199c <LED_u8TurnOff+0x42>
	{
		DIO_u8SetPinDirection(Copy_LED_tElements->u8Port, Copy_LED_tElements->u8Pin, DIO_PIN_OUTPUT);
    1972:	e9 81       	ldd	r30, Y+1	; 0x01
    1974:	fa 81       	ldd	r31, Y+2	; 0x02
    1976:	80 81       	ld	r24, Z
    1978:	e9 81       	ldd	r30, Y+1	; 0x01
    197a:	fa 81       	ldd	r31, Y+2	; 0x02
    197c:	91 81       	ldd	r25, Z+1	; 0x01
    197e:	69 2f       	mov	r22, r25
    1980:	41 e0       	ldi	r20, 0x01	; 1
    1982:	0e 94 dd 07 	call	0xfba	; 0xfba <DIO_u8SetPinDirection>
		DIO_u8SetPinValue(Copy_LED_tElements->u8Port, Copy_LED_tElements->u8Pin, DIO_PIN_LOW);
    1986:	e9 81       	ldd	r30, Y+1	; 0x01
    1988:	fa 81       	ldd	r31, Y+2	; 0x02
    198a:	80 81       	ld	r24, Z
    198c:	e9 81       	ldd	r30, Y+1	; 0x01
    198e:	fa 81       	ldd	r31, Y+2	; 0x02
    1990:	91 81       	ldd	r25, Z+1	; 0x01
    1992:	69 2f       	mov	r22, r25
    1994:	40 e0       	ldi	r20, 0x00	; 0
    1996:	0e 94 ef 08 	call	0x11de	; 0x11de <DIO_u8SetPinValue>
    199a:	19 c0       	rjmp	.+50     	; 0x19ce <LED_u8TurnOff+0x74>
	}
	else if(Copy_LED_tElements->u8ConnectionType == SINK)
    199c:	e9 81       	ldd	r30, Y+1	; 0x01
    199e:	fa 81       	ldd	r31, Y+2	; 0x02
    19a0:	82 81       	ldd	r24, Z+2	; 0x02
    19a2:	81 30       	cpi	r24, 0x01	; 1
    19a4:	a1 f4       	brne	.+40     	; 0x19ce <LED_u8TurnOff+0x74>
	{
		DIO_u8SetPinDirection(Copy_LED_tElements->u8Port, Copy_LED_tElements->u8Pin, DIO_PIN_OUTPUT);
    19a6:	e9 81       	ldd	r30, Y+1	; 0x01
    19a8:	fa 81       	ldd	r31, Y+2	; 0x02
    19aa:	80 81       	ld	r24, Z
    19ac:	e9 81       	ldd	r30, Y+1	; 0x01
    19ae:	fa 81       	ldd	r31, Y+2	; 0x02
    19b0:	91 81       	ldd	r25, Z+1	; 0x01
    19b2:	69 2f       	mov	r22, r25
    19b4:	41 e0       	ldi	r20, 0x01	; 1
    19b6:	0e 94 dd 07 	call	0xfba	; 0xfba <DIO_u8SetPinDirection>
		DIO_u8SetPinValue(Copy_LED_tElements->u8Port, Copy_LED_tElements->u8Pin, DIO_PIN_HIGH);
    19ba:	e9 81       	ldd	r30, Y+1	; 0x01
    19bc:	fa 81       	ldd	r31, Y+2	; 0x02
    19be:	80 81       	ld	r24, Z
    19c0:	e9 81       	ldd	r30, Y+1	; 0x01
    19c2:	fa 81       	ldd	r31, Y+2	; 0x02
    19c4:	91 81       	ldd	r25, Z+1	; 0x01
    19c6:	69 2f       	mov	r22, r25
    19c8:	41 e0       	ldi	r20, 0x01	; 1
    19ca:	0e 94 ef 08 	call	0x11de	; 0x11de <DIO_u8SetPinValue>
	}
	else
	{
		return;
	}
}
    19ce:	0f 90       	pop	r0
    19d0:	0f 90       	pop	r0
    19d2:	cf 91       	pop	r28
    19d4:	df 91       	pop	r29
    19d6:	08 95       	ret

000019d8 <LCD_voidSendCommand>:
#include "LCD_private.h"
#include "LCD_config.h"


void LCD_voidSendCommand(u8 Copy_u8Command)
{
    19d8:	df 93       	push	r29
    19da:	cf 93       	push	r28
    19dc:	cd b7       	in	r28, 0x3d	; 61
    19de:	de b7       	in	r29, 0x3e	; 62
    19e0:	2f 97       	sbiw	r28, 0x0f	; 15
    19e2:	0f b6       	in	r0, 0x3f	; 63
    19e4:	f8 94       	cli
    19e6:	de bf       	out	0x3e, r29	; 62
    19e8:	0f be       	out	0x3f, r0	; 63
    19ea:	cd bf       	out	0x3d, r28	; 61
    19ec:	8f 87       	std	Y+15, r24	; 0x0f
	/*Set the RS pin to be LOW: 0 command*/
	DIO_u8SetPinValue(LCD_CRTL_PORT, LCD_RS_PIN, DIO_PIN_LOW);
    19ee:	83 e0       	ldi	r24, 0x03	; 3
    19f0:	67 e0       	ldi	r22, 0x07	; 7
    19f2:	40 e0       	ldi	r20, 0x00	; 0
    19f4:	0e 94 ef 08 	call	0x11de	; 0x11de <DIO_u8SetPinValue>
	/*Set the RW pin to be LOW: 0 write*/
	DIO_u8SetPinValue(LCD_CRTL_PORT, LCD_RW_PIN, DIO_PIN_LOW);
    19f8:	83 e0       	ldi	r24, 0x03	; 3
    19fa:	66 e0       	ldi	r22, 0x06	; 6
    19fc:	40 e0       	ldi	r20, 0x00	; 0
    19fe:	0e 94 ef 08 	call	0x11de	; 0x11de <DIO_u8SetPinValue>

#if 	LCD_MODE == LCD_EIGHT_BIT

	/*Set the Port value to be the command*/
	DIO_u8SetPortValue(LCD_DATA_PORT, Copy_u8Command);
    1a02:	82 e0       	ldi	r24, 0x02	; 2
    1a04:	6f 85       	ldd	r22, Y+15	; 0x0f
    1a06:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_u8SetPortValue>

	DIO_u8SetPortValue(LCD_DATA_PORT, ((Copy_u8Command<<4) & 0xf0));
#endif

	/*Set the EN pin to be HIGH: 1 to read , waiting for 2ms and then make it LOW again: 0*/
	DIO_u8SetPinValue(LCD_CRTL_PORT, LCD_EN_PIN, DIO_PIN_HIGH);
    1a0a:	83 e0       	ldi	r24, 0x03	; 3
    1a0c:	65 e0       	ldi	r22, 0x05	; 5
    1a0e:	41 e0       	ldi	r20, 0x01	; 1
    1a10:	0e 94 ef 08 	call	0x11de	; 0x11de <DIO_u8SetPinValue>
    1a14:	80 e0       	ldi	r24, 0x00	; 0
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	a0 e0       	ldi	r26, 0x00	; 0
    1a1a:	b0 e4       	ldi	r27, 0x40	; 64
    1a1c:	8b 87       	std	Y+11, r24	; 0x0b
    1a1e:	9c 87       	std	Y+12, r25	; 0x0c
    1a20:	ad 87       	std	Y+13, r26	; 0x0d
    1a22:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a24:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a26:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a28:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a2c:	20 e0       	ldi	r18, 0x00	; 0
    1a2e:	30 e0       	ldi	r19, 0x00	; 0
    1a30:	4a ef       	ldi	r20, 0xFA	; 250
    1a32:	54 e4       	ldi	r21, 0x44	; 68
    1a34:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a38:	dc 01       	movw	r26, r24
    1a3a:	cb 01       	movw	r24, r22
    1a3c:	8f 83       	std	Y+7, r24	; 0x07
    1a3e:	98 87       	std	Y+8, r25	; 0x08
    1a40:	a9 87       	std	Y+9, r26	; 0x09
    1a42:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a44:	6f 81       	ldd	r22, Y+7	; 0x07
    1a46:	78 85       	ldd	r23, Y+8	; 0x08
    1a48:	89 85       	ldd	r24, Y+9	; 0x09
    1a4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a4c:	20 e0       	ldi	r18, 0x00	; 0
    1a4e:	30 e0       	ldi	r19, 0x00	; 0
    1a50:	40 e8       	ldi	r20, 0x80	; 128
    1a52:	5f e3       	ldi	r21, 0x3F	; 63
    1a54:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a58:	88 23       	and	r24, r24
    1a5a:	2c f4       	brge	.+10     	; 0x1a66 <LCD_voidSendCommand+0x8e>
		__ticks = 1;
    1a5c:	81 e0       	ldi	r24, 0x01	; 1
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	9e 83       	std	Y+6, r25	; 0x06
    1a62:	8d 83       	std	Y+5, r24	; 0x05
    1a64:	3f c0       	rjmp	.+126    	; 0x1ae4 <LCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    1a66:	6f 81       	ldd	r22, Y+7	; 0x07
    1a68:	78 85       	ldd	r23, Y+8	; 0x08
    1a6a:	89 85       	ldd	r24, Y+9	; 0x09
    1a6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a6e:	20 e0       	ldi	r18, 0x00	; 0
    1a70:	3f ef       	ldi	r19, 0xFF	; 255
    1a72:	4f e7       	ldi	r20, 0x7F	; 127
    1a74:	57 e4       	ldi	r21, 0x47	; 71
    1a76:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a7a:	18 16       	cp	r1, r24
    1a7c:	4c f5       	brge	.+82     	; 0x1ad0 <LCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a7e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a80:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a82:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a84:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a86:	20 e0       	ldi	r18, 0x00	; 0
    1a88:	30 e0       	ldi	r19, 0x00	; 0
    1a8a:	40 e2       	ldi	r20, 0x20	; 32
    1a8c:	51 e4       	ldi	r21, 0x41	; 65
    1a8e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a92:	dc 01       	movw	r26, r24
    1a94:	cb 01       	movw	r24, r22
    1a96:	bc 01       	movw	r22, r24
    1a98:	cd 01       	movw	r24, r26
    1a9a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a9e:	dc 01       	movw	r26, r24
    1aa0:	cb 01       	movw	r24, r22
    1aa2:	9e 83       	std	Y+6, r25	; 0x06
    1aa4:	8d 83       	std	Y+5, r24	; 0x05
    1aa6:	0f c0       	rjmp	.+30     	; 0x1ac6 <LCD_voidSendCommand+0xee>
    1aa8:	88 ec       	ldi	r24, 0xC8	; 200
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	9c 83       	std	Y+4, r25	; 0x04
    1aae:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ab0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab4:	01 97       	sbiw	r24, 0x01	; 1
    1ab6:	f1 f7       	brne	.-4      	; 0x1ab4 <LCD_voidSendCommand+0xdc>
    1ab8:	9c 83       	std	Y+4, r25	; 0x04
    1aba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1abc:	8d 81       	ldd	r24, Y+5	; 0x05
    1abe:	9e 81       	ldd	r25, Y+6	; 0x06
    1ac0:	01 97       	sbiw	r24, 0x01	; 1
    1ac2:	9e 83       	std	Y+6, r25	; 0x06
    1ac4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ac6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ac8:	9e 81       	ldd	r25, Y+6	; 0x06
    1aca:	00 97       	sbiw	r24, 0x00	; 0
    1acc:	69 f7       	brne	.-38     	; 0x1aa8 <LCD_voidSendCommand+0xd0>
    1ace:	14 c0       	rjmp	.+40     	; 0x1af8 <LCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ad0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ad2:	78 85       	ldd	r23, Y+8	; 0x08
    1ad4:	89 85       	ldd	r24, Y+9	; 0x09
    1ad6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ad8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1adc:	dc 01       	movw	r26, r24
    1ade:	cb 01       	movw	r24, r22
    1ae0:	9e 83       	std	Y+6, r25	; 0x06
    1ae2:	8d 83       	std	Y+5, r24	; 0x05
    1ae4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ae6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ae8:	9a 83       	std	Y+2, r25	; 0x02
    1aea:	89 83       	std	Y+1, r24	; 0x01
    1aec:	89 81       	ldd	r24, Y+1	; 0x01
    1aee:	9a 81       	ldd	r25, Y+2	; 0x02
    1af0:	01 97       	sbiw	r24, 0x01	; 1
    1af2:	f1 f7       	brne	.-4      	; 0x1af0 <LCD_voidSendCommand+0x118>
    1af4:	9a 83       	std	Y+2, r25	; 0x02
    1af6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(LCD_CRTL_PORT, LCD_EN_PIN, DIO_PIN_LOW);
    1af8:	83 e0       	ldi	r24, 0x03	; 3
    1afa:	65 e0       	ldi	r22, 0x05	; 5
    1afc:	40 e0       	ldi	r20, 0x00	; 0
    1afe:	0e 94 ef 08 	call	0x11de	; 0x11de <DIO_u8SetPinValue>
}
    1b02:	2f 96       	adiw	r28, 0x0f	; 15
    1b04:	0f b6       	in	r0, 0x3f	; 63
    1b06:	f8 94       	cli
    1b08:	de bf       	out	0x3e, r29	; 62
    1b0a:	0f be       	out	0x3f, r0	; 63
    1b0c:	cd bf       	out	0x3d, r28	; 61
    1b0e:	cf 91       	pop	r28
    1b10:	df 91       	pop	r29
    1b12:	08 95       	ret

00001b14 <LCD_voidSendData>:


void LCD_voidSendData(u8 Copy_u8Data)
{
    1b14:	df 93       	push	r29
    1b16:	cf 93       	push	r28
    1b18:	cd b7       	in	r28, 0x3d	; 61
    1b1a:	de b7       	in	r29, 0x3e	; 62
    1b1c:	2f 97       	sbiw	r28, 0x0f	; 15
    1b1e:	0f b6       	in	r0, 0x3f	; 63
    1b20:	f8 94       	cli
    1b22:	de bf       	out	0x3e, r29	; 62
    1b24:	0f be       	out	0x3f, r0	; 63
    1b26:	cd bf       	out	0x3d, r28	; 61
    1b28:	8f 87       	std	Y+15, r24	; 0x0f
	/*Set the RS pin to be HIGH: 1 command*/
	DIO_u8SetPinValue(LCD_CRTL_PORT, LCD_RS_PIN, DIO_PIN_HIGH);
    1b2a:	83 e0       	ldi	r24, 0x03	; 3
    1b2c:	67 e0       	ldi	r22, 0x07	; 7
    1b2e:	41 e0       	ldi	r20, 0x01	; 1
    1b30:	0e 94 ef 08 	call	0x11de	; 0x11de <DIO_u8SetPinValue>
	/*Set the RW pin to be LOW: 0 write*/
	DIO_u8SetPinValue(LCD_CRTL_PORT, LCD_RW_PIN, DIO_PIN_LOW);
    1b34:	83 e0       	ldi	r24, 0x03	; 3
    1b36:	66 e0       	ldi	r22, 0x06	; 6
    1b38:	40 e0       	ldi	r20, 0x00	; 0
    1b3a:	0e 94 ef 08 	call	0x11de	; 0x11de <DIO_u8SetPinValue>

#if 	LCD_MODE == LCD_EIGHT_BIT

	/*Set the Port value to be the data*/
	DIO_u8SetPortValue(LCD_DATA_PORT, Copy_u8Data);
    1b3e:	82 e0       	ldi	r24, 0x02	; 2
    1b40:	6f 85       	ldd	r22, Y+15	; 0x0f
    1b42:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_u8SetPortValue>
	DIO_u8SetPortValue(LCD_DATA_PORT, ((Copy_u8Data<<4) & 0xf0));

#endif

	/*Set the EN pin to be HIGH: 1 to read , waiting for 2ms and then make it LOW again: 0*/
	DIO_u8SetPinValue(LCD_CRTL_PORT, LCD_EN_PIN, DIO_PIN_HIGH);
    1b46:	83 e0       	ldi	r24, 0x03	; 3
    1b48:	65 e0       	ldi	r22, 0x05	; 5
    1b4a:	41 e0       	ldi	r20, 0x01	; 1
    1b4c:	0e 94 ef 08 	call	0x11de	; 0x11de <DIO_u8SetPinValue>
    1b50:	80 e0       	ldi	r24, 0x00	; 0
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	a0 e0       	ldi	r26, 0x00	; 0
    1b56:	b0 e4       	ldi	r27, 0x40	; 64
    1b58:	8b 87       	std	Y+11, r24	; 0x0b
    1b5a:	9c 87       	std	Y+12, r25	; 0x0c
    1b5c:	ad 87       	std	Y+13, r26	; 0x0d
    1b5e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b60:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b62:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b64:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b66:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b68:	20 e0       	ldi	r18, 0x00	; 0
    1b6a:	30 e0       	ldi	r19, 0x00	; 0
    1b6c:	4a ef       	ldi	r20, 0xFA	; 250
    1b6e:	54 e4       	ldi	r21, 0x44	; 68
    1b70:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b74:	dc 01       	movw	r26, r24
    1b76:	cb 01       	movw	r24, r22
    1b78:	8f 83       	std	Y+7, r24	; 0x07
    1b7a:	98 87       	std	Y+8, r25	; 0x08
    1b7c:	a9 87       	std	Y+9, r26	; 0x09
    1b7e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b80:	6f 81       	ldd	r22, Y+7	; 0x07
    1b82:	78 85       	ldd	r23, Y+8	; 0x08
    1b84:	89 85       	ldd	r24, Y+9	; 0x09
    1b86:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b88:	20 e0       	ldi	r18, 0x00	; 0
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	40 e8       	ldi	r20, 0x80	; 128
    1b8e:	5f e3       	ldi	r21, 0x3F	; 63
    1b90:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1b94:	88 23       	and	r24, r24
    1b96:	2c f4       	brge	.+10     	; 0x1ba2 <LCD_voidSendData+0x8e>
		__ticks = 1;
    1b98:	81 e0       	ldi	r24, 0x01	; 1
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	9e 83       	std	Y+6, r25	; 0x06
    1b9e:	8d 83       	std	Y+5, r24	; 0x05
    1ba0:	3f c0       	rjmp	.+126    	; 0x1c20 <LCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    1ba2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ba4:	78 85       	ldd	r23, Y+8	; 0x08
    1ba6:	89 85       	ldd	r24, Y+9	; 0x09
    1ba8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1baa:	20 e0       	ldi	r18, 0x00	; 0
    1bac:	3f ef       	ldi	r19, 0xFF	; 255
    1bae:	4f e7       	ldi	r20, 0x7F	; 127
    1bb0:	57 e4       	ldi	r21, 0x47	; 71
    1bb2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1bb6:	18 16       	cp	r1, r24
    1bb8:	4c f5       	brge	.+82     	; 0x1c0c <LCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bba:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bbc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bbe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bc0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bc2:	20 e0       	ldi	r18, 0x00	; 0
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	40 e2       	ldi	r20, 0x20	; 32
    1bc8:	51 e4       	ldi	r21, 0x41	; 65
    1bca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bce:	dc 01       	movw	r26, r24
    1bd0:	cb 01       	movw	r24, r22
    1bd2:	bc 01       	movw	r22, r24
    1bd4:	cd 01       	movw	r24, r26
    1bd6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bda:	dc 01       	movw	r26, r24
    1bdc:	cb 01       	movw	r24, r22
    1bde:	9e 83       	std	Y+6, r25	; 0x06
    1be0:	8d 83       	std	Y+5, r24	; 0x05
    1be2:	0f c0       	rjmp	.+30     	; 0x1c02 <LCD_voidSendData+0xee>
    1be4:	88 ec       	ldi	r24, 0xC8	; 200
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	9c 83       	std	Y+4, r25	; 0x04
    1bea:	8b 83       	std	Y+3, r24	; 0x03
    1bec:	8b 81       	ldd	r24, Y+3	; 0x03
    1bee:	9c 81       	ldd	r25, Y+4	; 0x04
    1bf0:	01 97       	sbiw	r24, 0x01	; 1
    1bf2:	f1 f7       	brne	.-4      	; 0x1bf0 <LCD_voidSendData+0xdc>
    1bf4:	9c 83       	std	Y+4, r25	; 0x04
    1bf6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bf8:	8d 81       	ldd	r24, Y+5	; 0x05
    1bfa:	9e 81       	ldd	r25, Y+6	; 0x06
    1bfc:	01 97       	sbiw	r24, 0x01	; 1
    1bfe:	9e 83       	std	Y+6, r25	; 0x06
    1c00:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c02:	8d 81       	ldd	r24, Y+5	; 0x05
    1c04:	9e 81       	ldd	r25, Y+6	; 0x06
    1c06:	00 97       	sbiw	r24, 0x00	; 0
    1c08:	69 f7       	brne	.-38     	; 0x1be4 <LCD_voidSendData+0xd0>
    1c0a:	14 c0       	rjmp	.+40     	; 0x1c34 <LCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c0c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c0e:	78 85       	ldd	r23, Y+8	; 0x08
    1c10:	89 85       	ldd	r24, Y+9	; 0x09
    1c12:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c14:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c18:	dc 01       	movw	r26, r24
    1c1a:	cb 01       	movw	r24, r22
    1c1c:	9e 83       	std	Y+6, r25	; 0x06
    1c1e:	8d 83       	std	Y+5, r24	; 0x05
    1c20:	8d 81       	ldd	r24, Y+5	; 0x05
    1c22:	9e 81       	ldd	r25, Y+6	; 0x06
    1c24:	9a 83       	std	Y+2, r25	; 0x02
    1c26:	89 83       	std	Y+1, r24	; 0x01
    1c28:	89 81       	ldd	r24, Y+1	; 0x01
    1c2a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c2c:	01 97       	sbiw	r24, 0x01	; 1
    1c2e:	f1 f7       	brne	.-4      	; 0x1c2c <LCD_voidSendData+0x118>
    1c30:	9a 83       	std	Y+2, r25	; 0x02
    1c32:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(LCD_CRTL_PORT, LCD_EN_PIN, DIO_PIN_LOW);
    1c34:	83 e0       	ldi	r24, 0x03	; 3
    1c36:	65 e0       	ldi	r22, 0x05	; 5
    1c38:	40 e0       	ldi	r20, 0x00	; 0
    1c3a:	0e 94 ef 08 	call	0x11de	; 0x11de <DIO_u8SetPinValue>
}
    1c3e:	2f 96       	adiw	r28, 0x0f	; 15
    1c40:	0f b6       	in	r0, 0x3f	; 63
    1c42:	f8 94       	cli
    1c44:	de bf       	out	0x3e, r29	; 62
    1c46:	0f be       	out	0x3f, r0	; 63
    1c48:	cd bf       	out	0x3d, r28	; 61
    1c4a:	cf 91       	pop	r28
    1c4c:	df 91       	pop	r29
    1c4e:	08 95       	ret

00001c50 <LCD_voidInitialize>:

void LCD_voidInitialize(void)
{
    1c50:	df 93       	push	r29
    1c52:	cf 93       	push	r28
    1c54:	cd b7       	in	r28, 0x3d	; 61
    1c56:	de b7       	in	r29, 0x3e	; 62
    1c58:	2e 97       	sbiw	r28, 0x0e	; 14
    1c5a:	0f b6       	in	r0, 0x3f	; 63
    1c5c:	f8 94       	cli
    1c5e:	de bf       	out	0x3e, r29	; 62
    1c60:	0f be       	out	0x3f, r0	; 63
    1c62:	cd bf       	out	0x3d, r28	; 61
	/*Set the control pins to be output*/
	DIO_u8SetPinDirection(LCD_CRTL_PORT, LCD_EN_PIN, DIO_PIN_OUTPUT);
    1c64:	83 e0       	ldi	r24, 0x03	; 3
    1c66:	65 e0       	ldi	r22, 0x05	; 5
    1c68:	41 e0       	ldi	r20, 0x01	; 1
    1c6a:	0e 94 dd 07 	call	0xfba	; 0xfba <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(LCD_CRTL_PORT, LCD_RW_PIN, DIO_PIN_OUTPUT);
    1c6e:	83 e0       	ldi	r24, 0x03	; 3
    1c70:	66 e0       	ldi	r22, 0x06	; 6
    1c72:	41 e0       	ldi	r20, 0x01	; 1
    1c74:	0e 94 dd 07 	call	0xfba	; 0xfba <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(LCD_CRTL_PORT, LCD_RS_PIN, DIO_PIN_OUTPUT);
    1c78:	83 e0       	ldi	r24, 0x03	; 3
    1c7a:	67 e0       	ldi	r22, 0x07	; 7
    1c7c:	41 e0       	ldi	r20, 0x01	; 1
    1c7e:	0e 94 dd 07 	call	0xfba	; 0xfba <DIO_u8SetPinDirection>
    1c82:	80 e0       	ldi	r24, 0x00	; 0
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	a0 e2       	ldi	r26, 0x20	; 32
    1c88:	b2 e4       	ldi	r27, 0x42	; 66
    1c8a:	8b 87       	std	Y+11, r24	; 0x0b
    1c8c:	9c 87       	std	Y+12, r25	; 0x0c
    1c8e:	ad 87       	std	Y+13, r26	; 0x0d
    1c90:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c92:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c94:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c96:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c98:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c9a:	20 e0       	ldi	r18, 0x00	; 0
    1c9c:	30 e0       	ldi	r19, 0x00	; 0
    1c9e:	4a ef       	ldi	r20, 0xFA	; 250
    1ca0:	54 e4       	ldi	r21, 0x44	; 68
    1ca2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ca6:	dc 01       	movw	r26, r24
    1ca8:	cb 01       	movw	r24, r22
    1caa:	8f 83       	std	Y+7, r24	; 0x07
    1cac:	98 87       	std	Y+8, r25	; 0x08
    1cae:	a9 87       	std	Y+9, r26	; 0x09
    1cb0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cb2:	6f 81       	ldd	r22, Y+7	; 0x07
    1cb4:	78 85       	ldd	r23, Y+8	; 0x08
    1cb6:	89 85       	ldd	r24, Y+9	; 0x09
    1cb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cba:	20 e0       	ldi	r18, 0x00	; 0
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	40 e8       	ldi	r20, 0x80	; 128
    1cc0:	5f e3       	ldi	r21, 0x3F	; 63
    1cc2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1cc6:	88 23       	and	r24, r24
    1cc8:	2c f4       	brge	.+10     	; 0x1cd4 <LCD_voidInitialize+0x84>
		__ticks = 1;
    1cca:	81 e0       	ldi	r24, 0x01	; 1
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	9e 83       	std	Y+6, r25	; 0x06
    1cd0:	8d 83       	std	Y+5, r24	; 0x05
    1cd2:	3f c0       	rjmp	.+126    	; 0x1d52 <LCD_voidInitialize+0x102>
	else if (__tmp > 65535)
    1cd4:	6f 81       	ldd	r22, Y+7	; 0x07
    1cd6:	78 85       	ldd	r23, Y+8	; 0x08
    1cd8:	89 85       	ldd	r24, Y+9	; 0x09
    1cda:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cdc:	20 e0       	ldi	r18, 0x00	; 0
    1cde:	3f ef       	ldi	r19, 0xFF	; 255
    1ce0:	4f e7       	ldi	r20, 0x7F	; 127
    1ce2:	57 e4       	ldi	r21, 0x47	; 71
    1ce4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ce8:	18 16       	cp	r1, r24
    1cea:	4c f5       	brge	.+82     	; 0x1d3e <LCD_voidInitialize+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cec:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cee:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cf0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cf2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cf4:	20 e0       	ldi	r18, 0x00	; 0
    1cf6:	30 e0       	ldi	r19, 0x00	; 0
    1cf8:	40 e2       	ldi	r20, 0x20	; 32
    1cfa:	51 e4       	ldi	r21, 0x41	; 65
    1cfc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d00:	dc 01       	movw	r26, r24
    1d02:	cb 01       	movw	r24, r22
    1d04:	bc 01       	movw	r22, r24
    1d06:	cd 01       	movw	r24, r26
    1d08:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d0c:	dc 01       	movw	r26, r24
    1d0e:	cb 01       	movw	r24, r22
    1d10:	9e 83       	std	Y+6, r25	; 0x06
    1d12:	8d 83       	std	Y+5, r24	; 0x05
    1d14:	0f c0       	rjmp	.+30     	; 0x1d34 <LCD_voidInitialize+0xe4>
    1d16:	88 ec       	ldi	r24, 0xC8	; 200
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	9c 83       	std	Y+4, r25	; 0x04
    1d1c:	8b 83       	std	Y+3, r24	; 0x03
    1d1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d20:	9c 81       	ldd	r25, Y+4	; 0x04
    1d22:	01 97       	sbiw	r24, 0x01	; 1
    1d24:	f1 f7       	brne	.-4      	; 0x1d22 <LCD_voidInitialize+0xd2>
    1d26:	9c 83       	std	Y+4, r25	; 0x04
    1d28:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d2c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d2e:	01 97       	sbiw	r24, 0x01	; 1
    1d30:	9e 83       	std	Y+6, r25	; 0x06
    1d32:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d34:	8d 81       	ldd	r24, Y+5	; 0x05
    1d36:	9e 81       	ldd	r25, Y+6	; 0x06
    1d38:	00 97       	sbiw	r24, 0x00	; 0
    1d3a:	69 f7       	brne	.-38     	; 0x1d16 <LCD_voidInitialize+0xc6>
    1d3c:	14 c0       	rjmp	.+40     	; 0x1d66 <LCD_voidInitialize+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d3e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d40:	78 85       	ldd	r23, Y+8	; 0x08
    1d42:	89 85       	ldd	r24, Y+9	; 0x09
    1d44:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d46:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d4a:	dc 01       	movw	r26, r24
    1d4c:	cb 01       	movw	r24, r22
    1d4e:	9e 83       	std	Y+6, r25	; 0x06
    1d50:	8d 83       	std	Y+5, r24	; 0x05
    1d52:	8d 81       	ldd	r24, Y+5	; 0x05
    1d54:	9e 81       	ldd	r25, Y+6	; 0x06
    1d56:	9a 83       	std	Y+2, r25	; 0x02
    1d58:	89 83       	std	Y+1, r24	; 0x01
    1d5a:	89 81       	ldd	r24, Y+1	; 0x01
    1d5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d5e:	01 97       	sbiw	r24, 0x01	; 1
    1d60:	f1 f7       	brne	.-4      	; 0x1d5e <LCD_voidInitialize+0x10e>
    1d62:	9a 83       	std	Y+2, r25	; 0x02
    1d64:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(40);

#if LCD_MODE == LCD_EIGHT_BIT

	/*Set the data port to be output*/
	DIO_u8SetPortDirection(LCD_DATA_PORT, DIO_PORT_OUTPUT);
    1d66:	82 e0       	ldi	r24, 0x02	; 2
    1d68:	6f ef       	ldi	r22, 0xFF	; 255
    1d6a:	0e 94 f3 06 	call	0xde6	; 0xde6 <DIO_u8SetPortDirection>

	/*Send the function set command: N = 1 ->2 lines, F = 0 -> 5*8 font size*/
	LCD_voidSendCommand(0x38);
    1d6e:	88 e3       	ldi	r24, 0x38	; 56
    1d70:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <LCD_voidSendCommand>

	/*Send the function set command: D = 1 -> DisplayOn, C = 0 -> CursorInvisible, B = 0 -> NoBlinking*/
	LCD_voidSendCommand(0x0C);
    1d74:	8c e0       	ldi	r24, 0x0C	; 12
    1d76:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <LCD_voidSendCommand>

	/*Send the display clear command*/
	LCD_voidSendCommand(0x01);
    1d7a:	81 e0       	ldi	r24, 0x01	; 1
    1d7c:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <LCD_voidSendCommand>
		LCD_voidSendCommand(0x0C);
	/*Send the display clear command*/
		LCD_voidSendCommand(0x01);

#endif
}
    1d80:	2e 96       	adiw	r28, 0x0e	; 14
    1d82:	0f b6       	in	r0, 0x3f	; 63
    1d84:	f8 94       	cli
    1d86:	de bf       	out	0x3e, r29	; 62
    1d88:	0f be       	out	0x3f, r0	; 63
    1d8a:	cd bf       	out	0x3d, r28	; 61
    1d8c:	cf 91       	pop	r28
    1d8e:	df 91       	pop	r29
    1d90:	08 95       	ret

00001d92 <LCD_voidGoToXY>:


void LCD_voidGoToXY(u8 Copy_u8XPostion, u8 Copy_u8YPostion)
{
    1d92:	df 93       	push	r29
    1d94:	cf 93       	push	r28
    1d96:	00 d0       	rcall	.+0      	; 0x1d98 <LCD_voidGoToXY+0x6>
    1d98:	0f 92       	push	r0
    1d9a:	cd b7       	in	r28, 0x3d	; 61
    1d9c:	de b7       	in	r29, 0x3e	; 62
    1d9e:	8a 83       	std	Y+2, r24	; 0x02
    1da0:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address = 0;
    1da2:	19 82       	std	Y+1, r1	; 0x01
	/* Check the number of row 0 or 1 */
	if (Copy_u8XPostion == LCD_ROW0)
    1da4:	8a 81       	ldd	r24, Y+2	; 0x02
    1da6:	88 23       	and	r24, r24
    1da8:	19 f4       	brne	.+6      	; 0x1db0 <LCD_voidGoToXY+0x1e>
	{
		Local_u8Address = Copy_u8YPostion;
    1daa:	8b 81       	ldd	r24, Y+3	; 0x03
    1dac:	89 83       	std	Y+1, r24	; 0x01
    1dae:	06 c0       	rjmp	.+12     	; 0x1dbc <LCD_voidGoToXY+0x2a>
	}
	else if (Copy_u8XPostion == LCD_ROW1)
    1db0:	8a 81       	ldd	r24, Y+2	; 0x02
    1db2:	81 30       	cpi	r24, 0x01	; 1
    1db4:	19 f4       	brne	.+6      	; 0x1dbc <LCD_voidGoToXY+0x2a>
	{
		Local_u8Address = Copy_u8YPostion + DDRAM_OFFSET;
    1db6:	8b 81       	ldd	r24, Y+3	; 0x03
    1db8:	80 5c       	subi	r24, 0xC0	; 192
    1dba:	89 83       	std	Y+1, r24	; 0x01
	}

	SET_BIT(Local_u8Address, 7);
    1dbc:	89 81       	ldd	r24, Y+1	; 0x01
    1dbe:	80 68       	ori	r24, 0x80	; 128
    1dc0:	89 83       	std	Y+1, r24	; 0x01

	LCD_voidSendCommand(Local_u8Address);
    1dc2:	89 81       	ldd	r24, Y+1	; 0x01
    1dc4:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <LCD_voidSendCommand>

}
    1dc8:	0f 90       	pop	r0
    1dca:	0f 90       	pop	r0
    1dcc:	0f 90       	pop	r0
    1dce:	cf 91       	pop	r28
    1dd0:	df 91       	pop	r29
    1dd2:	08 95       	ret

00001dd4 <LCD_voidSendCustomCharacter>:


void LCD_voidSendCustomCharacter(u8 *Copy_pu8CharacterArray, u8 Copy_u8PatternNumber, u8 Copy_u8XPostion, u8 Copy_u8YPostion)
{
    1dd4:	df 93       	push	r29
    1dd6:	cf 93       	push	r28
    1dd8:	cd b7       	in	r28, 0x3d	; 61
    1dda:	de b7       	in	r29, 0x3e	; 62
    1ddc:	27 97       	sbiw	r28, 0x07	; 7
    1dde:	0f b6       	in	r0, 0x3f	; 63
    1de0:	f8 94       	cli
    1de2:	de bf       	out	0x3e, r29	; 62
    1de4:	0f be       	out	0x3f, r0	; 63
    1de6:	cd bf       	out	0x3d, r28	; 61
    1de8:	9c 83       	std	Y+4, r25	; 0x04
    1dea:	8b 83       	std	Y+3, r24	; 0x03
    1dec:	6d 83       	std	Y+5, r22	; 0x05
    1dee:	4e 83       	std	Y+6, r20	; 0x06
    1df0:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMAddress = 0, Local_u8LoopCounter;
    1df2:	1a 82       	std	Y+2, r1	; 0x02
	/* Calculating CGRAMAddress */
	Local_u8CGRAMAddress = Copy_u8PatternNumber * 8;
    1df4:	8d 81       	ldd	r24, Y+5	; 0x05
    1df6:	88 2f       	mov	r24, r24
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	88 0f       	add	r24, r24
    1dfc:	99 1f       	adc	r25, r25
    1dfe:	88 0f       	add	r24, r24
    1e00:	99 1f       	adc	r25, r25
    1e02:	88 0f       	add	r24, r24
    1e04:	99 1f       	adc	r25, r25
    1e06:	8a 83       	std	Y+2, r24	; 0x02

	/* make the 6th bit from address to 1 and sending the command to the LCD */
	SET_BIT(Local_u8CGRAMAddress, 6);
    1e08:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0a:	80 64       	ori	r24, 0x40	; 64
    1e0c:	8a 83       	std	Y+2, r24	; 0x02
	LCD_voidSendCommand(Local_u8CGRAMAddress);
    1e0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e10:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <LCD_voidSendCommand>

	/* Sending the bytes from character array to the LCD */
	for(Local_u8LoopCounter = 0; Local_u8LoopCounter < 8; Local_u8LoopCounter++)
    1e14:	19 82       	std	Y+1, r1	; 0x01
    1e16:	0e c0       	rjmp	.+28     	; 0x1e34 <LCD_voidSendCustomCharacter+0x60>
	{
		LCD_voidSendData(Copy_pu8CharacterArray[Local_u8LoopCounter]);
    1e18:	89 81       	ldd	r24, Y+1	; 0x01
    1e1a:	28 2f       	mov	r18, r24
    1e1c:	30 e0       	ldi	r19, 0x00	; 0
    1e1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e20:	9c 81       	ldd	r25, Y+4	; 0x04
    1e22:	fc 01       	movw	r30, r24
    1e24:	e2 0f       	add	r30, r18
    1e26:	f3 1f       	adc	r31, r19
    1e28:	80 81       	ld	r24, Z
    1e2a:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <LCD_voidSendData>
	/* make the 6th bit from address to 1 and sending the command to the LCD */
	SET_BIT(Local_u8CGRAMAddress, 6);
	LCD_voidSendCommand(Local_u8CGRAMAddress);

	/* Sending the bytes from character array to the LCD */
	for(Local_u8LoopCounter = 0; Local_u8LoopCounter < 8; Local_u8LoopCounter++)
    1e2e:	89 81       	ldd	r24, Y+1	; 0x01
    1e30:	8f 5f       	subi	r24, 0xFF	; 255
    1e32:	89 83       	std	Y+1, r24	; 0x01
    1e34:	89 81       	ldd	r24, Y+1	; 0x01
    1e36:	88 30       	cpi	r24, 0x08	; 8
    1e38:	78 f3       	brcs	.-34     	; 0x1e18 <LCD_voidSendCustomCharacter+0x44>
	{
		LCD_voidSendData(Copy_pu8CharacterArray[Local_u8LoopCounter]);
	}
	/* Send the DDRAM address command and specifying the position of the character */
	LCD_voidGoToXY(Copy_u8XPostion, Copy_u8YPostion);
    1e3a:	8e 81       	ldd	r24, Y+6	; 0x06
    1e3c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e3e:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <LCD_voidGoToXY>

	/* Displaying the pattern from CGRAM */
	LCD_voidSendData(Copy_u8PatternNumber);
    1e42:	8d 81       	ldd	r24, Y+5	; 0x05
    1e44:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <LCD_voidSendData>
}
    1e48:	27 96       	adiw	r28, 0x07	; 7
    1e4a:	0f b6       	in	r0, 0x3f	; 63
    1e4c:	f8 94       	cli
    1e4e:	de bf       	out	0x3e, r29	; 62
    1e50:	0f be       	out	0x3f, r0	; 63
    1e52:	cd bf       	out	0x3d, r28	; 61
    1e54:	cf 91       	pop	r28
    1e56:	df 91       	pop	r29
    1e58:	08 95       	ret

00001e5a <LCD_voidSendString>:


void LCD_voidSendString(const u8 *Copy_pu8String)
{
    1e5a:	df 93       	push	r29
    1e5c:	cf 93       	push	r28
    1e5e:	00 d0       	rcall	.+0      	; 0x1e60 <LCD_voidSendString+0x6>
    1e60:	0f 92       	push	r0
    1e62:	cd b7       	in	r28, 0x3d	; 61
    1e64:	de b7       	in	r29, 0x3e	; 62
    1e66:	9b 83       	std	Y+3, r25	; 0x03
    1e68:	8a 83       	std	Y+2, r24	; 0x02
	for(u8 Local_u8Iterator = 0; Copy_pu8String[Local_u8Iterator] != '\0'; Local_u8Iterator++)
    1e6a:	19 82       	std	Y+1, r1	; 0x01
    1e6c:	0e c0       	rjmp	.+28     	; 0x1e8a <LCD_voidSendString+0x30>
	{
		LCD_voidSendData(Copy_pu8String[Local_u8Iterator]);
    1e6e:	89 81       	ldd	r24, Y+1	; 0x01
    1e70:	28 2f       	mov	r18, r24
    1e72:	30 e0       	ldi	r19, 0x00	; 0
    1e74:	8a 81       	ldd	r24, Y+2	; 0x02
    1e76:	9b 81       	ldd	r25, Y+3	; 0x03
    1e78:	fc 01       	movw	r30, r24
    1e7a:	e2 0f       	add	r30, r18
    1e7c:	f3 1f       	adc	r31, r19
    1e7e:	80 81       	ld	r24, Z
    1e80:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <LCD_voidSendData>
}


void LCD_voidSendString(const u8 *Copy_pu8String)
{
	for(u8 Local_u8Iterator = 0; Copy_pu8String[Local_u8Iterator] != '\0'; Local_u8Iterator++)
    1e84:	89 81       	ldd	r24, Y+1	; 0x01
    1e86:	8f 5f       	subi	r24, 0xFF	; 255
    1e88:	89 83       	std	Y+1, r24	; 0x01
    1e8a:	89 81       	ldd	r24, Y+1	; 0x01
    1e8c:	28 2f       	mov	r18, r24
    1e8e:	30 e0       	ldi	r19, 0x00	; 0
    1e90:	8a 81       	ldd	r24, Y+2	; 0x02
    1e92:	9b 81       	ldd	r25, Y+3	; 0x03
    1e94:	fc 01       	movw	r30, r24
    1e96:	e2 0f       	add	r30, r18
    1e98:	f3 1f       	adc	r31, r19
    1e9a:	80 81       	ld	r24, Z
    1e9c:	88 23       	and	r24, r24
    1e9e:	39 f7       	brne	.-50     	; 0x1e6e <LCD_voidSendString+0x14>
	{
		LCD_voidSendData(Copy_pu8String[Local_u8Iterator]);
	}
}
    1ea0:	0f 90       	pop	r0
    1ea2:	0f 90       	pop	r0
    1ea4:	0f 90       	pop	r0
    1ea6:	cf 91       	pop	r28
    1ea8:	df 91       	pop	r29
    1eaa:	08 95       	ret

00001eac <LCD_voidSplitNumber>:

void LCD_voidSplitNumber(s32 Copy_s32Number)
{
    1eac:	ef 92       	push	r14
    1eae:	ff 92       	push	r15
    1eb0:	0f 93       	push	r16
    1eb2:	1f 93       	push	r17
    1eb4:	df 93       	push	r29
    1eb6:	cf 93       	push	r28
    1eb8:	cd b7       	in	r28, 0x3d	; 61
    1eba:	de b7       	in	r29, 0x3e	; 62
    1ebc:	62 97       	sbiw	r28, 0x12	; 18
    1ebe:	0f b6       	in	r0, 0x3f	; 63
    1ec0:	f8 94       	cli
    1ec2:	de bf       	out	0x3e, r29	; 62
    1ec4:	0f be       	out	0x3f, r0	; 63
    1ec6:	cd bf       	out	0x3d, r28	; 61
    1ec8:	9a 8b       	std	Y+18, r25	; 0x12
    1eca:	89 8b       	std	Y+17, r24	; 0x11
	s8 Local_s8Array[11], Local_s8Digits = 0;
    1ecc:	1d 82       	std	Y+5, r1	; 0x05
	s32 Local_s32Copy;

	if (Copy_s32Number > 0)
    1ece:	89 89       	ldd	r24, Y+17	; 0x11
    1ed0:	9a 89       	ldd	r25, Y+18	; 0x12
    1ed2:	18 16       	cp	r1, r24
    1ed4:	19 06       	cpc	r1, r25
    1ed6:	bc f4       	brge	.+46     	; 0x1f06 <LCD_voidSplitNumber+0x5a>
	{
		Local_s32Copy = Copy_s32Number;
    1ed8:	89 89       	ldd	r24, Y+17	; 0x11
    1eda:	9a 89       	ldd	r25, Y+18	; 0x12
    1edc:	9c 83       	std	Y+4, r25	; 0x04
    1ede:	8b 83       	std	Y+3, r24	; 0x03
    1ee0:	0d c0       	rjmp	.+26     	; 0x1efc <LCD_voidSplitNumber+0x50>
		while (Local_s32Copy != 0)
		{
			Local_s32Copy /= 10;
    1ee2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ee6:	2a e0       	ldi	r18, 0x0A	; 10
    1ee8:	30 e0       	ldi	r19, 0x00	; 0
    1eea:	b9 01       	movw	r22, r18
    1eec:	0e 94 68 12 	call	0x24d0	; 0x24d0 <__divmodhi4>
    1ef0:	cb 01       	movw	r24, r22
    1ef2:	9c 83       	std	Y+4, r25	; 0x04
    1ef4:	8b 83       	std	Y+3, r24	; 0x03
			Local_s8Digits++;
    1ef6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ef8:	8f 5f       	subi	r24, 0xFF	; 255
    1efa:	8d 83       	std	Y+5, r24	; 0x05
	s32 Local_s32Copy;

	if (Copy_s32Number > 0)
	{
		Local_s32Copy = Copy_s32Number;
		while (Local_s32Copy != 0)
    1efc:	8b 81       	ldd	r24, Y+3	; 0x03
    1efe:	9c 81       	ldd	r25, Y+4	; 0x04
    1f00:	00 97       	sbiw	r24, 0x00	; 0
    1f02:	79 f7       	brne	.-34     	; 0x1ee2 <LCD_voidSplitNumber+0x36>
    1f04:	38 c0       	rjmp	.+112    	; 0x1f76 <LCD_voidSplitNumber+0xca>
		{
			Local_s32Copy /= 10;
			Local_s8Digits++;
		}
	}
	else if (Copy_s32Number < 0)
    1f06:	89 89       	ldd	r24, Y+17	; 0x11
    1f08:	9a 89       	ldd	r25, Y+18	; 0x12
    1f0a:	99 23       	and	r25, r25
    1f0c:	d4 f4       	brge	.+52     	; 0x1f42 <LCD_voidSplitNumber+0x96>
	{
		Local_s32Copy = -Copy_s32Number;
    1f0e:	89 89       	ldd	r24, Y+17	; 0x11
    1f10:	9a 89       	ldd	r25, Y+18	; 0x12
    1f12:	90 95       	com	r25
    1f14:	81 95       	neg	r24
    1f16:	9f 4f       	sbci	r25, 0xFF	; 255
    1f18:	9c 83       	std	Y+4, r25	; 0x04
    1f1a:	8b 83       	std	Y+3, r24	; 0x03
    1f1c:	0d c0       	rjmp	.+26     	; 0x1f38 <LCD_voidSplitNumber+0x8c>

		{
			while (Local_s32Copy != 0)
			{
				Local_s32Copy /= 10;
    1f1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f20:	9c 81       	ldd	r25, Y+4	; 0x04
    1f22:	2a e0       	ldi	r18, 0x0A	; 10
    1f24:	30 e0       	ldi	r19, 0x00	; 0
    1f26:	b9 01       	movw	r22, r18
    1f28:	0e 94 68 12 	call	0x24d0	; 0x24d0 <__divmodhi4>
    1f2c:	cb 01       	movw	r24, r22
    1f2e:	9c 83       	std	Y+4, r25	; 0x04
    1f30:	8b 83       	std	Y+3, r24	; 0x03
				Local_s8Digits++;
    1f32:	8d 81       	ldd	r24, Y+5	; 0x05
    1f34:	8f 5f       	subi	r24, 0xFF	; 255
    1f36:	8d 83       	std	Y+5, r24	; 0x05
	else if (Copy_s32Number < 0)
	{
		Local_s32Copy = -Copy_s32Number;

		{
			while (Local_s32Copy != 0)
    1f38:	8b 81       	ldd	r24, Y+3	; 0x03
    1f3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f3c:	00 97       	sbiw	r24, 0x00	; 0
    1f3e:	79 f7       	brne	.-34     	; 0x1f1e <LCD_voidSplitNumber+0x72>
    1f40:	1a c0       	rjmp	.+52     	; 0x1f76 <LCD_voidSplitNumber+0xca>
			}
		}
	}
	else
	{
		Local_s8Array[Local_s8Digits] = Copy_s32Number;
    1f42:	8d 81       	ldd	r24, Y+5	; 0x05
    1f44:	28 2f       	mov	r18, r24
    1f46:	33 27       	eor	r19, r19
    1f48:	27 fd       	sbrc	r18, 7
    1f4a:	30 95       	com	r19
    1f4c:	49 89       	ldd	r20, Y+17	; 0x11
    1f4e:	ce 01       	movw	r24, r28
    1f50:	06 96       	adiw	r24, 0x06	; 6
    1f52:	fc 01       	movw	r30, r24
    1f54:	e2 0f       	add	r30, r18
    1f56:	f3 1f       	adc	r31, r19
    1f58:	40 83       	st	Z, r20
		LCD_voidSendData(Local_s8Array[Local_s8Digits] + '0');
    1f5a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f5c:	28 2f       	mov	r18, r24
    1f5e:	33 27       	eor	r19, r19
    1f60:	27 fd       	sbrc	r18, 7
    1f62:	30 95       	com	r19
    1f64:	ce 01       	movw	r24, r28
    1f66:	06 96       	adiw	r24, 0x06	; 6
    1f68:	fc 01       	movw	r30, r24
    1f6a:	e2 0f       	add	r30, r18
    1f6c:	f3 1f       	adc	r31, r19
    1f6e:	80 81       	ld	r24, Z
    1f70:	80 5d       	subi	r24, 0xD0	; 208
    1f72:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <LCD_voidSendData>
	}

	if (Local_s8Digits > 0)
    1f76:	8d 81       	ldd	r24, Y+5	; 0x05
    1f78:	18 16       	cp	r1, r24
    1f7a:	0c f0       	brlt	.+2      	; 0x1f7e <LCD_voidSplitNumber+0xd2>
    1f7c:	e4 c0       	rjmp	.+456    	; 0x2146 <LCD_voidSplitNumber+0x29a>
	{
		if (Copy_s32Number > 0)
    1f7e:	89 89       	ldd	r24, Y+17	; 0x11
    1f80:	9a 89       	ldd	r25, Y+18	; 0x12
    1f82:	18 16       	cp	r1, r24
    1f84:	19 06       	cpc	r1, r25
    1f86:	0c f0       	brlt	.+2      	; 0x1f8a <LCD_voidSplitNumber+0xde>
    1f88:	5e c0       	rjmp	.+188    	; 0x2046 <LCD_voidSplitNumber+0x19a>
		{
			for (u8 Local_u8Iterator= 0; Local_s8Digits != 0; Local_u8Iterator++)
    1f8a:	1a 82       	std	Y+2, r1	; 0x02
    1f8c:	57 c0       	rjmp	.+174    	; 0x203c <LCD_voidSplitNumber+0x190>
			{
				Local_s8Array[Local_u8Iterator] = Copy_s32Number / LCD_u32Power(10, Local_s8Digits-1);
    1f8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f90:	e8 2e       	mov	r14, r24
    1f92:	ff 24       	eor	r15, r15
    1f94:	09 89       	ldd	r16, Y+17	; 0x11
    1f96:	1a 89       	ldd	r17, Y+18	; 0x12
    1f98:	8d 81       	ldd	r24, Y+5	; 0x05
    1f9a:	99 27       	eor	r25, r25
    1f9c:	87 fd       	sbrc	r24, 7
    1f9e:	90 95       	com	r25
    1fa0:	01 97       	sbiw	r24, 0x01	; 1
    1fa2:	9c 01       	movw	r18, r24
    1fa4:	8a e0       	ldi	r24, 0x0A	; 10
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	b9 01       	movw	r22, r18
    1faa:	0e 94 b0 10 	call	0x2160	; 0x2160 <LCD_u32Power>
    1fae:	9c 01       	movw	r18, r24
    1fb0:	c8 01       	movw	r24, r16
    1fb2:	b9 01       	movw	r22, r18
    1fb4:	0e 94 54 12 	call	0x24a8	; 0x24a8 <__udivmodhi4>
    1fb8:	cb 01       	movw	r24, r22
    1fba:	28 2f       	mov	r18, r24
    1fbc:	ce 01       	movw	r24, r28
    1fbe:	06 96       	adiw	r24, 0x06	; 6
    1fc0:	fc 01       	movw	r30, r24
    1fc2:	ee 0d       	add	r30, r14
    1fc4:	ff 1d       	adc	r31, r15
    1fc6:	20 83       	st	Z, r18
				Copy_s32Number -= Local_s8Array[Local_u8Iterator] * LCD_u32Power(10, Local_s8Digits-1);
    1fc8:	e9 88       	ldd	r14, Y+17	; 0x11
    1fca:	fa 88       	ldd	r15, Y+18	; 0x12
    1fcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1fce:	28 2f       	mov	r18, r24
    1fd0:	30 e0       	ldi	r19, 0x00	; 0
    1fd2:	ce 01       	movw	r24, r28
    1fd4:	06 96       	adiw	r24, 0x06	; 6
    1fd6:	fc 01       	movw	r30, r24
    1fd8:	e2 0f       	add	r30, r18
    1fda:	f3 1f       	adc	r31, r19
    1fdc:	80 81       	ld	r24, Z
    1fde:	08 2f       	mov	r16, r24
    1fe0:	11 27       	eor	r17, r17
    1fe2:	07 fd       	sbrc	r16, 7
    1fe4:	10 95       	com	r17
    1fe6:	8d 81       	ldd	r24, Y+5	; 0x05
    1fe8:	99 27       	eor	r25, r25
    1fea:	87 fd       	sbrc	r24, 7
    1fec:	90 95       	com	r25
    1fee:	01 97       	sbiw	r24, 0x01	; 1
    1ff0:	9c 01       	movw	r18, r24
    1ff2:	8a e0       	ldi	r24, 0x0A	; 10
    1ff4:	90 e0       	ldi	r25, 0x00	; 0
    1ff6:	b9 01       	movw	r22, r18
    1ff8:	0e 94 b0 10 	call	0x2160	; 0x2160 <LCD_u32Power>
    1ffc:	9c 01       	movw	r18, r24
    1ffe:	02 9f       	mul	r16, r18
    2000:	c0 01       	movw	r24, r0
    2002:	03 9f       	mul	r16, r19
    2004:	90 0d       	add	r25, r0
    2006:	12 9f       	mul	r17, r18
    2008:	90 0d       	add	r25, r0
    200a:	11 24       	eor	r1, r1
    200c:	97 01       	movw	r18, r14
    200e:	28 1b       	sub	r18, r24
    2010:	39 0b       	sbc	r19, r25
    2012:	c9 01       	movw	r24, r18
    2014:	9a 8b       	std	Y+18, r25	; 0x12
    2016:	89 8b       	std	Y+17, r24	; 0x11
				Local_s8Digits--;
    2018:	8d 81       	ldd	r24, Y+5	; 0x05
    201a:	81 50       	subi	r24, 0x01	; 1
    201c:	8d 83       	std	Y+5, r24	; 0x05
				LCD_voidSendData(Local_s8Array[Local_u8Iterator] + '0');
    201e:	8a 81       	ldd	r24, Y+2	; 0x02
    2020:	28 2f       	mov	r18, r24
    2022:	30 e0       	ldi	r19, 0x00	; 0
    2024:	ce 01       	movw	r24, r28
    2026:	06 96       	adiw	r24, 0x06	; 6
    2028:	fc 01       	movw	r30, r24
    202a:	e2 0f       	add	r30, r18
    202c:	f3 1f       	adc	r31, r19
    202e:	80 81       	ld	r24, Z
    2030:	80 5d       	subi	r24, 0xD0	; 208
    2032:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <LCD_voidSendData>

	if (Local_s8Digits > 0)
	{
		if (Copy_s32Number > 0)
		{
			for (u8 Local_u8Iterator= 0; Local_s8Digits != 0; Local_u8Iterator++)
    2036:	8a 81       	ldd	r24, Y+2	; 0x02
    2038:	8f 5f       	subi	r24, 0xFF	; 255
    203a:	8a 83       	std	Y+2, r24	; 0x02
    203c:	8d 81       	ldd	r24, Y+5	; 0x05
    203e:	88 23       	and	r24, r24
    2040:	09 f0       	breq	.+2      	; 0x2044 <LCD_voidSplitNumber+0x198>
    2042:	a5 cf       	rjmp	.-182    	; 0x1f8e <LCD_voidSplitNumber+0xe2>
    2044:	80 c0       	rjmp	.+256    	; 0x2146 <LCD_voidSplitNumber+0x29a>
				LCD_voidSendData(Local_s8Array[Local_u8Iterator] + '0');
			}
		}
		else
		{
			u8 Local_u8Iterator= 0;
    2046:	19 82       	std	Y+1, r1	; 0x01
			Local_s8Array[Local_s8Digits] = '-';
    2048:	8d 81       	ldd	r24, Y+5	; 0x05
    204a:	28 2f       	mov	r18, r24
    204c:	33 27       	eor	r19, r19
    204e:	27 fd       	sbrc	r18, 7
    2050:	30 95       	com	r19
    2052:	ce 01       	movw	r24, r28
    2054:	06 96       	adiw	r24, 0x06	; 6
    2056:	fc 01       	movw	r30, r24
    2058:	e2 0f       	add	r30, r18
    205a:	f3 1f       	adc	r31, r19
    205c:	8d e2       	ldi	r24, 0x2D	; 45
    205e:	80 83       	st	Z, r24
			LCD_voidSendData(Local_s8Array[Local_s8Digits]);
    2060:	8d 81       	ldd	r24, Y+5	; 0x05
    2062:	28 2f       	mov	r18, r24
    2064:	33 27       	eor	r19, r19
    2066:	27 fd       	sbrc	r18, 7
    2068:	30 95       	com	r19
    206a:	ce 01       	movw	r24, r28
    206c:	06 96       	adiw	r24, 0x06	; 6
    206e:	fc 01       	movw	r30, r24
    2070:	e2 0f       	add	r30, r18
    2072:	f3 1f       	adc	r31, r19
    2074:	80 81       	ld	r24, Z
    2076:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <LCD_voidSendData>
			Local_u8Iterator++;
    207a:	89 81       	ldd	r24, Y+1	; 0x01
    207c:	8f 5f       	subi	r24, 0xFF	; 255
    207e:	89 83       	std	Y+1, r24	; 0x01
			Copy_s32Number = -Copy_s32Number;
    2080:	89 89       	ldd	r24, Y+17	; 0x11
    2082:	9a 89       	ldd	r25, Y+18	; 0x12
    2084:	90 95       	com	r25
    2086:	81 95       	neg	r24
    2088:	9f 4f       	sbci	r25, 0xFF	; 255
    208a:	9a 8b       	std	Y+18, r25	; 0x12
    208c:	89 8b       	std	Y+17, r24	; 0x11
    208e:	57 c0       	rjmp	.+174    	; 0x213e <LCD_voidSplitNumber+0x292>
			for (; Local_s8Digits != 0; Local_u8Iterator++)
			{
				Local_s8Array[Local_u8Iterator] = Copy_s32Number / LCD_u32Power(10, Local_s8Digits-1);
    2090:	89 81       	ldd	r24, Y+1	; 0x01
    2092:	e8 2e       	mov	r14, r24
    2094:	ff 24       	eor	r15, r15
    2096:	09 89       	ldd	r16, Y+17	; 0x11
    2098:	1a 89       	ldd	r17, Y+18	; 0x12
    209a:	8d 81       	ldd	r24, Y+5	; 0x05
    209c:	99 27       	eor	r25, r25
    209e:	87 fd       	sbrc	r24, 7
    20a0:	90 95       	com	r25
    20a2:	01 97       	sbiw	r24, 0x01	; 1
    20a4:	9c 01       	movw	r18, r24
    20a6:	8a e0       	ldi	r24, 0x0A	; 10
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	b9 01       	movw	r22, r18
    20ac:	0e 94 b0 10 	call	0x2160	; 0x2160 <LCD_u32Power>
    20b0:	9c 01       	movw	r18, r24
    20b2:	c8 01       	movw	r24, r16
    20b4:	b9 01       	movw	r22, r18
    20b6:	0e 94 54 12 	call	0x24a8	; 0x24a8 <__udivmodhi4>
    20ba:	cb 01       	movw	r24, r22
    20bc:	28 2f       	mov	r18, r24
    20be:	ce 01       	movw	r24, r28
    20c0:	06 96       	adiw	r24, 0x06	; 6
    20c2:	fc 01       	movw	r30, r24
    20c4:	ee 0d       	add	r30, r14
    20c6:	ff 1d       	adc	r31, r15
    20c8:	20 83       	st	Z, r18
				Copy_s32Number -= Local_s8Array[Local_u8Iterator] * LCD_u32Power(10, Local_s8Digits-1);
    20ca:	e9 88       	ldd	r14, Y+17	; 0x11
    20cc:	fa 88       	ldd	r15, Y+18	; 0x12
    20ce:	89 81       	ldd	r24, Y+1	; 0x01
    20d0:	28 2f       	mov	r18, r24
    20d2:	30 e0       	ldi	r19, 0x00	; 0
    20d4:	ce 01       	movw	r24, r28
    20d6:	06 96       	adiw	r24, 0x06	; 6
    20d8:	fc 01       	movw	r30, r24
    20da:	e2 0f       	add	r30, r18
    20dc:	f3 1f       	adc	r31, r19
    20de:	80 81       	ld	r24, Z
    20e0:	08 2f       	mov	r16, r24
    20e2:	11 27       	eor	r17, r17
    20e4:	07 fd       	sbrc	r16, 7
    20e6:	10 95       	com	r17
    20e8:	8d 81       	ldd	r24, Y+5	; 0x05
    20ea:	99 27       	eor	r25, r25
    20ec:	87 fd       	sbrc	r24, 7
    20ee:	90 95       	com	r25
    20f0:	01 97       	sbiw	r24, 0x01	; 1
    20f2:	9c 01       	movw	r18, r24
    20f4:	8a e0       	ldi	r24, 0x0A	; 10
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	b9 01       	movw	r22, r18
    20fa:	0e 94 b0 10 	call	0x2160	; 0x2160 <LCD_u32Power>
    20fe:	9c 01       	movw	r18, r24
    2100:	02 9f       	mul	r16, r18
    2102:	c0 01       	movw	r24, r0
    2104:	03 9f       	mul	r16, r19
    2106:	90 0d       	add	r25, r0
    2108:	12 9f       	mul	r17, r18
    210a:	90 0d       	add	r25, r0
    210c:	11 24       	eor	r1, r1
    210e:	97 01       	movw	r18, r14
    2110:	28 1b       	sub	r18, r24
    2112:	39 0b       	sbc	r19, r25
    2114:	c9 01       	movw	r24, r18
    2116:	9a 8b       	std	Y+18, r25	; 0x12
    2118:	89 8b       	std	Y+17, r24	; 0x11
				Local_s8Digits--;
    211a:	8d 81       	ldd	r24, Y+5	; 0x05
    211c:	81 50       	subi	r24, 0x01	; 1
    211e:	8d 83       	std	Y+5, r24	; 0x05
				LCD_voidSendData(Local_s8Array[Local_u8Iterator] + '0');
    2120:	89 81       	ldd	r24, Y+1	; 0x01
    2122:	28 2f       	mov	r18, r24
    2124:	30 e0       	ldi	r19, 0x00	; 0
    2126:	ce 01       	movw	r24, r28
    2128:	06 96       	adiw	r24, 0x06	; 6
    212a:	fc 01       	movw	r30, r24
    212c:	e2 0f       	add	r30, r18
    212e:	f3 1f       	adc	r31, r19
    2130:	80 81       	ld	r24, Z
    2132:	80 5d       	subi	r24, 0xD0	; 208
    2134:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <LCD_voidSendData>
			u8 Local_u8Iterator= 0;
			Local_s8Array[Local_s8Digits] = '-';
			LCD_voidSendData(Local_s8Array[Local_s8Digits]);
			Local_u8Iterator++;
			Copy_s32Number = -Copy_s32Number;
			for (; Local_s8Digits != 0; Local_u8Iterator++)
    2138:	89 81       	ldd	r24, Y+1	; 0x01
    213a:	8f 5f       	subi	r24, 0xFF	; 255
    213c:	89 83       	std	Y+1, r24	; 0x01
    213e:	8d 81       	ldd	r24, Y+5	; 0x05
    2140:	88 23       	and	r24, r24
    2142:	09 f0       	breq	.+2      	; 0x2146 <LCD_voidSplitNumber+0x29a>
    2144:	a5 cf       	rjmp	.-182    	; 0x2090 <LCD_voidSplitNumber+0x1e4>
				Local_s8Digits--;
				LCD_voidSendData(Local_s8Array[Local_u8Iterator] + '0');
			}
		}
	}
}
    2146:	62 96       	adiw	r28, 0x12	; 18
    2148:	0f b6       	in	r0, 0x3f	; 63
    214a:	f8 94       	cli
    214c:	de bf       	out	0x3e, r29	; 62
    214e:	0f be       	out	0x3f, r0	; 63
    2150:	cd bf       	out	0x3d, r28	; 61
    2152:	cf 91       	pop	r28
    2154:	df 91       	pop	r29
    2156:	1f 91       	pop	r17
    2158:	0f 91       	pop	r16
    215a:	ff 90       	pop	r15
    215c:	ef 90       	pop	r14
    215e:	08 95       	ret

00002160 <LCD_u32Power>:

u32 LCD_u32Power(u32 Copy_u32Base, u32 Copy_u32Power)
{
    2160:	df 93       	push	r29
    2162:	cf 93       	push	r28
    2164:	00 d0       	rcall	.+0      	; 0x2166 <LCD_u32Power+0x6>
    2166:	00 d0       	rcall	.+0      	; 0x2168 <LCD_u32Power+0x8>
    2168:	00 d0       	rcall	.+0      	; 0x216a <LCD_u32Power+0xa>
    216a:	cd b7       	in	r28, 0x3d	; 61
    216c:	de b7       	in	r29, 0x3e	; 62
    216e:	9c 83       	std	Y+4, r25	; 0x04
    2170:	8b 83       	std	Y+3, r24	; 0x03
    2172:	7e 83       	std	Y+6, r23	; 0x06
    2174:	6d 83       	std	Y+5, r22	; 0x05
	u32 Local_u32Number = Copy_u32Base;
    2176:	8b 81       	ldd	r24, Y+3	; 0x03
    2178:	9c 81       	ldd	r25, Y+4	; 0x04
    217a:	9a 83       	std	Y+2, r25	; 0x02
    217c:	89 83       	std	Y+1, r24	; 0x01

	/*Covering the case if the power of number was 0*/
	if(Copy_u32Power == 0)
    217e:	8d 81       	ldd	r24, Y+5	; 0x05
    2180:	9e 81       	ldd	r25, Y+6	; 0x06
    2182:	00 97       	sbiw	r24, 0x00	; 0
    2184:	c1 f4       	brne	.+48     	; 0x21b6 <LCD_u32Power+0x56>
	{
		Copy_u32Base = 1;
    2186:	81 e0       	ldi	r24, 0x01	; 1
    2188:	90 e0       	ldi	r25, 0x00	; 0
    218a:	9c 83       	std	Y+4, r25	; 0x04
    218c:	8b 83       	std	Y+3, r24	; 0x03
    218e:	13 c0       	rjmp	.+38     	; 0x21b6 <LCD_u32Power+0x56>
	}

	/*The body of power function for postive number*/
	for(; Copy_u32Power > 1; Copy_u32Power--)
	{
		Copy_u32Base *= Local_u32Number;
    2190:	2b 81       	ldd	r18, Y+3	; 0x03
    2192:	3c 81       	ldd	r19, Y+4	; 0x04
    2194:	89 81       	ldd	r24, Y+1	; 0x01
    2196:	9a 81       	ldd	r25, Y+2	; 0x02
    2198:	ac 01       	movw	r20, r24
    219a:	24 9f       	mul	r18, r20
    219c:	c0 01       	movw	r24, r0
    219e:	25 9f       	mul	r18, r21
    21a0:	90 0d       	add	r25, r0
    21a2:	34 9f       	mul	r19, r20
    21a4:	90 0d       	add	r25, r0
    21a6:	11 24       	eor	r1, r1
    21a8:	9c 83       	std	Y+4, r25	; 0x04
    21aa:	8b 83       	std	Y+3, r24	; 0x03
	{
		Copy_u32Base = 1;
	}

	/*The body of power function for postive number*/
	for(; Copy_u32Power > 1; Copy_u32Power--)
    21ac:	8d 81       	ldd	r24, Y+5	; 0x05
    21ae:	9e 81       	ldd	r25, Y+6	; 0x06
    21b0:	01 97       	sbiw	r24, 0x01	; 1
    21b2:	9e 83       	std	Y+6, r25	; 0x06
    21b4:	8d 83       	std	Y+5, r24	; 0x05
    21b6:	8d 81       	ldd	r24, Y+5	; 0x05
    21b8:	9e 81       	ldd	r25, Y+6	; 0x06
    21ba:	82 30       	cpi	r24, 0x02	; 2
    21bc:	91 05       	cpc	r25, r1
    21be:	40 f7       	brcc	.-48     	; 0x2190 <LCD_u32Power+0x30>
	{
		Copy_u32Base *= Local_u32Number;
	}
	return Copy_u32Base;
    21c0:	8b 81       	ldd	r24, Y+3	; 0x03
    21c2:	9c 81       	ldd	r25, Y+4	; 0x04
}
    21c4:	26 96       	adiw	r28, 0x06	; 6
    21c6:	0f b6       	in	r0, 0x3f	; 63
    21c8:	f8 94       	cli
    21ca:	de bf       	out	0x3e, r29	; 62
    21cc:	0f be       	out	0x3f, r0	; 63
    21ce:	cd bf       	out	0x3d, r28	; 61
    21d0:	cf 91       	pop	r28
    21d2:	df 91       	pop	r29
    21d4:	08 95       	ret

000021d6 <KPD_voidInit>:
#include "KPD_interface.h"
#include "KPD_private.h"
#include "KPD_config.h"

void KPD_voidInit(void)
{
    21d6:	df 93       	push	r29
    21d8:	cf 93       	push	r28
    21da:	cd b7       	in	r28, 0x3d	; 61
    21dc:	de b7       	in	r29, 0x3e	; 62
	/* Set the columns pins to be output */
	DIO_u8SetPinDirection(KPD_COLUMNS_PORT, KPD_COLUMN0_PIN, DIO_PIN_OUTPUT);
    21de:	80 e0       	ldi	r24, 0x00	; 0
    21e0:	63 e0       	ldi	r22, 0x03	; 3
    21e2:	41 e0       	ldi	r20, 0x01	; 1
    21e4:	0e 94 dd 07 	call	0xfba	; 0xfba <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_COLUMNS_PORT, KPD_COLUMN1_PIN, DIO_PIN_OUTPUT);
    21e8:	80 e0       	ldi	r24, 0x00	; 0
    21ea:	62 e0       	ldi	r22, 0x02	; 2
    21ec:	41 e0       	ldi	r20, 0x01	; 1
    21ee:	0e 94 dd 07 	call	0xfba	; 0xfba <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_COLUMNS_PORT, KPD_COLUMN2_PIN, DIO_PIN_OUTPUT);
    21f2:	80 e0       	ldi	r24, 0x00	; 0
    21f4:	61 e0       	ldi	r22, 0x01	; 1
    21f6:	41 e0       	ldi	r20, 0x01	; 1
    21f8:	0e 94 dd 07 	call	0xfba	; 0xfba <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_COLUMNS_PORT, KPD_COLUMN3_PIN, DIO_PIN_OUTPUT);
    21fc:	80 e0       	ldi	r24, 0x00	; 0
    21fe:	60 e0       	ldi	r22, 0x00	; 0
    2200:	41 e0       	ldi	r20, 0x01	; 1
    2202:	0e 94 dd 07 	call	0xfba	; 0xfba <DIO_u8SetPinDirection>

	/* Set the columns pins to be high */
	DIO_u8SetPinValue(KPD_COLUMNS_PORT, KPD_COLUMN0_PIN, DIO_PIN_HIGH);
    2206:	80 e0       	ldi	r24, 0x00	; 0
    2208:	63 e0       	ldi	r22, 0x03	; 3
    220a:	41 e0       	ldi	r20, 0x01	; 1
    220c:	0e 94 ef 08 	call	0x11de	; 0x11de <DIO_u8SetPinValue>
	DIO_u8SetPinValue(KPD_COLUMNS_PORT, KPD_COLUMN1_PIN, DIO_PIN_HIGH);
    2210:	80 e0       	ldi	r24, 0x00	; 0
    2212:	62 e0       	ldi	r22, 0x02	; 2
    2214:	41 e0       	ldi	r20, 0x01	; 1
    2216:	0e 94 ef 08 	call	0x11de	; 0x11de <DIO_u8SetPinValue>
	DIO_u8SetPinValue(KPD_COLUMNS_PORT, KPD_COLUMN2_PIN, DIO_PIN_HIGH);
    221a:	80 e0       	ldi	r24, 0x00	; 0
    221c:	61 e0       	ldi	r22, 0x01	; 1
    221e:	41 e0       	ldi	r20, 0x01	; 1
    2220:	0e 94 ef 08 	call	0x11de	; 0x11de <DIO_u8SetPinValue>
	DIO_u8SetPinValue(KPD_COLUMNS_PORT, KPD_COLUMN3_PIN, DIO_PIN_HIGH);
    2224:	80 e0       	ldi	r24, 0x00	; 0
    2226:	60 e0       	ldi	r22, 0x00	; 0
    2228:	41 e0       	ldi	r20, 0x01	; 1
    222a:	0e 94 ef 08 	call	0x11de	; 0x11de <DIO_u8SetPinValue>

	/* Set the rows pins to be input */
	DIO_u8SetPinDirection(KPD_ROWS_PORT, KPD_ROW0_PIN, DIO_PIN_INPUT);
    222e:	80 e0       	ldi	r24, 0x00	; 0
    2230:	64 e0       	ldi	r22, 0x04	; 4
    2232:	40 e0       	ldi	r20, 0x00	; 0
    2234:	0e 94 dd 07 	call	0xfba	; 0xfba <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_ROWS_PORT, KPD_ROW1_PIN, DIO_PIN_INPUT);
    2238:	80 e0       	ldi	r24, 0x00	; 0
    223a:	65 e0       	ldi	r22, 0x05	; 5
    223c:	40 e0       	ldi	r20, 0x00	; 0
    223e:	0e 94 dd 07 	call	0xfba	; 0xfba <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_ROWS_PORT, KPD_ROW2_PIN, DIO_PIN_INPUT);
    2242:	80 e0       	ldi	r24, 0x00	; 0
    2244:	66 e0       	ldi	r22, 0x06	; 6
    2246:	40 e0       	ldi	r20, 0x00	; 0
    2248:	0e 94 dd 07 	call	0xfba	; 0xfba <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_ROWS_PORT, KPD_ROW3_PIN, DIO_PIN_INPUT);
    224c:	80 e0       	ldi	r24, 0x00	; 0
    224e:	67 e0       	ldi	r22, 0x07	; 7
    2250:	40 e0       	ldi	r20, 0x00	; 0
    2252:	0e 94 dd 07 	call	0xfba	; 0xfba <DIO_u8SetPinDirection>

	/* Set the rows pins to be pulled up */
	DIO_u8SetPinValue(KPD_ROWS_PORT, KPD_ROW0_PIN, DIO_PULLUP);
    2256:	80 e0       	ldi	r24, 0x00	; 0
    2258:	64 e0       	ldi	r22, 0x04	; 4
    225a:	41 e0       	ldi	r20, 0x01	; 1
    225c:	0e 94 ef 08 	call	0x11de	; 0x11de <DIO_u8SetPinValue>
	DIO_u8SetPinValue(KPD_ROWS_PORT, KPD_ROW1_PIN, DIO_PULLUP);
    2260:	80 e0       	ldi	r24, 0x00	; 0
    2262:	65 e0       	ldi	r22, 0x05	; 5
    2264:	41 e0       	ldi	r20, 0x01	; 1
    2266:	0e 94 ef 08 	call	0x11de	; 0x11de <DIO_u8SetPinValue>
	DIO_u8SetPinValue(KPD_ROWS_PORT, KPD_ROW2_PIN, DIO_PULLUP);
    226a:	80 e0       	ldi	r24, 0x00	; 0
    226c:	66 e0       	ldi	r22, 0x06	; 6
    226e:	41 e0       	ldi	r20, 0x01	; 1
    2270:	0e 94 ef 08 	call	0x11de	; 0x11de <DIO_u8SetPinValue>
	DIO_u8SetPinValue(KPD_ROWS_PORT, KPD_ROW3_PIN, DIO_PULLUP);
    2274:	80 e0       	ldi	r24, 0x00	; 0
    2276:	67 e0       	ldi	r22, 0x07	; 7
    2278:	41 e0       	ldi	r20, 0x01	; 1
    227a:	0e 94 ef 08 	call	0x11de	; 0x11de <DIO_u8SetPinValue>
}
    227e:	cf 91       	pop	r28
    2280:	df 91       	pop	r29
    2282:	08 95       	ret

00002284 <KPD_u8GetPressedKey>:

u8 KPD_u8GetPressedKey(void)
{
    2284:	df 93       	push	r29
    2286:	cf 93       	push	r28
    2288:	cd b7       	in	r28, 0x3d	; 61
    228a:	de b7       	in	r29, 0x3e	; 62
    228c:	a2 97       	sbiw	r28, 0x22	; 34
    228e:	0f b6       	in	r0, 0x3f	; 63
    2290:	f8 94       	cli
    2292:	de bf       	out	0x3e, r29	; 62
    2294:	0f be       	out	0x3f, r0	; 63
    2296:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8ColumnsIndex, Local_u8RowsIndex, Local_u8PinState, Local_u8PressedKey = KPD_NO_PRESSED_KEY;
    2298:	8a ea       	ldi	r24, 0xAA	; 170
    229a:	89 83       	std	Y+1, r24	; 0x01
	u8 Local_u8ColumnsArray[4] = {KPD_COLUMN0_PIN, KPD_COLUMN1_PIN, KPD_COLUMN2_PIN, KPD_COLUMN3_PIN};
    229c:	83 e0       	ldi	r24, 0x03	; 3
    229e:	8d 83       	std	Y+5, r24	; 0x05
    22a0:	82 e0       	ldi	r24, 0x02	; 2
    22a2:	8e 83       	std	Y+6, r24	; 0x06
    22a4:	81 e0       	ldi	r24, 0x01	; 1
    22a6:	8f 83       	std	Y+7, r24	; 0x07
    22a8:	18 86       	std	Y+8, r1	; 0x08
	u8 Local_u8RowsArray[4] = {KPD_ROW0_PIN, KPD_ROW1_PIN, KPD_ROW2_PIN, KPD_ROW3_PIN};
    22aa:	84 e0       	ldi	r24, 0x04	; 4
    22ac:	89 87       	std	Y+9, r24	; 0x09
    22ae:	85 e0       	ldi	r24, 0x05	; 5
    22b0:	8a 87       	std	Y+10, r24	; 0x0a
    22b2:	86 e0       	ldi	r24, 0x06	; 6
    22b4:	8b 87       	std	Y+11, r24	; 0x0b
    22b6:	87 e0       	ldi	r24, 0x07	; 7
    22b8:	8c 87       	std	Y+12, r24	; 0x0c
	u8 Local_u8KeysArray[4][4] = KPD_KEYS_ARRAYS_VALUES;
    22ba:	ce 01       	movw	r24, r28
    22bc:	0d 96       	adiw	r24, 0x0d	; 13
    22be:	9f 8f       	std	Y+31, r25	; 0x1f
    22c0:	8e 8f       	std	Y+30, r24	; 0x1e
    22c2:	e2 e7       	ldi	r30, 0x72	; 114
    22c4:	f0 e0       	ldi	r31, 0x00	; 0
    22c6:	f9 a3       	std	Y+33, r31	; 0x21
    22c8:	e8 a3       	std	Y+32, r30	; 0x20
    22ca:	f0 e1       	ldi	r31, 0x10	; 16
    22cc:	fa a3       	std	Y+34, r31	; 0x22
    22ce:	e8 a1       	ldd	r30, Y+32	; 0x20
    22d0:	f9 a1       	ldd	r31, Y+33	; 0x21
    22d2:	00 80       	ld	r0, Z
    22d4:	88 a1       	ldd	r24, Y+32	; 0x20
    22d6:	99 a1       	ldd	r25, Y+33	; 0x21
    22d8:	01 96       	adiw	r24, 0x01	; 1
    22da:	99 a3       	std	Y+33, r25	; 0x21
    22dc:	88 a3       	std	Y+32, r24	; 0x20
    22de:	ee 8d       	ldd	r30, Y+30	; 0x1e
    22e0:	ff 8d       	ldd	r31, Y+31	; 0x1f
    22e2:	00 82       	st	Z, r0
    22e4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    22e6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    22e8:	01 96       	adiw	r24, 0x01	; 1
    22ea:	9f 8f       	std	Y+31, r25	; 0x1f
    22ec:	8e 8f       	std	Y+30, r24	; 0x1e
    22ee:	9a a1       	ldd	r25, Y+34	; 0x22
    22f0:	91 50       	subi	r25, 0x01	; 1
    22f2:	9a a3       	std	Y+34, r25	; 0x22
    22f4:	ea a1       	ldd	r30, Y+34	; 0x22
    22f6:	ee 23       	and	r30, r30
    22f8:	51 f7       	brne	.-44     	; 0x22ce <KPD_u8GetPressedKey+0x4a>

	/* Loop for columns */
	for (Local_u8ColumnsIndex = 0; Local_u8ColumnsIndex < 4; Local_u8ColumnsIndex++)
    22fa:	1b 82       	std	Y+3, r1	; 0x03
    22fc:	68 c0       	rjmp	.+208    	; 0x23ce <KPD_u8GetPressedKey+0x14a>
	{
		/* Activate Current Column */
		DIO_u8SetPinValue(KPD_COLUMNS_PORT, Local_u8ColumnsArray[Local_u8ColumnsIndex], DIO_PIN_LOW);
    22fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2300:	28 2f       	mov	r18, r24
    2302:	30 e0       	ldi	r19, 0x00	; 0
    2304:	ce 01       	movw	r24, r28
    2306:	05 96       	adiw	r24, 0x05	; 5
    2308:	fc 01       	movw	r30, r24
    230a:	e2 0f       	add	r30, r18
    230c:	f3 1f       	adc	r31, r19
    230e:	90 81       	ld	r25, Z
    2310:	80 e0       	ldi	r24, 0x00	; 0
    2312:	69 2f       	mov	r22, r25
    2314:	40 e0       	ldi	r20, 0x00	; 0
    2316:	0e 94 ef 08 	call	0x11de	; 0x11de <DIO_u8SetPinValue>

		/* Loops for rows */
		for(Local_u8RowsIndex = 0; Local_u8RowsIndex < 4; Local_u8RowsIndex++)
    231a:	1a 82       	std	Y+2, r1	; 0x02
    231c:	43 c0       	rjmp	.+134    	; 0x23a4 <KPD_u8GetPressedKey+0x120>
		{
			DIO_u8GetPinValue(KPD_ROWS_PORT, Local_u8RowsArray[Local_u8RowsIndex], &Local_u8PinState);
    231e:	8a 81       	ldd	r24, Y+2	; 0x02
    2320:	28 2f       	mov	r18, r24
    2322:	30 e0       	ldi	r19, 0x00	; 0
    2324:	ce 01       	movw	r24, r28
    2326:	09 96       	adiw	r24, 0x09	; 9
    2328:	fc 01       	movw	r30, r24
    232a:	e2 0f       	add	r30, r18
    232c:	f3 1f       	adc	r31, r19
    232e:	90 81       	ld	r25, Z
    2330:	9e 01       	movw	r18, r28
    2332:	2c 5f       	subi	r18, 0xFC	; 252
    2334:	3f 4f       	sbci	r19, 0xFF	; 255
    2336:	80 e0       	ldi	r24, 0x00	; 0
    2338:	69 2f       	mov	r22, r25
    233a:	a9 01       	movw	r20, r18
    233c:	0e 94 01 0a 	call	0x1402	; 0x1402 <DIO_u8GetPinValue>
			if(Local_u8PinState == 0)
    2340:	8c 81       	ldd	r24, Y+4	; 0x04
    2342:	88 23       	and	r24, r24
    2344:	61 f5       	brne	.+88     	; 0x239e <KPD_u8GetPressedKey+0x11a>
			{
				/* Get the pressed Key */
				Local_u8PressedKey = Local_u8KeysArray[Local_u8RowsIndex][Local_u8ColumnsIndex];
    2346:	8a 81       	ldd	r24, Y+2	; 0x02
    2348:	28 2f       	mov	r18, r24
    234a:	30 e0       	ldi	r19, 0x00	; 0
    234c:	8b 81       	ldd	r24, Y+3	; 0x03
    234e:	48 2f       	mov	r20, r24
    2350:	50 e0       	ldi	r21, 0x00	; 0
    2352:	22 0f       	add	r18, r18
    2354:	33 1f       	adc	r19, r19
    2356:	22 0f       	add	r18, r18
    2358:	33 1f       	adc	r19, r19
    235a:	ce 01       	movw	r24, r28
    235c:	01 96       	adiw	r24, 0x01	; 1
    235e:	82 0f       	add	r24, r18
    2360:	93 1f       	adc	r25, r19
    2362:	84 0f       	add	r24, r20
    2364:	95 1f       	adc	r25, r21
    2366:	fc 01       	movw	r30, r24
    2368:	3c 96       	adiw	r30, 0x0c	; 12
    236a:	80 81       	ld	r24, Z
    236c:	89 83       	std	Y+1, r24	; 0x01
    236e:	11 c0       	rjmp	.+34     	; 0x2392 <KPD_u8GetPressedKey+0x10e>
				/* Polling (Busy Waiting), Wait until the pressed key is released */
				while(Local_u8PinState == 0)
				{
					DIO_u8GetPinValue(KPD_ROWS_PORT, Local_u8RowsArray[Local_u8RowsIndex], &Local_u8PinState);
    2370:	8a 81       	ldd	r24, Y+2	; 0x02
    2372:	28 2f       	mov	r18, r24
    2374:	30 e0       	ldi	r19, 0x00	; 0
    2376:	ce 01       	movw	r24, r28
    2378:	09 96       	adiw	r24, 0x09	; 9
    237a:	fc 01       	movw	r30, r24
    237c:	e2 0f       	add	r30, r18
    237e:	f3 1f       	adc	r31, r19
    2380:	90 81       	ld	r25, Z
    2382:	9e 01       	movw	r18, r28
    2384:	2c 5f       	subi	r18, 0xFC	; 252
    2386:	3f 4f       	sbci	r19, 0xFF	; 255
    2388:	80 e0       	ldi	r24, 0x00	; 0
    238a:	69 2f       	mov	r22, r25
    238c:	a9 01       	movw	r20, r18
    238e:	0e 94 01 0a 	call	0x1402	; 0x1402 <DIO_u8GetPinValue>
			if(Local_u8PinState == 0)
			{
				/* Get the pressed Key */
				Local_u8PressedKey = Local_u8KeysArray[Local_u8RowsIndex][Local_u8ColumnsIndex];
				/* Polling (Busy Waiting), Wait until the pressed key is released */
				while(Local_u8PinState == 0)
    2392:	8c 81       	ldd	r24, Y+4	; 0x04
    2394:	88 23       	and	r24, r24
    2396:	61 f3       	breq	.-40     	; 0x2370 <KPD_u8GetPressedKey+0xec>
				{
					DIO_u8GetPinValue(KPD_ROWS_PORT, Local_u8RowsArray[Local_u8RowsIndex], &Local_u8PinState);
				}
				return Local_u8PressedKey;
    2398:	f9 81       	ldd	r31, Y+1	; 0x01
    239a:	fd 8f       	std	Y+29, r31	; 0x1d
    239c:	1e c0       	rjmp	.+60     	; 0x23da <KPD_u8GetPressedKey+0x156>
	{
		/* Activate Current Column */
		DIO_u8SetPinValue(KPD_COLUMNS_PORT, Local_u8ColumnsArray[Local_u8ColumnsIndex], DIO_PIN_LOW);

		/* Loops for rows */
		for(Local_u8RowsIndex = 0; Local_u8RowsIndex < 4; Local_u8RowsIndex++)
    239e:	8a 81       	ldd	r24, Y+2	; 0x02
    23a0:	8f 5f       	subi	r24, 0xFF	; 255
    23a2:	8a 83       	std	Y+2, r24	; 0x02
    23a4:	8a 81       	ldd	r24, Y+2	; 0x02
    23a6:	84 30       	cpi	r24, 0x04	; 4
    23a8:	08 f4       	brcc	.+2      	; 0x23ac <KPD_u8GetPressedKey+0x128>
    23aa:	b9 cf       	rjmp	.-142    	; 0x231e <KPD_u8GetPressedKey+0x9a>
				}
				return Local_u8PressedKey;
			}
		}
		/* Deactivate Current Column */
		DIO_u8SetPinValue(KPD_COLUMNS_PORT, Local_u8ColumnsArray[Local_u8ColumnsIndex], DIO_PIN_HIGH);
    23ac:	8b 81       	ldd	r24, Y+3	; 0x03
    23ae:	28 2f       	mov	r18, r24
    23b0:	30 e0       	ldi	r19, 0x00	; 0
    23b2:	ce 01       	movw	r24, r28
    23b4:	05 96       	adiw	r24, 0x05	; 5
    23b6:	fc 01       	movw	r30, r24
    23b8:	e2 0f       	add	r30, r18
    23ba:	f3 1f       	adc	r31, r19
    23bc:	90 81       	ld	r25, Z
    23be:	80 e0       	ldi	r24, 0x00	; 0
    23c0:	69 2f       	mov	r22, r25
    23c2:	41 e0       	ldi	r20, 0x01	; 1
    23c4:	0e 94 ef 08 	call	0x11de	; 0x11de <DIO_u8SetPinValue>
	u8 Local_u8ColumnsArray[4] = {KPD_COLUMN0_PIN, KPD_COLUMN1_PIN, KPD_COLUMN2_PIN, KPD_COLUMN3_PIN};
	u8 Local_u8RowsArray[4] = {KPD_ROW0_PIN, KPD_ROW1_PIN, KPD_ROW2_PIN, KPD_ROW3_PIN};
	u8 Local_u8KeysArray[4][4] = KPD_KEYS_ARRAYS_VALUES;

	/* Loop for columns */
	for (Local_u8ColumnsIndex = 0; Local_u8ColumnsIndex < 4; Local_u8ColumnsIndex++)
    23c8:	8b 81       	ldd	r24, Y+3	; 0x03
    23ca:	8f 5f       	subi	r24, 0xFF	; 255
    23cc:	8b 83       	std	Y+3, r24	; 0x03
    23ce:	8b 81       	ldd	r24, Y+3	; 0x03
    23d0:	84 30       	cpi	r24, 0x04	; 4
    23d2:	08 f4       	brcc	.+2      	; 0x23d6 <KPD_u8GetPressedKey+0x152>
    23d4:	94 cf       	rjmp	.-216    	; 0x22fe <KPD_u8GetPressedKey+0x7a>
			}
		}
		/* Deactivate Current Column */
		DIO_u8SetPinValue(KPD_COLUMNS_PORT, Local_u8ColumnsArray[Local_u8ColumnsIndex], DIO_PIN_HIGH);
	}
	return Local_u8PressedKey;
    23d6:	89 81       	ldd	r24, Y+1	; 0x01
    23d8:	8d 8f       	std	Y+29, r24	; 0x1d
    23da:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    23dc:	a2 96       	adiw	r28, 0x22	; 34
    23de:	0f b6       	in	r0, 0x3f	; 63
    23e0:	f8 94       	cli
    23e2:	de bf       	out	0x3e, r29	; 62
    23e4:	0f be       	out	0x3f, r0	; 63
    23e6:	cd bf       	out	0x3d, r28	; 61
    23e8:	cf 91       	pop	r28
    23ea:	df 91       	pop	r29
    23ec:	08 95       	ret

000023ee <H_Bridge_voidIntialization>:
#include "H_Bridge_interface.h"
#include "H_Bridge_private.h"


void H_Bridge_voidIntialization (void)
{
    23ee:	df 93       	push	r29
    23f0:	cf 93       	push	r28
    23f2:	cd b7       	in	r28, 0x3d	; 61
    23f4:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDirection(H_BRIDGE_PORT, H_BRIDGE_FIRST_DIRECTION_PIN, DIO_PIN_OUTPUT);
    23f6:	80 e0       	ldi	r24, 0x00	; 0
    23f8:	60 e0       	ldi	r22, 0x00	; 0
    23fa:	41 e0       	ldi	r20, 0x01	; 1
    23fc:	0e 94 dd 07 	call	0xfba	; 0xfba <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(H_BRIDGE_PORT, H_BRIDGE_SECOND_DIRECTION_PIN, DIO_PIN_OUTPUT);
    2400:	80 e0       	ldi	r24, 0x00	; 0
    2402:	61 e0       	ldi	r22, 0x01	; 1
    2404:	41 e0       	ldi	r20, 0x01	; 1
    2406:	0e 94 dd 07 	call	0xfba	; 0xfba <DIO_u8SetPinDirection>
}
    240a:	cf 91       	pop	r28
    240c:	df 91       	pop	r29
    240e:	08 95       	ret

00002410 <H_Bridge_voidFirstDirection>:

void H_Bridge_voidFirstDirection (void)
{
    2410:	df 93       	push	r29
    2412:	cf 93       	push	r28
    2414:	cd b7       	in	r28, 0x3d	; 61
    2416:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(H_BRIDGE_PORT, H_BRIDGE_SECOND_DIRECTION_PIN, DIO_PIN_LOW);
    2418:	80 e0       	ldi	r24, 0x00	; 0
    241a:	61 e0       	ldi	r22, 0x01	; 1
    241c:	40 e0       	ldi	r20, 0x00	; 0
    241e:	0e 94 ef 08 	call	0x11de	; 0x11de <DIO_u8SetPinValue>
	DIO_u8SetPinValue(H_BRIDGE_PORT, H_BRIDGE_FIRST_DIRECTION_PIN, DIO_PIN_HIGH);
    2422:	80 e0       	ldi	r24, 0x00	; 0
    2424:	60 e0       	ldi	r22, 0x00	; 0
    2426:	41 e0       	ldi	r20, 0x01	; 1
    2428:	0e 94 ef 08 	call	0x11de	; 0x11de <DIO_u8SetPinValue>
}
    242c:	cf 91       	pop	r28
    242e:	df 91       	pop	r29
    2430:	08 95       	ret

00002432 <H_Bridge_voidSecondDirection>:

void H_Bridge_voidSecondDirection (void)
{
    2432:	df 93       	push	r29
    2434:	cf 93       	push	r28
    2436:	cd b7       	in	r28, 0x3d	; 61
    2438:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(H_BRIDGE_PORT, H_BRIDGE_FIRST_DIRECTION_PIN, DIO_PIN_LOW);
    243a:	80 e0       	ldi	r24, 0x00	; 0
    243c:	60 e0       	ldi	r22, 0x00	; 0
    243e:	40 e0       	ldi	r20, 0x00	; 0
    2440:	0e 94 ef 08 	call	0x11de	; 0x11de <DIO_u8SetPinValue>
	DIO_u8SetPinValue(H_BRIDGE_PORT, H_BRIDGE_SECOND_DIRECTION_PIN, DIO_PIN_HIGH);
    2444:	80 e0       	ldi	r24, 0x00	; 0
    2446:	61 e0       	ldi	r22, 0x01	; 1
    2448:	41 e0       	ldi	r20, 0x01	; 1
    244a:	0e 94 ef 08 	call	0x11de	; 0x11de <DIO_u8SetPinValue>
}
    244e:	cf 91       	pop	r28
    2450:	df 91       	pop	r29
    2452:	08 95       	ret

00002454 <H_Bridge_voidStop>:

void H_Bridge_voidStop (void)
{
    2454:	df 93       	push	r29
    2456:	cf 93       	push	r28
    2458:	cd b7       	in	r28, 0x3d	; 61
    245a:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(H_BRIDGE_PORT, H_BRIDGE_FIRST_DIRECTION_PIN, DIO_PIN_LOW);
    245c:	80 e0       	ldi	r24, 0x00	; 0
    245e:	60 e0       	ldi	r22, 0x00	; 0
    2460:	40 e0       	ldi	r20, 0x00	; 0
    2462:	0e 94 ef 08 	call	0x11de	; 0x11de <DIO_u8SetPinValue>
	DIO_u8SetPinValue(H_BRIDGE_PORT, H_BRIDGE_SECOND_DIRECTION_PIN, DIO_PIN_LOW);
    2466:	80 e0       	ldi	r24, 0x00	; 0
    2468:	61 e0       	ldi	r22, 0x01	; 1
    246a:	40 e0       	ldi	r20, 0x00	; 0
    246c:	0e 94 ef 08 	call	0x11de	; 0x11de <DIO_u8SetPinValue>
}
    2470:	cf 91       	pop	r28
    2472:	df 91       	pop	r29
    2474:	08 95       	ret

00002476 <main>:
#include "../MCAL/DIO/DIO_interface.h"
#include "../MCAL/GIE/GIE_interface.h"
#include "../MCAL/EXTI/EXTI_interface.h"

void main (void)
{
    2476:	df 93       	push	r29
    2478:	cf 93       	push	r28
    247a:	cd b7       	in	r28, 0x3d	; 61
    247c:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDirection(DIO_PORTD, DIO_PIN2, DIO_PIN_INPUT);
    247e:	83 e0       	ldi	r24, 0x03	; 3
    2480:	62 e0       	ldi	r22, 0x02	; 2
    2482:	40 e0       	ldi	r20, 0x00	; 0
    2484:	0e 94 dd 07 	call	0xfba	; 0xfba <DIO_u8SetPinDirection>
	DIO_u8SetPinValue(DIO_PORTD, DIO_PIN2, DIO_PULLUP);
    2488:	83 e0       	ldi	r24, 0x03	; 3
    248a:	62 e0       	ldi	r22, 0x02	; 2
    248c:	41 e0       	ldi	r20, 0x01	; 1
    248e:	0e 94 ef 08 	call	0x11de	; 0x11de <DIO_u8SetPinValue>
	EXTI_voidSetInt0SenseControl(FALLING_EDGE);
    2492:	80 e0       	ldi	r24, 0x00	; 0
    2494:	0e 94 b7 05 	call	0xb6e	; 0xb6e <EXTI_voidSetInt0SenseControl>
	GIE_voidEnableGlobalInterrupt();
    2498:	0e 94 9b 05 	call	0xb36	; 0xb36 <GIE_voidEnableGlobalInterrupt>
	DIO_u8SetPinDirection(DIO_PORTC, DIO_PIN7, DIO_PIN_OUTPUT);
    249c:	82 e0       	ldi	r24, 0x02	; 2
    249e:	67 e0       	ldi	r22, 0x07	; 7
    24a0:	41 e0       	ldi	r20, 0x01	; 1
    24a2:	0e 94 dd 07 	call	0xfba	; 0xfba <DIO_u8SetPinDirection>
    24a6:	ff cf       	rjmp	.-2      	; 0x24a6 <main+0x30>

000024a8 <__udivmodhi4>:
    24a8:	aa 1b       	sub	r26, r26
    24aa:	bb 1b       	sub	r27, r27
    24ac:	51 e1       	ldi	r21, 0x11	; 17
    24ae:	07 c0       	rjmp	.+14     	; 0x24be <__udivmodhi4_ep>

000024b0 <__udivmodhi4_loop>:
    24b0:	aa 1f       	adc	r26, r26
    24b2:	bb 1f       	adc	r27, r27
    24b4:	a6 17       	cp	r26, r22
    24b6:	b7 07       	cpc	r27, r23
    24b8:	10 f0       	brcs	.+4      	; 0x24be <__udivmodhi4_ep>
    24ba:	a6 1b       	sub	r26, r22
    24bc:	b7 0b       	sbc	r27, r23

000024be <__udivmodhi4_ep>:
    24be:	88 1f       	adc	r24, r24
    24c0:	99 1f       	adc	r25, r25
    24c2:	5a 95       	dec	r21
    24c4:	a9 f7       	brne	.-22     	; 0x24b0 <__udivmodhi4_loop>
    24c6:	80 95       	com	r24
    24c8:	90 95       	com	r25
    24ca:	bc 01       	movw	r22, r24
    24cc:	cd 01       	movw	r24, r26
    24ce:	08 95       	ret

000024d0 <__divmodhi4>:
    24d0:	97 fb       	bst	r25, 7
    24d2:	09 2e       	mov	r0, r25
    24d4:	07 26       	eor	r0, r23
    24d6:	0a d0       	rcall	.+20     	; 0x24ec <__divmodhi4_neg1>
    24d8:	77 fd       	sbrc	r23, 7
    24da:	04 d0       	rcall	.+8      	; 0x24e4 <__divmodhi4_neg2>
    24dc:	e5 df       	rcall	.-54     	; 0x24a8 <__udivmodhi4>
    24de:	06 d0       	rcall	.+12     	; 0x24ec <__divmodhi4_neg1>
    24e0:	00 20       	and	r0, r0
    24e2:	1a f4       	brpl	.+6      	; 0x24ea <__divmodhi4_exit>

000024e4 <__divmodhi4_neg2>:
    24e4:	70 95       	com	r23
    24e6:	61 95       	neg	r22
    24e8:	7f 4f       	sbci	r23, 0xFF	; 255

000024ea <__divmodhi4_exit>:
    24ea:	08 95       	ret

000024ec <__divmodhi4_neg1>:
    24ec:	f6 f7       	brtc	.-4      	; 0x24ea <__divmodhi4_exit>
    24ee:	90 95       	com	r25
    24f0:	81 95       	neg	r24
    24f2:	9f 4f       	sbci	r25, 0xFF	; 255
    24f4:	08 95       	ret

000024f6 <__prologue_saves__>:
    24f6:	2f 92       	push	r2
    24f8:	3f 92       	push	r3
    24fa:	4f 92       	push	r4
    24fc:	5f 92       	push	r5
    24fe:	6f 92       	push	r6
    2500:	7f 92       	push	r7
    2502:	8f 92       	push	r8
    2504:	9f 92       	push	r9
    2506:	af 92       	push	r10
    2508:	bf 92       	push	r11
    250a:	cf 92       	push	r12
    250c:	df 92       	push	r13
    250e:	ef 92       	push	r14
    2510:	ff 92       	push	r15
    2512:	0f 93       	push	r16
    2514:	1f 93       	push	r17
    2516:	cf 93       	push	r28
    2518:	df 93       	push	r29
    251a:	cd b7       	in	r28, 0x3d	; 61
    251c:	de b7       	in	r29, 0x3e	; 62
    251e:	ca 1b       	sub	r28, r26
    2520:	db 0b       	sbc	r29, r27
    2522:	0f b6       	in	r0, 0x3f	; 63
    2524:	f8 94       	cli
    2526:	de bf       	out	0x3e, r29	; 62
    2528:	0f be       	out	0x3f, r0	; 63
    252a:	cd bf       	out	0x3d, r28	; 61
    252c:	09 94       	ijmp

0000252e <__epilogue_restores__>:
    252e:	2a 88       	ldd	r2, Y+18	; 0x12
    2530:	39 88       	ldd	r3, Y+17	; 0x11
    2532:	48 88       	ldd	r4, Y+16	; 0x10
    2534:	5f 84       	ldd	r5, Y+15	; 0x0f
    2536:	6e 84       	ldd	r6, Y+14	; 0x0e
    2538:	7d 84       	ldd	r7, Y+13	; 0x0d
    253a:	8c 84       	ldd	r8, Y+12	; 0x0c
    253c:	9b 84       	ldd	r9, Y+11	; 0x0b
    253e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2540:	b9 84       	ldd	r11, Y+9	; 0x09
    2542:	c8 84       	ldd	r12, Y+8	; 0x08
    2544:	df 80       	ldd	r13, Y+7	; 0x07
    2546:	ee 80       	ldd	r14, Y+6	; 0x06
    2548:	fd 80       	ldd	r15, Y+5	; 0x05
    254a:	0c 81       	ldd	r16, Y+4	; 0x04
    254c:	1b 81       	ldd	r17, Y+3	; 0x03
    254e:	aa 81       	ldd	r26, Y+2	; 0x02
    2550:	b9 81       	ldd	r27, Y+1	; 0x01
    2552:	ce 0f       	add	r28, r30
    2554:	d1 1d       	adc	r29, r1
    2556:	0f b6       	in	r0, 0x3f	; 63
    2558:	f8 94       	cli
    255a:	de bf       	out	0x3e, r29	; 62
    255c:	0f be       	out	0x3f, r0	; 63
    255e:	cd bf       	out	0x3d, r28	; 61
    2560:	ed 01       	movw	r28, r26
    2562:	08 95       	ret

00002564 <_exit>:
    2564:	f8 94       	cli

00002566 <__stop_program>:
    2566:	ff cf       	rjmp	.-2      	; 0x2566 <__stop_program>
