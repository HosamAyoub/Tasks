
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002960  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000068  00800060  00002960  000029f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  008000c8  008000c8  00002a5c  2**0
                  ALLOC
  3 .stab         000033c0  00000000  00000000  00002a5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000018ba  00000000  00000000  00005e1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000076d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007816  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007986  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000095cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a4ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b268  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b3c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b655  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000be23  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 20 07 	jmp	0xe40	; 0xe40 <__vector_1>
       8:	0c 94 65 07 	jmp	0xeca	; 0xeca <__vector_2>
       c:	0c 94 aa 07 	jmp	0xf54	; 0xf54 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 69 0c 	jmp	0x18d2	; 0x18d2 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e6       	ldi	r30, 0x60	; 96
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3c       	cpi	r26, 0xC8	; 200
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 ec       	ldi	r26, 0xC8	; 200
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 3d       	cpi	r26, 0xD3	; 211
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c4 13 	call	0x2788	; 0x2788 <main>
      8a:	0c 94 ae 14 	jmp	0x295c	; 0x295c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 77 14 	jmp	0x28ee	; 0x28ee <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 ea       	ldi	r26, 0xA6	; 166
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 93 14 	jmp	0x2926	; 0x2926 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 83 14 	jmp	0x2906	; 0x2906 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 9f 14 	jmp	0x293e	; 0x293e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 83 14 	jmp	0x2906	; 0x2906 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 9f 14 	jmp	0x293e	; 0x293e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 77 14 	jmp	0x28ee	; 0x28ee <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 ea       	ldi	r24, 0xA6	; 166
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 93 14 	jmp	0x2926	; 0x2926 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 83 14 	jmp	0x2906	; 0x2906 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 9f 14 	jmp	0x293e	; 0x293e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 83 14 	jmp	0x2906	; 0x2906 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 9f 14 	jmp	0x293e	; 0x293e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 83 14 	jmp	0x2906	; 0x2906 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 9f 14 	jmp	0x293e	; 0x293e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 87 14 	jmp	0x290e	; 0x290e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 a3 14 	jmp	0x2946	; 0x2946 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GIE_voidEnableGlobalInterrupt>:
#include "GIE_interface.h"
#include "GIE_private.h"
#include "GIE_config.h"

void GIE_voidEnableGlobalInterrupt(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG, SREG_I);
     b4e:	af e5       	ldi	r26, 0x5F	; 95
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	ef e5       	ldi	r30, 0x5F	; 95
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	80 68       	ori	r24, 0x80	; 128
     b5a:	8c 93       	st	X, r24
}
     b5c:	cf 91       	pop	r28
     b5e:	df 91       	pop	r29
     b60:	08 95       	ret

00000b62 <GIE_voidDisableGlobalInterrupt>:

void GIE_voidDisableGlobalInterrupt(void)
{
     b62:	df 93       	push	r29
     b64:	cf 93       	push	r28
     b66:	cd b7       	in	r28, 0x3d	; 61
     b68:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG, SREG_I);
     b6a:	af e5       	ldi	r26, 0x5F	; 95
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	ef e5       	ldi	r30, 0x5F	; 95
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	8f 77       	andi	r24, 0x7F	; 127
     b76:	8c 93       	st	X, r24
}
     b78:	cf 91       	pop	r28
     b7a:	df 91       	pop	r29
     b7c:	08 95       	ret

00000b7e <EXTI_voidInit>:
void (*Global_pvInt1NotifcationFunction)(void) = NULL;
void (*Global_pvInt2NotifcationFunction)(void) = NULL;


void EXTI_voidInit (void)
{
     b7e:	df 93       	push	r29
     b80:	cf 93       	push	r28
     b82:	cd b7       	in	r28, 0x3d	; 61
     b84:	de b7       	in	r29, 0x3e	; 62
	#if	EXTI_INT0_ENALBE == ENABLE
		SET_BIT(GICR, GICR_INT0);
     b86:	ab e5       	ldi	r26, 0x5B	; 91
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	eb e5       	ldi	r30, 0x5B	; 91
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	80 64       	ori	r24, 0x40	; 64
     b92:	8c 93       	st	X, r24
			CLR_BIT(MCUCR, MCUCR_ISC00);
		#elif EXTI_INT0_SENSE_CONTROL == ON_CHANGE
			CLR_BIT(MCUCR, MCUCR_ISC01);
			SET_BIT(MCUCR, MCUCR_ISC00);
		#elif EXTI_INT0_SENSE_CONTROL == FALLING_EDGE
			SET_BIT(MCUCR, MCUCR_ISC01);
     b94:	a5 e5       	ldi	r26, 0x55	; 85
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e5 e5       	ldi	r30, 0x55	; 85
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	82 60       	ori	r24, 0x02	; 2
     ba0:	8c 93       	st	X, r24
			CLR_BIT(MCUCR, MCUCR_ISC00);
     ba2:	a5 e5       	ldi	r26, 0x55	; 85
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e5 e5       	ldi	r30, 0x55	; 85
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	8e 7f       	andi	r24, 0xFE	; 254
     bae:	8c 93       	st	X, r24
		#error "EXTI_INT0_ENALBE Error Configuration"
	#endif


	#if	EXTI_INT1_ENALBE == ENALBE
		SET_BIT(GICR, GICR_INT1);
     bb0:	ab e5       	ldi	r26, 0x5B	; 91
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	eb e5       	ldi	r30, 0x5B	; 91
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	80 68       	ori	r24, 0x80	; 128
     bbc:	8c 93       	st	X, r24
			CLR_BIT(MCUCR, MCUCR_ISC10);
		#elif EXTI_INT1_SENSE_CONTROL == ON_CHANGE
			CLR_BIT(MCUCR, MCUCR_ISC11);
			SET_BIT(MCUCR, MCUCR_ISC10);
		#elif EXTI_INT1_SENSE_CONTROL == FALLING_EDGE
			SET_BIT(MCUCR, MCUCR_ISC11);
     bbe:	a5 e5       	ldi	r26, 0x55	; 85
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e5 e5       	ldi	r30, 0x55	; 85
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	80 81       	ld	r24, Z
     bc8:	88 60       	ori	r24, 0x08	; 8
     bca:	8c 93       	st	X, r24
			CLR_BIT(MCUCR, MCUCR_ISC10);
     bcc:	a5 e5       	ldi	r26, 0x55	; 85
     bce:	b0 e0       	ldi	r27, 0x00	; 0
     bd0:	e5 e5       	ldi	r30, 0x55	; 85
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	80 81       	ld	r24, Z
     bd6:	8b 7f       	andi	r24, 0xFB	; 251
     bd8:	8c 93       	st	X, r24
		#error "EXTI_INT1_ENALBE Error Configuration"
	#endif


	#if	EXTI_INT2_ENALBE == ENABLE
		SET_BIT(GICR, GICR_INT2);
     bda:	ab e5       	ldi	r26, 0x5B	; 91
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	eb e5       	ldi	r30, 0x5B	; 91
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
     be4:	80 62       	ori	r24, 0x20	; 32
     be6:	8c 93       	st	X, r24
		#if EXTI_INT2_SENSE_CONTROL == FALLING_EDGE
			CLR_BIT(MCUCSR, MCUCSR_ISC2);
     be8:	a4 e5       	ldi	r26, 0x54	; 84
     bea:	b0 e0       	ldi	r27, 0x00	; 0
     bec:	e4 e5       	ldi	r30, 0x54	; 84
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	80 81       	ld	r24, Z
     bf2:	8f 7b       	andi	r24, 0xBF	; 191
     bf4:	8c 93       	st	X, r24
	#elif EXTI_INT2_ENALBE == DISABLE
		CLR_BIT(GICR, GICR_INT2);
	#else
		#error "EXTI_INT2_ENALBE Error Configuration"
	#endif
}
     bf6:	cf 91       	pop	r28
     bf8:	df 91       	pop	r29
     bfa:	08 95       	ret

00000bfc <EXTI_voidSetInt0SenseControl>:


void EXTI_voidSetInt0SenseControl (u8 Copy_u8SenseControl)
{
     bfc:	df 93       	push	r29
     bfe:	cf 93       	push	r28
     c00:	00 d0       	rcall	.+0      	; 0xc02 <EXTI_voidSetInt0SenseControl+0x6>
     c02:	0f 92       	push	r0
     c04:	cd b7       	in	r28, 0x3d	; 61
     c06:	de b7       	in	r29, 0x3e	; 62
     c08:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8SenseControl)
     c0a:	89 81       	ldd	r24, Y+1	; 0x01
     c0c:	28 2f       	mov	r18, r24
     c0e:	30 e0       	ldi	r19, 0x00	; 0
     c10:	3b 83       	std	Y+3, r19	; 0x03
     c12:	2a 83       	std	Y+2, r18	; 0x02
     c14:	8a 81       	ldd	r24, Y+2	; 0x02
     c16:	9b 81       	ldd	r25, Y+3	; 0x03
     c18:	81 30       	cpi	r24, 0x01	; 1
     c1a:	91 05       	cpc	r25, r1
     c1c:	09 f4       	brne	.+2      	; 0xc20 <EXTI_voidSetInt0SenseControl+0x24>
     c1e:	42 c0       	rjmp	.+132    	; 0xca4 <EXTI_voidSetInt0SenseControl+0xa8>
     c20:	2a 81       	ldd	r18, Y+2	; 0x02
     c22:	3b 81       	ldd	r19, Y+3	; 0x03
     c24:	22 30       	cpi	r18, 0x02	; 2
     c26:	31 05       	cpc	r19, r1
     c28:	2c f4       	brge	.+10     	; 0xc34 <EXTI_voidSetInt0SenseControl+0x38>
     c2a:	8a 81       	ldd	r24, Y+2	; 0x02
     c2c:	9b 81       	ldd	r25, Y+3	; 0x03
     c2e:	00 97       	sbiw	r24, 0x00	; 0
     c30:	51 f1       	breq	.+84     	; 0xc86 <EXTI_voidSetInt0SenseControl+0x8a>
     c32:	46 c0       	rjmp	.+140    	; 0xcc0 <EXTI_voidSetInt0SenseControl+0xc4>
     c34:	2a 81       	ldd	r18, Y+2	; 0x02
     c36:	3b 81       	ldd	r19, Y+3	; 0x03
     c38:	22 30       	cpi	r18, 0x02	; 2
     c3a:	31 05       	cpc	r19, r1
     c3c:	31 f0       	breq	.+12     	; 0xc4a <EXTI_voidSetInt0SenseControl+0x4e>
     c3e:	8a 81       	ldd	r24, Y+2	; 0x02
     c40:	9b 81       	ldd	r25, Y+3	; 0x03
     c42:	83 30       	cpi	r24, 0x03	; 3
     c44:	91 05       	cpc	r25, r1
     c46:	81 f0       	breq	.+32     	; 0xc68 <EXTI_voidSetInt0SenseControl+0x6c>
     c48:	3b c0       	rjmp	.+118    	; 0xcc0 <EXTI_voidSetInt0SenseControl+0xc4>
	{
	case LOW_LEVEL:
	{
		CLR_BIT(MCUCR, MCUCR_ISC01);
     c4a:	a5 e5       	ldi	r26, 0x55	; 85
     c4c:	b0 e0       	ldi	r27, 0x00	; 0
     c4e:	e5 e5       	ldi	r30, 0x55	; 85
     c50:	f0 e0       	ldi	r31, 0x00	; 0
     c52:	80 81       	ld	r24, Z
     c54:	8d 7f       	andi	r24, 0xFD	; 253
     c56:	8c 93       	st	X, r24
		CLR_BIT(MCUCR, MCUCR_ISC00);
     c58:	a5 e5       	ldi	r26, 0x55	; 85
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	e5 e5       	ldi	r30, 0x55	; 85
     c5e:	f0 e0       	ldi	r31, 0x00	; 0
     c60:	80 81       	ld	r24, Z
     c62:	8e 7f       	andi	r24, 0xFE	; 254
     c64:	8c 93       	st	X, r24
     c66:	2c c0       	rjmp	.+88     	; 0xcc0 <EXTI_voidSetInt0SenseControl+0xc4>
		break;
	}
	case ON_CHANGE:
	{
		CLR_BIT(MCUCR, MCUCR_ISC01);
     c68:	a5 e5       	ldi	r26, 0x55	; 85
     c6a:	b0 e0       	ldi	r27, 0x00	; 0
     c6c:	e5 e5       	ldi	r30, 0x55	; 85
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	80 81       	ld	r24, Z
     c72:	8d 7f       	andi	r24, 0xFD	; 253
     c74:	8c 93       	st	X, r24
		SET_BIT(MCUCR, MCUCR_ISC00);
     c76:	a5 e5       	ldi	r26, 0x55	; 85
     c78:	b0 e0       	ldi	r27, 0x00	; 0
     c7a:	e5 e5       	ldi	r30, 0x55	; 85
     c7c:	f0 e0       	ldi	r31, 0x00	; 0
     c7e:	80 81       	ld	r24, Z
     c80:	81 60       	ori	r24, 0x01	; 1
     c82:	8c 93       	st	X, r24
     c84:	1d c0       	rjmp	.+58     	; 0xcc0 <EXTI_voidSetInt0SenseControl+0xc4>
		break;
	}
	case FALLING_EDGE:
	{
		SET_BIT(MCUCR, MCUCR_ISC01);
     c86:	a5 e5       	ldi	r26, 0x55	; 85
     c88:	b0 e0       	ldi	r27, 0x00	; 0
     c8a:	e5 e5       	ldi	r30, 0x55	; 85
     c8c:	f0 e0       	ldi	r31, 0x00	; 0
     c8e:	80 81       	ld	r24, Z
     c90:	82 60       	ori	r24, 0x02	; 2
     c92:	8c 93       	st	X, r24
		CLR_BIT(MCUCR, MCUCR_ISC00);
     c94:	a5 e5       	ldi	r26, 0x55	; 85
     c96:	b0 e0       	ldi	r27, 0x00	; 0
     c98:	e5 e5       	ldi	r30, 0x55	; 85
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	80 81       	ld	r24, Z
     c9e:	8e 7f       	andi	r24, 0xFE	; 254
     ca0:	8c 93       	st	X, r24
     ca2:	0e c0       	rjmp	.+28     	; 0xcc0 <EXTI_voidSetInt0SenseControl+0xc4>
		break;
	}
	case RISING_EDGE:
	{
		SET_BIT(MCUCR, MCUCR_ISC01);
     ca4:	a5 e5       	ldi	r26, 0x55	; 85
     ca6:	b0 e0       	ldi	r27, 0x00	; 0
     ca8:	e5 e5       	ldi	r30, 0x55	; 85
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	80 81       	ld	r24, Z
     cae:	82 60       	ori	r24, 0x02	; 2
     cb0:	8c 93       	st	X, r24
		SET_BIT(MCUCR, MCUCR_ISC00);
     cb2:	a5 e5       	ldi	r26, 0x55	; 85
     cb4:	b0 e0       	ldi	r27, 0x00	; 0
     cb6:	e5 e5       	ldi	r30, 0x55	; 85
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	80 81       	ld	r24, Z
     cbc:	81 60       	ori	r24, 0x01	; 1
     cbe:	8c 93       	st	X, r24
	default:
	{
		break;
	}
	}
	SET_BIT(GICR, GICR_INT0);
     cc0:	ab e5       	ldi	r26, 0x5B	; 91
     cc2:	b0 e0       	ldi	r27, 0x00	; 0
     cc4:	eb e5       	ldi	r30, 0x5B	; 91
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	80 81       	ld	r24, Z
     cca:	80 64       	ori	r24, 0x40	; 64
     ccc:	8c 93       	st	X, r24
}
     cce:	0f 90       	pop	r0
     cd0:	0f 90       	pop	r0
     cd2:	0f 90       	pop	r0
     cd4:	cf 91       	pop	r28
     cd6:	df 91       	pop	r29
     cd8:	08 95       	ret

00000cda <EXTI_voidSetInt1SenseControl>:

void EXTI_voidSetInt1SenseControl(u8 Copy_u8SenseControl)
{
     cda:	df 93       	push	r29
     cdc:	cf 93       	push	r28
     cde:	00 d0       	rcall	.+0      	; 0xce0 <EXTI_voidSetInt1SenseControl+0x6>
     ce0:	0f 92       	push	r0
     ce2:	cd b7       	in	r28, 0x3d	; 61
     ce4:	de b7       	in	r29, 0x3e	; 62
     ce6:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8SenseControl)
     ce8:	89 81       	ldd	r24, Y+1	; 0x01
     cea:	28 2f       	mov	r18, r24
     cec:	30 e0       	ldi	r19, 0x00	; 0
     cee:	3b 83       	std	Y+3, r19	; 0x03
     cf0:	2a 83       	std	Y+2, r18	; 0x02
     cf2:	8a 81       	ldd	r24, Y+2	; 0x02
     cf4:	9b 81       	ldd	r25, Y+3	; 0x03
     cf6:	81 30       	cpi	r24, 0x01	; 1
     cf8:	91 05       	cpc	r25, r1
     cfa:	09 f4       	brne	.+2      	; 0xcfe <EXTI_voidSetInt1SenseControl+0x24>
     cfc:	42 c0       	rjmp	.+132    	; 0xd82 <EXTI_voidSetInt1SenseControl+0xa8>
     cfe:	2a 81       	ldd	r18, Y+2	; 0x02
     d00:	3b 81       	ldd	r19, Y+3	; 0x03
     d02:	22 30       	cpi	r18, 0x02	; 2
     d04:	31 05       	cpc	r19, r1
     d06:	2c f4       	brge	.+10     	; 0xd12 <EXTI_voidSetInt1SenseControl+0x38>
     d08:	8a 81       	ldd	r24, Y+2	; 0x02
     d0a:	9b 81       	ldd	r25, Y+3	; 0x03
     d0c:	00 97       	sbiw	r24, 0x00	; 0
     d0e:	51 f1       	breq	.+84     	; 0xd64 <EXTI_voidSetInt1SenseControl+0x8a>
     d10:	46 c0       	rjmp	.+140    	; 0xd9e <EXTI_voidSetInt1SenseControl+0xc4>
     d12:	2a 81       	ldd	r18, Y+2	; 0x02
     d14:	3b 81       	ldd	r19, Y+3	; 0x03
     d16:	22 30       	cpi	r18, 0x02	; 2
     d18:	31 05       	cpc	r19, r1
     d1a:	31 f0       	breq	.+12     	; 0xd28 <EXTI_voidSetInt1SenseControl+0x4e>
     d1c:	8a 81       	ldd	r24, Y+2	; 0x02
     d1e:	9b 81       	ldd	r25, Y+3	; 0x03
     d20:	83 30       	cpi	r24, 0x03	; 3
     d22:	91 05       	cpc	r25, r1
     d24:	81 f0       	breq	.+32     	; 0xd46 <EXTI_voidSetInt1SenseControl+0x6c>
     d26:	3b c0       	rjmp	.+118    	; 0xd9e <EXTI_voidSetInt1SenseControl+0xc4>
	{
	case LOW_LEVEL:
	{
		CLR_BIT(MCUCR, MCUCR_ISC11);
     d28:	a5 e5       	ldi	r26, 0x55	; 85
     d2a:	b0 e0       	ldi	r27, 0x00	; 0
     d2c:	e5 e5       	ldi	r30, 0x55	; 85
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	87 7f       	andi	r24, 0xF7	; 247
     d34:	8c 93       	st	X, r24
		CLR_BIT(MCUCR, MCUCR_ISC10);
     d36:	a5 e5       	ldi	r26, 0x55	; 85
     d38:	b0 e0       	ldi	r27, 0x00	; 0
     d3a:	e5 e5       	ldi	r30, 0x55	; 85
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	80 81       	ld	r24, Z
     d40:	8b 7f       	andi	r24, 0xFB	; 251
     d42:	8c 93       	st	X, r24
     d44:	2c c0       	rjmp	.+88     	; 0xd9e <EXTI_voidSetInt1SenseControl+0xc4>
		break;
	}
	case ON_CHANGE:
	{
		CLR_BIT(MCUCR, MCUCR_ISC11);
     d46:	a5 e5       	ldi	r26, 0x55	; 85
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e5 e5       	ldi	r30, 0x55	; 85
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	80 81       	ld	r24, Z
     d50:	87 7f       	andi	r24, 0xF7	; 247
     d52:	8c 93       	st	X, r24
		SET_BIT(MCUCR, MCUCR_ISC10);
     d54:	a5 e5       	ldi	r26, 0x55	; 85
     d56:	b0 e0       	ldi	r27, 0x00	; 0
     d58:	e5 e5       	ldi	r30, 0x55	; 85
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	80 81       	ld	r24, Z
     d5e:	84 60       	ori	r24, 0x04	; 4
     d60:	8c 93       	st	X, r24
     d62:	1d c0       	rjmp	.+58     	; 0xd9e <EXTI_voidSetInt1SenseControl+0xc4>
		break;
	}
	case FALLING_EDGE:
	{
		SET_BIT(MCUCR, MCUCR_ISC11);
     d64:	a5 e5       	ldi	r26, 0x55	; 85
     d66:	b0 e0       	ldi	r27, 0x00	; 0
     d68:	e5 e5       	ldi	r30, 0x55	; 85
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	80 81       	ld	r24, Z
     d6e:	88 60       	ori	r24, 0x08	; 8
     d70:	8c 93       	st	X, r24
		CLR_BIT(MCUCR, MCUCR_ISC10);
     d72:	a5 e5       	ldi	r26, 0x55	; 85
     d74:	b0 e0       	ldi	r27, 0x00	; 0
     d76:	e5 e5       	ldi	r30, 0x55	; 85
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	80 81       	ld	r24, Z
     d7c:	8b 7f       	andi	r24, 0xFB	; 251
     d7e:	8c 93       	st	X, r24
     d80:	0e c0       	rjmp	.+28     	; 0xd9e <EXTI_voidSetInt1SenseControl+0xc4>
		break;
	}
	case RISING_EDGE:
	{
		SET_BIT(MCUCR, MCUCR_ISC11);
     d82:	a5 e5       	ldi	r26, 0x55	; 85
     d84:	b0 e0       	ldi	r27, 0x00	; 0
     d86:	e5 e5       	ldi	r30, 0x55	; 85
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	80 81       	ld	r24, Z
     d8c:	88 60       	ori	r24, 0x08	; 8
     d8e:	8c 93       	st	X, r24
		SET_BIT(MCUCR, MCUCR_ISC10);
     d90:	a5 e5       	ldi	r26, 0x55	; 85
     d92:	b0 e0       	ldi	r27, 0x00	; 0
     d94:	e5 e5       	ldi	r30, 0x55	; 85
     d96:	f0 e0       	ldi	r31, 0x00	; 0
     d98:	80 81       	ld	r24, Z
     d9a:	84 60       	ori	r24, 0x04	; 4
     d9c:	8c 93       	st	X, r24
	default:
	{
		break;
	}
	}
	SET_BIT(GICR, GICR_INT1);
     d9e:	ab e5       	ldi	r26, 0x5B	; 91
     da0:	b0 e0       	ldi	r27, 0x00	; 0
     da2:	eb e5       	ldi	r30, 0x5B	; 91
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	80 81       	ld	r24, Z
     da8:	80 68       	ori	r24, 0x80	; 128
     daa:	8c 93       	st	X, r24
}
     dac:	0f 90       	pop	r0
     dae:	0f 90       	pop	r0
     db0:	0f 90       	pop	r0
     db2:	cf 91       	pop	r28
     db4:	df 91       	pop	r29
     db6:	08 95       	ret

00000db8 <EXTI_voidSetInt2SenseControl>:

void EXTI_voidSetInt2SenseControl(u8 Copy_u8SenseControl)
{
     db8:	df 93       	push	r29
     dba:	cf 93       	push	r28
     dbc:	00 d0       	rcall	.+0      	; 0xdbe <EXTI_voidSetInt2SenseControl+0x6>
     dbe:	0f 92       	push	r0
     dc0:	cd b7       	in	r28, 0x3d	; 61
     dc2:	de b7       	in	r29, 0x3e	; 62
     dc4:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8SenseControl)
     dc6:	89 81       	ldd	r24, Y+1	; 0x01
     dc8:	28 2f       	mov	r18, r24
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	3b 83       	std	Y+3, r19	; 0x03
     dce:	2a 83       	std	Y+2, r18	; 0x02
     dd0:	8a 81       	ldd	r24, Y+2	; 0x02
     dd2:	9b 81       	ldd	r25, Y+3	; 0x03
     dd4:	00 97       	sbiw	r24, 0x00	; 0
     dd6:	31 f0       	breq	.+12     	; 0xde4 <EXTI_voidSetInt2SenseControl+0x2c>
     dd8:	2a 81       	ldd	r18, Y+2	; 0x02
     dda:	3b 81       	ldd	r19, Y+3	; 0x03
     ddc:	21 30       	cpi	r18, 0x01	; 1
     dde:	31 05       	cpc	r19, r1
     de0:	49 f0       	breq	.+18     	; 0xdf4 <EXTI_voidSetInt2SenseControl+0x3c>
     de2:	0f c0       	rjmp	.+30     	; 0xe02 <EXTI_voidSetInt2SenseControl+0x4a>
	{
	case FALLING_EDGE:
	{
		CLR_BIT(MCUCSR, MCUCSR_ISC2);
     de4:	a4 e5       	ldi	r26, 0x54	; 84
     de6:	b0 e0       	ldi	r27, 0x00	; 0
     de8:	e4 e5       	ldi	r30, 0x54	; 84
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	80 81       	ld	r24, Z
     dee:	8f 7b       	andi	r24, 0xBF	; 191
     df0:	8c 93       	st	X, r24
     df2:	07 c0       	rjmp	.+14     	; 0xe02 <EXTI_voidSetInt2SenseControl+0x4a>
		break;
	}
	case RISING_EDGE:
	{
		SET_BIT(MCUCSR, MCUCSR_ISC2);
     df4:	a4 e5       	ldi	r26, 0x54	; 84
     df6:	b0 e0       	ldi	r27, 0x00	; 0
     df8:	e4 e5       	ldi	r30, 0x54	; 84
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	80 81       	ld	r24, Z
     dfe:	80 64       	ori	r24, 0x40	; 64
     e00:	8c 93       	st	X, r24
	default:
	{
		break;
	}
	}
	SET_BIT(GICR, GICR_INT2);
     e02:	ab e5       	ldi	r26, 0x5B	; 91
     e04:	b0 e0       	ldi	r27, 0x00	; 0
     e06:	eb e5       	ldi	r30, 0x5B	; 91
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	80 81       	ld	r24, Z
     e0c:	80 62       	ori	r24, 0x20	; 32
     e0e:	8c 93       	st	X, r24
}
     e10:	0f 90       	pop	r0
     e12:	0f 90       	pop	r0
     e14:	0f 90       	pop	r0
     e16:	cf 91       	pop	r28
     e18:	df 91       	pop	r29
     e1a:	08 95       	ret

00000e1c <EXTI_voidInt0SetCallBack>:


void EXTI_voidInt0SetCallBack (void (*Copy_pvNotificationFunction) (void))
{
     e1c:	df 93       	push	r29
     e1e:	cf 93       	push	r28
     e20:	00 d0       	rcall	.+0      	; 0xe22 <EXTI_voidInt0SetCallBack+0x6>
     e22:	cd b7       	in	r28, 0x3d	; 61
     e24:	de b7       	in	r29, 0x3e	; 62
     e26:	9a 83       	std	Y+2, r25	; 0x02
     e28:	89 83       	std	Y+1, r24	; 0x01
	Global_pvInt0NotifcationFunction = Copy_pvNotificationFunction;
     e2a:	89 81       	ldd	r24, Y+1	; 0x01
     e2c:	9a 81       	ldd	r25, Y+2	; 0x02
     e2e:	90 93 c9 00 	sts	0x00C9, r25
     e32:	80 93 c8 00 	sts	0x00C8, r24
}
     e36:	0f 90       	pop	r0
     e38:	0f 90       	pop	r0
     e3a:	cf 91       	pop	r28
     e3c:	df 91       	pop	r29
     e3e:	08 95       	ret

00000e40 <__vector_1>:

/*ISR for INT0*/
void __vector_1 (void) __attribute__((signal));
void __vector_1 (void)
{
     e40:	1f 92       	push	r1
     e42:	0f 92       	push	r0
     e44:	0f b6       	in	r0, 0x3f	; 63
     e46:	0f 92       	push	r0
     e48:	11 24       	eor	r1, r1
     e4a:	2f 93       	push	r18
     e4c:	3f 93       	push	r19
     e4e:	4f 93       	push	r20
     e50:	5f 93       	push	r21
     e52:	6f 93       	push	r22
     e54:	7f 93       	push	r23
     e56:	8f 93       	push	r24
     e58:	9f 93       	push	r25
     e5a:	af 93       	push	r26
     e5c:	bf 93       	push	r27
     e5e:	ef 93       	push	r30
     e60:	ff 93       	push	r31
     e62:	df 93       	push	r29
     e64:	cf 93       	push	r28
     e66:	cd b7       	in	r28, 0x3d	; 61
     e68:	de b7       	in	r29, 0x3e	; 62
	if (Global_pvInt0NotifcationFunction != NULL)
     e6a:	80 91 c8 00 	lds	r24, 0x00C8
     e6e:	90 91 c9 00 	lds	r25, 0x00C9
     e72:	00 97       	sbiw	r24, 0x00	; 0
     e74:	29 f0       	breq	.+10     	; 0xe80 <__vector_1+0x40>
	{
		Global_pvInt0NotifcationFunction();
     e76:	e0 91 c8 00 	lds	r30, 0x00C8
     e7a:	f0 91 c9 00 	lds	r31, 0x00C9
     e7e:	09 95       	icall
	}
	else
	{

	}
}
     e80:	cf 91       	pop	r28
     e82:	df 91       	pop	r29
     e84:	ff 91       	pop	r31
     e86:	ef 91       	pop	r30
     e88:	bf 91       	pop	r27
     e8a:	af 91       	pop	r26
     e8c:	9f 91       	pop	r25
     e8e:	8f 91       	pop	r24
     e90:	7f 91       	pop	r23
     e92:	6f 91       	pop	r22
     e94:	5f 91       	pop	r21
     e96:	4f 91       	pop	r20
     e98:	3f 91       	pop	r19
     e9a:	2f 91       	pop	r18
     e9c:	0f 90       	pop	r0
     e9e:	0f be       	out	0x3f, r0	; 63
     ea0:	0f 90       	pop	r0
     ea2:	1f 90       	pop	r1
     ea4:	18 95       	reti

00000ea6 <EXTI_voidInt1SetCallBack>:

void EXTI_voidInt1SetCallBack (void (*Copy_pvNotificationFunction) (void))
{
     ea6:	df 93       	push	r29
     ea8:	cf 93       	push	r28
     eaa:	00 d0       	rcall	.+0      	; 0xeac <EXTI_voidInt1SetCallBack+0x6>
     eac:	cd b7       	in	r28, 0x3d	; 61
     eae:	de b7       	in	r29, 0x3e	; 62
     eb0:	9a 83       	std	Y+2, r25	; 0x02
     eb2:	89 83       	std	Y+1, r24	; 0x01
	Global_pvInt1NotifcationFunction = Copy_pvNotificationFunction;
     eb4:	89 81       	ldd	r24, Y+1	; 0x01
     eb6:	9a 81       	ldd	r25, Y+2	; 0x02
     eb8:	90 93 cb 00 	sts	0x00CB, r25
     ebc:	80 93 ca 00 	sts	0x00CA, r24
}
     ec0:	0f 90       	pop	r0
     ec2:	0f 90       	pop	r0
     ec4:	cf 91       	pop	r28
     ec6:	df 91       	pop	r29
     ec8:	08 95       	ret

00000eca <__vector_2>:

/*ISR for INT1*/
void __vector_2 (void) __attribute__((signal));
void __vector_2 (void)
{
     eca:	1f 92       	push	r1
     ecc:	0f 92       	push	r0
     ece:	0f b6       	in	r0, 0x3f	; 63
     ed0:	0f 92       	push	r0
     ed2:	11 24       	eor	r1, r1
     ed4:	2f 93       	push	r18
     ed6:	3f 93       	push	r19
     ed8:	4f 93       	push	r20
     eda:	5f 93       	push	r21
     edc:	6f 93       	push	r22
     ede:	7f 93       	push	r23
     ee0:	8f 93       	push	r24
     ee2:	9f 93       	push	r25
     ee4:	af 93       	push	r26
     ee6:	bf 93       	push	r27
     ee8:	ef 93       	push	r30
     eea:	ff 93       	push	r31
     eec:	df 93       	push	r29
     eee:	cf 93       	push	r28
     ef0:	cd b7       	in	r28, 0x3d	; 61
     ef2:	de b7       	in	r29, 0x3e	; 62
	if (Global_pvInt1NotifcationFunction != NULL)
     ef4:	80 91 ca 00 	lds	r24, 0x00CA
     ef8:	90 91 cb 00 	lds	r25, 0x00CB
     efc:	00 97       	sbiw	r24, 0x00	; 0
     efe:	29 f0       	breq	.+10     	; 0xf0a <__vector_2+0x40>
	{
		Global_pvInt1NotifcationFunction();
     f00:	e0 91 ca 00 	lds	r30, 0x00CA
     f04:	f0 91 cb 00 	lds	r31, 0x00CB
     f08:	09 95       	icall
	}
	else
	{

	}
}
     f0a:	cf 91       	pop	r28
     f0c:	df 91       	pop	r29
     f0e:	ff 91       	pop	r31
     f10:	ef 91       	pop	r30
     f12:	bf 91       	pop	r27
     f14:	af 91       	pop	r26
     f16:	9f 91       	pop	r25
     f18:	8f 91       	pop	r24
     f1a:	7f 91       	pop	r23
     f1c:	6f 91       	pop	r22
     f1e:	5f 91       	pop	r21
     f20:	4f 91       	pop	r20
     f22:	3f 91       	pop	r19
     f24:	2f 91       	pop	r18
     f26:	0f 90       	pop	r0
     f28:	0f be       	out	0x3f, r0	; 63
     f2a:	0f 90       	pop	r0
     f2c:	1f 90       	pop	r1
     f2e:	18 95       	reti

00000f30 <EXTI_voidInt2SetCallBack>:

void EXTI_voidInt2SetCallBack (void (*Copy_pvNotificationFunction) (void))
{
     f30:	df 93       	push	r29
     f32:	cf 93       	push	r28
     f34:	00 d0       	rcall	.+0      	; 0xf36 <EXTI_voidInt2SetCallBack+0x6>
     f36:	cd b7       	in	r28, 0x3d	; 61
     f38:	de b7       	in	r29, 0x3e	; 62
     f3a:	9a 83       	std	Y+2, r25	; 0x02
     f3c:	89 83       	std	Y+1, r24	; 0x01
	Global_pvInt2NotifcationFunction = Copy_pvNotificationFunction;
     f3e:	89 81       	ldd	r24, Y+1	; 0x01
     f40:	9a 81       	ldd	r25, Y+2	; 0x02
     f42:	90 93 cd 00 	sts	0x00CD, r25
     f46:	80 93 cc 00 	sts	0x00CC, r24
}
     f4a:	0f 90       	pop	r0
     f4c:	0f 90       	pop	r0
     f4e:	cf 91       	pop	r28
     f50:	df 91       	pop	r29
     f52:	08 95       	ret

00000f54 <__vector_3>:

/*ISR for INT2*/
void __vector_3 (void) __attribute__((signal));
void __vector_3 (void)
{
     f54:	1f 92       	push	r1
     f56:	0f 92       	push	r0
     f58:	0f b6       	in	r0, 0x3f	; 63
     f5a:	0f 92       	push	r0
     f5c:	11 24       	eor	r1, r1
     f5e:	2f 93       	push	r18
     f60:	3f 93       	push	r19
     f62:	4f 93       	push	r20
     f64:	5f 93       	push	r21
     f66:	6f 93       	push	r22
     f68:	7f 93       	push	r23
     f6a:	8f 93       	push	r24
     f6c:	9f 93       	push	r25
     f6e:	af 93       	push	r26
     f70:	bf 93       	push	r27
     f72:	ef 93       	push	r30
     f74:	ff 93       	push	r31
     f76:	df 93       	push	r29
     f78:	cf 93       	push	r28
     f7a:	cd b7       	in	r28, 0x3d	; 61
     f7c:	de b7       	in	r29, 0x3e	; 62
	if (Global_pvInt2NotifcationFunction != NULL)
     f7e:	80 91 cc 00 	lds	r24, 0x00CC
     f82:	90 91 cd 00 	lds	r25, 0x00CD
     f86:	00 97       	sbiw	r24, 0x00	; 0
     f88:	29 f0       	breq	.+10     	; 0xf94 <__vector_3+0x40>
	{
		Global_pvInt2NotifcationFunction();
     f8a:	e0 91 cc 00 	lds	r30, 0x00CC
     f8e:	f0 91 cd 00 	lds	r31, 0x00CD
     f92:	09 95       	icall
	}
	else
	{

	}
}
     f94:	cf 91       	pop	r28
     f96:	df 91       	pop	r29
     f98:	ff 91       	pop	r31
     f9a:	ef 91       	pop	r30
     f9c:	bf 91       	pop	r27
     f9e:	af 91       	pop	r26
     fa0:	9f 91       	pop	r25
     fa2:	8f 91       	pop	r24
     fa4:	7f 91       	pop	r23
     fa6:	6f 91       	pop	r22
     fa8:	5f 91       	pop	r21
     faa:	4f 91       	pop	r20
     fac:	3f 91       	pop	r19
     fae:	2f 91       	pop	r18
     fb0:	0f 90       	pop	r0
     fb2:	0f be       	out	0x3f, r0	; 63
     fb4:	0f 90       	pop	r0
     fb6:	1f 90       	pop	r1
     fb8:	18 95       	reti

00000fba <DIO_u8SetPortDirection>:
#include "DIO_private.h"
#include "DIO_config.h"


u8 DIO_u8SetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
     fba:	df 93       	push	r29
     fbc:	cf 93       	push	r28
     fbe:	00 d0       	rcall	.+0      	; 0xfc0 <DIO_u8SetPortDirection+0x6>
     fc0:	00 d0       	rcall	.+0      	; 0xfc2 <DIO_u8SetPortDirection+0x8>
     fc2:	0f 92       	push	r0
     fc4:	cd b7       	in	r28, 0x3d	; 61
     fc6:	de b7       	in	r29, 0x3e	; 62
     fc8:	8a 83       	std	Y+2, r24	; 0x02
     fca:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8RunState = DIO_OK;
     fcc:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
     fce:	8a 81       	ldd	r24, Y+2	; 0x02
     fd0:	28 2f       	mov	r18, r24
     fd2:	30 e0       	ldi	r19, 0x00	; 0
     fd4:	3d 83       	std	Y+5, r19	; 0x05
     fd6:	2c 83       	std	Y+4, r18	; 0x04
     fd8:	8c 81       	ldd	r24, Y+4	; 0x04
     fda:	9d 81       	ldd	r25, Y+5	; 0x05
     fdc:	81 30       	cpi	r24, 0x01	; 1
     fde:	91 05       	cpc	r25, r1
     fe0:	d1 f0       	breq	.+52     	; 0x1016 <DIO_u8SetPortDirection+0x5c>
     fe2:	2c 81       	ldd	r18, Y+4	; 0x04
     fe4:	3d 81       	ldd	r19, Y+5	; 0x05
     fe6:	22 30       	cpi	r18, 0x02	; 2
     fe8:	31 05       	cpc	r19, r1
     fea:	2c f4       	brge	.+10     	; 0xff6 <DIO_u8SetPortDirection+0x3c>
     fec:	8c 81       	ldd	r24, Y+4	; 0x04
     fee:	9d 81       	ldd	r25, Y+5	; 0x05
     ff0:	00 97       	sbiw	r24, 0x00	; 0
     ff2:	61 f0       	breq	.+24     	; 0x100c <DIO_u8SetPortDirection+0x52>
     ff4:	1f c0       	rjmp	.+62     	; 0x1034 <DIO_u8SetPortDirection+0x7a>
     ff6:	2c 81       	ldd	r18, Y+4	; 0x04
     ff8:	3d 81       	ldd	r19, Y+5	; 0x05
     ffa:	22 30       	cpi	r18, 0x02	; 2
     ffc:	31 05       	cpc	r19, r1
     ffe:	81 f0       	breq	.+32     	; 0x1020 <DIO_u8SetPortDirection+0x66>
    1000:	8c 81       	ldd	r24, Y+4	; 0x04
    1002:	9d 81       	ldd	r25, Y+5	; 0x05
    1004:	83 30       	cpi	r24, 0x03	; 3
    1006:	91 05       	cpc	r25, r1
    1008:	81 f0       	breq	.+32     	; 0x102a <DIO_u8SetPortDirection+0x70>
    100a:	14 c0       	rjmp	.+40     	; 0x1034 <DIO_u8SetPortDirection+0x7a>
	{
	case DIO_PORTA: DDRA = Copy_u8Direction; break;
    100c:	ea e3       	ldi	r30, 0x3A	; 58
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	8b 81       	ldd	r24, Y+3	; 0x03
    1012:	80 83       	st	Z, r24
    1014:	11 c0       	rjmp	.+34     	; 0x1038 <DIO_u8SetPortDirection+0x7e>
	case DIO_PORTB:	DDRB = Copy_u8Direction; break;
    1016:	e7 e3       	ldi	r30, 0x37	; 55
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	8b 81       	ldd	r24, Y+3	; 0x03
    101c:	80 83       	st	Z, r24
    101e:	0c c0       	rjmp	.+24     	; 0x1038 <DIO_u8SetPortDirection+0x7e>
	case DIO_PORTC: DDRC = Copy_u8Direction; break;
    1020:	e4 e3       	ldi	r30, 0x34	; 52
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	8b 81       	ldd	r24, Y+3	; 0x03
    1026:	80 83       	st	Z, r24
    1028:	07 c0       	rjmp	.+14     	; 0x1038 <DIO_u8SetPortDirection+0x7e>
	case DIO_PORTD: DDRD = Copy_u8Direction; break;
    102a:	e1 e3       	ldi	r30, 0x31	; 49
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	8b 81       	ldd	r24, Y+3	; 0x03
    1030:	80 83       	st	Z, r24
    1032:	02 c0       	rjmp	.+4      	; 0x1038 <DIO_u8SetPortDirection+0x7e>
	default: Local_u8RunState = DIO_ERROR;
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8RunState;
    1038:	89 81       	ldd	r24, Y+1	; 0x01
}
    103a:	0f 90       	pop	r0
    103c:	0f 90       	pop	r0
    103e:	0f 90       	pop	r0
    1040:	0f 90       	pop	r0
    1042:	0f 90       	pop	r0
    1044:	cf 91       	pop	r28
    1046:	df 91       	pop	r29
    1048:	08 95       	ret

0000104a <DIO_u8SetPortValue>:


u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
    104a:	df 93       	push	r29
    104c:	cf 93       	push	r28
    104e:	00 d0       	rcall	.+0      	; 0x1050 <DIO_u8SetPortValue+0x6>
    1050:	00 d0       	rcall	.+0      	; 0x1052 <DIO_u8SetPortValue+0x8>
    1052:	0f 92       	push	r0
    1054:	cd b7       	in	r28, 0x3d	; 61
    1056:	de b7       	in	r29, 0x3e	; 62
    1058:	8a 83       	std	Y+2, r24	; 0x02
    105a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8RunState = DIO_OK;
    105c:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
    105e:	8a 81       	ldd	r24, Y+2	; 0x02
    1060:	28 2f       	mov	r18, r24
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	3d 83       	std	Y+5, r19	; 0x05
    1066:	2c 83       	std	Y+4, r18	; 0x04
    1068:	8c 81       	ldd	r24, Y+4	; 0x04
    106a:	9d 81       	ldd	r25, Y+5	; 0x05
    106c:	81 30       	cpi	r24, 0x01	; 1
    106e:	91 05       	cpc	r25, r1
    1070:	d1 f0       	breq	.+52     	; 0x10a6 <DIO_u8SetPortValue+0x5c>
    1072:	2c 81       	ldd	r18, Y+4	; 0x04
    1074:	3d 81       	ldd	r19, Y+5	; 0x05
    1076:	22 30       	cpi	r18, 0x02	; 2
    1078:	31 05       	cpc	r19, r1
    107a:	2c f4       	brge	.+10     	; 0x1086 <DIO_u8SetPortValue+0x3c>
    107c:	8c 81       	ldd	r24, Y+4	; 0x04
    107e:	9d 81       	ldd	r25, Y+5	; 0x05
    1080:	00 97       	sbiw	r24, 0x00	; 0
    1082:	61 f0       	breq	.+24     	; 0x109c <DIO_u8SetPortValue+0x52>
    1084:	1f c0       	rjmp	.+62     	; 0x10c4 <DIO_u8SetPortValue+0x7a>
    1086:	2c 81       	ldd	r18, Y+4	; 0x04
    1088:	3d 81       	ldd	r19, Y+5	; 0x05
    108a:	22 30       	cpi	r18, 0x02	; 2
    108c:	31 05       	cpc	r19, r1
    108e:	81 f0       	breq	.+32     	; 0x10b0 <DIO_u8SetPortValue+0x66>
    1090:	8c 81       	ldd	r24, Y+4	; 0x04
    1092:	9d 81       	ldd	r25, Y+5	; 0x05
    1094:	83 30       	cpi	r24, 0x03	; 3
    1096:	91 05       	cpc	r25, r1
    1098:	81 f0       	breq	.+32     	; 0x10ba <DIO_u8SetPortValue+0x70>
    109a:	14 c0       	rjmp	.+40     	; 0x10c4 <DIO_u8SetPortValue+0x7a>
	{
	case DIO_PORTA: PORTA = Copy_u8Value; break;
    109c:	eb e3       	ldi	r30, 0x3B	; 59
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	8b 81       	ldd	r24, Y+3	; 0x03
    10a2:	80 83       	st	Z, r24
    10a4:	11 c0       	rjmp	.+34     	; 0x10c8 <DIO_u8SetPortValue+0x7e>
	case DIO_PORTB:	PORTB = Copy_u8Value; break;
    10a6:	e8 e3       	ldi	r30, 0x38	; 56
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	8b 81       	ldd	r24, Y+3	; 0x03
    10ac:	80 83       	st	Z, r24
    10ae:	0c c0       	rjmp	.+24     	; 0x10c8 <DIO_u8SetPortValue+0x7e>
	case DIO_PORTC: PORTC = Copy_u8Value; break;
    10b0:	e5 e3       	ldi	r30, 0x35	; 53
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	8b 81       	ldd	r24, Y+3	; 0x03
    10b6:	80 83       	st	Z, r24
    10b8:	07 c0       	rjmp	.+14     	; 0x10c8 <DIO_u8SetPortValue+0x7e>
	case DIO_PORTD: PORTD = Copy_u8Value; break;
    10ba:	e2 e3       	ldi	r30, 0x32	; 50
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	8b 81       	ldd	r24, Y+3	; 0x03
    10c0:	80 83       	st	Z, r24
    10c2:	02 c0       	rjmp	.+4      	; 0x10c8 <DIO_u8SetPortValue+0x7e>
	default: Local_u8RunState = DIO_ERROR;
    10c4:	81 e0       	ldi	r24, 0x01	; 1
    10c6:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8RunState;
    10c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    10ca:	0f 90       	pop	r0
    10cc:	0f 90       	pop	r0
    10ce:	0f 90       	pop	r0
    10d0:	0f 90       	pop	r0
    10d2:	0f 90       	pop	r0
    10d4:	cf 91       	pop	r28
    10d6:	df 91       	pop	r29
    10d8:	08 95       	ret

000010da <DIO_u8GetPortValue>:


u8 DIO_u8GetPortValue(u8 Copy_u8Port, u8 *Copy_u8Variable)
{
    10da:	df 93       	push	r29
    10dc:	cf 93       	push	r28
    10de:	00 d0       	rcall	.+0      	; 0x10e0 <DIO_u8GetPortValue+0x6>
    10e0:	00 d0       	rcall	.+0      	; 0x10e2 <DIO_u8GetPortValue+0x8>
    10e2:	00 d0       	rcall	.+0      	; 0x10e4 <DIO_u8GetPortValue+0xa>
    10e4:	cd b7       	in	r28, 0x3d	; 61
    10e6:	de b7       	in	r29, 0x3e	; 62
    10e8:	8a 83       	std	Y+2, r24	; 0x02
    10ea:	7c 83       	std	Y+4, r23	; 0x04
    10ec:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8RunState = DIO_OK;
    10ee:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Variable != NULL)
    10f0:	8b 81       	ldd	r24, Y+3	; 0x03
    10f2:	9c 81       	ldd	r25, Y+4	; 0x04
    10f4:	00 97       	sbiw	r24, 0x00	; 0
    10f6:	09 f4       	brne	.+2      	; 0x10fa <DIO_u8GetPortValue+0x20>
    10f8:	3e c0       	rjmp	.+124    	; 0x1176 <DIO_u8GetPortValue+0x9c>
	{
		switch(Copy_u8Port)
    10fa:	8a 81       	ldd	r24, Y+2	; 0x02
    10fc:	28 2f       	mov	r18, r24
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	3e 83       	std	Y+6, r19	; 0x06
    1102:	2d 83       	std	Y+5, r18	; 0x05
    1104:	8d 81       	ldd	r24, Y+5	; 0x05
    1106:	9e 81       	ldd	r25, Y+6	; 0x06
    1108:	81 30       	cpi	r24, 0x01	; 1
    110a:	91 05       	cpc	r25, r1
    110c:	e1 f0       	breq	.+56     	; 0x1146 <DIO_u8GetPortValue+0x6c>
    110e:	2d 81       	ldd	r18, Y+5	; 0x05
    1110:	3e 81       	ldd	r19, Y+6	; 0x06
    1112:	22 30       	cpi	r18, 0x02	; 2
    1114:	31 05       	cpc	r19, r1
    1116:	2c f4       	brge	.+10     	; 0x1122 <DIO_u8GetPortValue+0x48>
    1118:	8d 81       	ldd	r24, Y+5	; 0x05
    111a:	9e 81       	ldd	r25, Y+6	; 0x06
    111c:	00 97       	sbiw	r24, 0x00	; 0
    111e:	61 f0       	breq	.+24     	; 0x1138 <DIO_u8GetPortValue+0x5e>
    1120:	27 c0       	rjmp	.+78     	; 0x1170 <DIO_u8GetPortValue+0x96>
    1122:	2d 81       	ldd	r18, Y+5	; 0x05
    1124:	3e 81       	ldd	r19, Y+6	; 0x06
    1126:	22 30       	cpi	r18, 0x02	; 2
    1128:	31 05       	cpc	r19, r1
    112a:	a1 f0       	breq	.+40     	; 0x1154 <DIO_u8GetPortValue+0x7a>
    112c:	8d 81       	ldd	r24, Y+5	; 0x05
    112e:	9e 81       	ldd	r25, Y+6	; 0x06
    1130:	83 30       	cpi	r24, 0x03	; 3
    1132:	91 05       	cpc	r25, r1
    1134:	b1 f0       	breq	.+44     	; 0x1162 <DIO_u8GetPortValue+0x88>
    1136:	1c c0       	rjmp	.+56     	; 0x1170 <DIO_u8GetPortValue+0x96>
		{
		case DIO_PORTA: *Copy_u8Variable = PINA; break;
    1138:	e9 e3       	ldi	r30, 0x39	; 57
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	80 81       	ld	r24, Z
    113e:	eb 81       	ldd	r30, Y+3	; 0x03
    1140:	fc 81       	ldd	r31, Y+4	; 0x04
    1142:	80 83       	st	Z, r24
    1144:	1a c0       	rjmp	.+52     	; 0x117a <DIO_u8GetPortValue+0xa0>
		case DIO_PORTB:	*Copy_u8Variable = PINB; break;
    1146:	e6 e3       	ldi	r30, 0x36	; 54
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	80 81       	ld	r24, Z
    114c:	eb 81       	ldd	r30, Y+3	; 0x03
    114e:	fc 81       	ldd	r31, Y+4	; 0x04
    1150:	80 83       	st	Z, r24
    1152:	13 c0       	rjmp	.+38     	; 0x117a <DIO_u8GetPortValue+0xa0>
		case DIO_PORTC: *Copy_u8Variable = PINC; break;
    1154:	e3 e3       	ldi	r30, 0x33	; 51
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	80 81       	ld	r24, Z
    115a:	eb 81       	ldd	r30, Y+3	; 0x03
    115c:	fc 81       	ldd	r31, Y+4	; 0x04
    115e:	80 83       	st	Z, r24
    1160:	0c c0       	rjmp	.+24     	; 0x117a <DIO_u8GetPortValue+0xa0>
		case DIO_PORTD: *Copy_u8Variable = PIND; break;
    1162:	e0 e3       	ldi	r30, 0x30	; 48
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	80 81       	ld	r24, Z
    1168:	eb 81       	ldd	r30, Y+3	; 0x03
    116a:	fc 81       	ldd	r31, Y+4	; 0x04
    116c:	80 83       	st	Z, r24
    116e:	05 c0       	rjmp	.+10     	; 0x117a <DIO_u8GetPortValue+0xa0>
		default: Local_u8RunState = DIO_ERROR;
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	89 83       	std	Y+1, r24	; 0x01
    1174:	02 c0       	rjmp	.+4      	; 0x117a <DIO_u8GetPortValue+0xa0>
		}
	}
	else
	{
		Local_u8RunState = DIO_ERROR;
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8RunState;
    117a:	89 81       	ldd	r24, Y+1	; 0x01
}
    117c:	26 96       	adiw	r28, 0x06	; 6
    117e:	0f b6       	in	r0, 0x3f	; 63
    1180:	f8 94       	cli
    1182:	de bf       	out	0x3e, r29	; 62
    1184:	0f be       	out	0x3f, r0	; 63
    1186:	cd bf       	out	0x3d, r28	; 61
    1188:	cf 91       	pop	r28
    118a:	df 91       	pop	r29
    118c:	08 95       	ret

0000118e <DIO_u8SetPinDirection>:


u8 DIO_u8SetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
    118e:	df 93       	push	r29
    1190:	cf 93       	push	r28
    1192:	cd b7       	in	r28, 0x3d	; 61
    1194:	de b7       	in	r29, 0x3e	; 62
    1196:	28 97       	sbiw	r28, 0x08	; 8
    1198:	0f b6       	in	r0, 0x3f	; 63
    119a:	f8 94       	cli
    119c:	de bf       	out	0x3e, r29	; 62
    119e:	0f be       	out	0x3f, r0	; 63
    11a0:	cd bf       	out	0x3d, r28	; 61
    11a2:	8a 83       	std	Y+2, r24	; 0x02
    11a4:	6b 83       	std	Y+3, r22	; 0x03
    11a6:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8RunState = DIO_OK;
    11a8:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8Pin >= DIO_PIN0) && (Copy_u8Pin <= DIO_PIN7))
    11aa:	8b 81       	ldd	r24, Y+3	; 0x03
    11ac:	88 30       	cpi	r24, 0x08	; 8
    11ae:	08 f0       	brcs	.+2      	; 0x11b2 <DIO_u8SetPinDirection+0x24>
    11b0:	f4 c0       	rjmp	.+488    	; 0x139a <DIO_u8SetPinDirection+0x20c>
	{
		if(Copy_u8Direction == DIO_PIN_INPUT)
    11b2:	8c 81       	ldd	r24, Y+4	; 0x04
    11b4:	88 23       	and	r24, r24
    11b6:	09 f0       	breq	.+2      	; 0x11ba <DIO_u8SetPinDirection+0x2c>
    11b8:	77 c0       	rjmp	.+238    	; 0x12a8 <DIO_u8SetPinDirection+0x11a>
		{
			switch(Copy_u8Port)
    11ba:	8a 81       	ldd	r24, Y+2	; 0x02
    11bc:	28 2f       	mov	r18, r24
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	38 87       	std	Y+8, r19	; 0x08
    11c2:	2f 83       	std	Y+7, r18	; 0x07
    11c4:	8f 81       	ldd	r24, Y+7	; 0x07
    11c6:	98 85       	ldd	r25, Y+8	; 0x08
    11c8:	81 30       	cpi	r24, 0x01	; 1
    11ca:	91 05       	cpc	r25, r1
    11cc:	59 f1       	breq	.+86     	; 0x1224 <DIO_u8SetPinDirection+0x96>
    11ce:	2f 81       	ldd	r18, Y+7	; 0x07
    11d0:	38 85       	ldd	r19, Y+8	; 0x08
    11d2:	22 30       	cpi	r18, 0x02	; 2
    11d4:	31 05       	cpc	r19, r1
    11d6:	2c f4       	brge	.+10     	; 0x11e2 <DIO_u8SetPinDirection+0x54>
    11d8:	8f 81       	ldd	r24, Y+7	; 0x07
    11da:	98 85       	ldd	r25, Y+8	; 0x08
    11dc:	00 97       	sbiw	r24, 0x00	; 0
    11de:	69 f0       	breq	.+26     	; 0x11fa <DIO_u8SetPinDirection+0x6c>
    11e0:	60 c0       	rjmp	.+192    	; 0x12a2 <DIO_u8SetPinDirection+0x114>
    11e2:	2f 81       	ldd	r18, Y+7	; 0x07
    11e4:	38 85       	ldd	r19, Y+8	; 0x08
    11e6:	22 30       	cpi	r18, 0x02	; 2
    11e8:	31 05       	cpc	r19, r1
    11ea:	89 f1       	breq	.+98     	; 0x124e <DIO_u8SetPinDirection+0xc0>
    11ec:	8f 81       	ldd	r24, Y+7	; 0x07
    11ee:	98 85       	ldd	r25, Y+8	; 0x08
    11f0:	83 30       	cpi	r24, 0x03	; 3
    11f2:	91 05       	cpc	r25, r1
    11f4:	09 f4       	brne	.+2      	; 0x11f8 <DIO_u8SetPinDirection+0x6a>
    11f6:	40 c0       	rjmp	.+128    	; 0x1278 <DIO_u8SetPinDirection+0xea>
    11f8:	54 c0       	rjmp	.+168    	; 0x12a2 <DIO_u8SetPinDirection+0x114>
			{
			case DIO_PORTA: CLR_BIT(DDRA, Copy_u8Pin); break;
    11fa:	aa e3       	ldi	r26, 0x3A	; 58
    11fc:	b0 e0       	ldi	r27, 0x00	; 0
    11fe:	ea e3       	ldi	r30, 0x3A	; 58
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	80 81       	ld	r24, Z
    1204:	48 2f       	mov	r20, r24
    1206:	8b 81       	ldd	r24, Y+3	; 0x03
    1208:	28 2f       	mov	r18, r24
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	81 e0       	ldi	r24, 0x01	; 1
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	02 2e       	mov	r0, r18
    1212:	02 c0       	rjmp	.+4      	; 0x1218 <DIO_u8SetPinDirection+0x8a>
    1214:	88 0f       	add	r24, r24
    1216:	99 1f       	adc	r25, r25
    1218:	0a 94       	dec	r0
    121a:	e2 f7       	brpl	.-8      	; 0x1214 <DIO_u8SetPinDirection+0x86>
    121c:	80 95       	com	r24
    121e:	84 23       	and	r24, r20
    1220:	8c 93       	st	X, r24
    1222:	bd c0       	rjmp	.+378    	; 0x139e <DIO_u8SetPinDirection+0x210>
			case DIO_PORTB:	CLR_BIT(DDRB, Copy_u8Pin); break;
    1224:	a7 e3       	ldi	r26, 0x37	; 55
    1226:	b0 e0       	ldi	r27, 0x00	; 0
    1228:	e7 e3       	ldi	r30, 0x37	; 55
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	80 81       	ld	r24, Z
    122e:	48 2f       	mov	r20, r24
    1230:	8b 81       	ldd	r24, Y+3	; 0x03
    1232:	28 2f       	mov	r18, r24
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	81 e0       	ldi	r24, 0x01	; 1
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	02 2e       	mov	r0, r18
    123c:	02 c0       	rjmp	.+4      	; 0x1242 <DIO_u8SetPinDirection+0xb4>
    123e:	88 0f       	add	r24, r24
    1240:	99 1f       	adc	r25, r25
    1242:	0a 94       	dec	r0
    1244:	e2 f7       	brpl	.-8      	; 0x123e <DIO_u8SetPinDirection+0xb0>
    1246:	80 95       	com	r24
    1248:	84 23       	and	r24, r20
    124a:	8c 93       	st	X, r24
    124c:	a8 c0       	rjmp	.+336    	; 0x139e <DIO_u8SetPinDirection+0x210>
			case DIO_PORTC: CLR_BIT(DDRC, Copy_u8Pin); break;
    124e:	a4 e3       	ldi	r26, 0x34	; 52
    1250:	b0 e0       	ldi	r27, 0x00	; 0
    1252:	e4 e3       	ldi	r30, 0x34	; 52
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	80 81       	ld	r24, Z
    1258:	48 2f       	mov	r20, r24
    125a:	8b 81       	ldd	r24, Y+3	; 0x03
    125c:	28 2f       	mov	r18, r24
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	02 2e       	mov	r0, r18
    1266:	02 c0       	rjmp	.+4      	; 0x126c <DIO_u8SetPinDirection+0xde>
    1268:	88 0f       	add	r24, r24
    126a:	99 1f       	adc	r25, r25
    126c:	0a 94       	dec	r0
    126e:	e2 f7       	brpl	.-8      	; 0x1268 <DIO_u8SetPinDirection+0xda>
    1270:	80 95       	com	r24
    1272:	84 23       	and	r24, r20
    1274:	8c 93       	st	X, r24
    1276:	93 c0       	rjmp	.+294    	; 0x139e <DIO_u8SetPinDirection+0x210>
			case DIO_PORTD: CLR_BIT(DDRD, Copy_u8Pin); break;
    1278:	a1 e3       	ldi	r26, 0x31	; 49
    127a:	b0 e0       	ldi	r27, 0x00	; 0
    127c:	e1 e3       	ldi	r30, 0x31	; 49
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	80 81       	ld	r24, Z
    1282:	48 2f       	mov	r20, r24
    1284:	8b 81       	ldd	r24, Y+3	; 0x03
    1286:	28 2f       	mov	r18, r24
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	02 2e       	mov	r0, r18
    1290:	02 c0       	rjmp	.+4      	; 0x1296 <DIO_u8SetPinDirection+0x108>
    1292:	88 0f       	add	r24, r24
    1294:	99 1f       	adc	r25, r25
    1296:	0a 94       	dec	r0
    1298:	e2 f7       	brpl	.-8      	; 0x1292 <DIO_u8SetPinDirection+0x104>
    129a:	80 95       	com	r24
    129c:	84 23       	and	r24, r20
    129e:	8c 93       	st	X, r24
    12a0:	7e c0       	rjmp	.+252    	; 0x139e <DIO_u8SetPinDirection+0x210>
			default: Local_u8RunState = DIO_ERROR;
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	89 83       	std	Y+1, r24	; 0x01
    12a6:	7b c0       	rjmp	.+246    	; 0x139e <DIO_u8SetPinDirection+0x210>
			}
		}
		else if(Copy_u8Direction == DIO_PIN_OUTPUT)
    12a8:	8c 81       	ldd	r24, Y+4	; 0x04
    12aa:	81 30       	cpi	r24, 0x01	; 1
    12ac:	09 f0       	breq	.+2      	; 0x12b0 <DIO_u8SetPinDirection+0x122>
    12ae:	72 c0       	rjmp	.+228    	; 0x1394 <DIO_u8SetPinDirection+0x206>
		{
			switch(Copy_u8Port)
    12b0:	8a 81       	ldd	r24, Y+2	; 0x02
    12b2:	28 2f       	mov	r18, r24
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	3e 83       	std	Y+6, r19	; 0x06
    12b8:	2d 83       	std	Y+5, r18	; 0x05
    12ba:	8d 81       	ldd	r24, Y+5	; 0x05
    12bc:	9e 81       	ldd	r25, Y+6	; 0x06
    12be:	81 30       	cpi	r24, 0x01	; 1
    12c0:	91 05       	cpc	r25, r1
    12c2:	49 f1       	breq	.+82     	; 0x1316 <DIO_u8SetPinDirection+0x188>
    12c4:	2d 81       	ldd	r18, Y+5	; 0x05
    12c6:	3e 81       	ldd	r19, Y+6	; 0x06
    12c8:	22 30       	cpi	r18, 0x02	; 2
    12ca:	31 05       	cpc	r19, r1
    12cc:	2c f4       	brge	.+10     	; 0x12d8 <DIO_u8SetPinDirection+0x14a>
    12ce:	8d 81       	ldd	r24, Y+5	; 0x05
    12d0:	9e 81       	ldd	r25, Y+6	; 0x06
    12d2:	00 97       	sbiw	r24, 0x00	; 0
    12d4:	61 f0       	breq	.+24     	; 0x12ee <DIO_u8SetPinDirection+0x160>
    12d6:	5b c0       	rjmp	.+182    	; 0x138e <DIO_u8SetPinDirection+0x200>
    12d8:	2d 81       	ldd	r18, Y+5	; 0x05
    12da:	3e 81       	ldd	r19, Y+6	; 0x06
    12dc:	22 30       	cpi	r18, 0x02	; 2
    12de:	31 05       	cpc	r19, r1
    12e0:	71 f1       	breq	.+92     	; 0x133e <DIO_u8SetPinDirection+0x1b0>
    12e2:	8d 81       	ldd	r24, Y+5	; 0x05
    12e4:	9e 81       	ldd	r25, Y+6	; 0x06
    12e6:	83 30       	cpi	r24, 0x03	; 3
    12e8:	91 05       	cpc	r25, r1
    12ea:	e9 f1       	breq	.+122    	; 0x1366 <DIO_u8SetPinDirection+0x1d8>
    12ec:	50 c0       	rjmp	.+160    	; 0x138e <DIO_u8SetPinDirection+0x200>
			{
			case DIO_PORTA: SET_BIT(DDRA, Copy_u8Pin); break;
    12ee:	aa e3       	ldi	r26, 0x3A	; 58
    12f0:	b0 e0       	ldi	r27, 0x00	; 0
    12f2:	ea e3       	ldi	r30, 0x3A	; 58
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	80 81       	ld	r24, Z
    12f8:	48 2f       	mov	r20, r24
    12fa:	8b 81       	ldd	r24, Y+3	; 0x03
    12fc:	28 2f       	mov	r18, r24
    12fe:	30 e0       	ldi	r19, 0x00	; 0
    1300:	81 e0       	ldi	r24, 0x01	; 1
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	02 2e       	mov	r0, r18
    1306:	02 c0       	rjmp	.+4      	; 0x130c <DIO_u8SetPinDirection+0x17e>
    1308:	88 0f       	add	r24, r24
    130a:	99 1f       	adc	r25, r25
    130c:	0a 94       	dec	r0
    130e:	e2 f7       	brpl	.-8      	; 0x1308 <DIO_u8SetPinDirection+0x17a>
    1310:	84 2b       	or	r24, r20
    1312:	8c 93       	st	X, r24
    1314:	44 c0       	rjmp	.+136    	; 0x139e <DIO_u8SetPinDirection+0x210>
			case DIO_PORTB:	SET_BIT(DDRB, Copy_u8Pin); break;
    1316:	a7 e3       	ldi	r26, 0x37	; 55
    1318:	b0 e0       	ldi	r27, 0x00	; 0
    131a:	e7 e3       	ldi	r30, 0x37	; 55
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	80 81       	ld	r24, Z
    1320:	48 2f       	mov	r20, r24
    1322:	8b 81       	ldd	r24, Y+3	; 0x03
    1324:	28 2f       	mov	r18, r24
    1326:	30 e0       	ldi	r19, 0x00	; 0
    1328:	81 e0       	ldi	r24, 0x01	; 1
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	02 2e       	mov	r0, r18
    132e:	02 c0       	rjmp	.+4      	; 0x1334 <DIO_u8SetPinDirection+0x1a6>
    1330:	88 0f       	add	r24, r24
    1332:	99 1f       	adc	r25, r25
    1334:	0a 94       	dec	r0
    1336:	e2 f7       	brpl	.-8      	; 0x1330 <DIO_u8SetPinDirection+0x1a2>
    1338:	84 2b       	or	r24, r20
    133a:	8c 93       	st	X, r24
    133c:	30 c0       	rjmp	.+96     	; 0x139e <DIO_u8SetPinDirection+0x210>
			case DIO_PORTC: SET_BIT(DDRC, Copy_u8Pin); break;
    133e:	a4 e3       	ldi	r26, 0x34	; 52
    1340:	b0 e0       	ldi	r27, 0x00	; 0
    1342:	e4 e3       	ldi	r30, 0x34	; 52
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	80 81       	ld	r24, Z
    1348:	48 2f       	mov	r20, r24
    134a:	8b 81       	ldd	r24, Y+3	; 0x03
    134c:	28 2f       	mov	r18, r24
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	81 e0       	ldi	r24, 0x01	; 1
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	02 2e       	mov	r0, r18
    1356:	02 c0       	rjmp	.+4      	; 0x135c <DIO_u8SetPinDirection+0x1ce>
    1358:	88 0f       	add	r24, r24
    135a:	99 1f       	adc	r25, r25
    135c:	0a 94       	dec	r0
    135e:	e2 f7       	brpl	.-8      	; 0x1358 <DIO_u8SetPinDirection+0x1ca>
    1360:	84 2b       	or	r24, r20
    1362:	8c 93       	st	X, r24
    1364:	1c c0       	rjmp	.+56     	; 0x139e <DIO_u8SetPinDirection+0x210>
			case DIO_PORTD: SET_BIT(DDRD, Copy_u8Pin); break;
    1366:	a1 e3       	ldi	r26, 0x31	; 49
    1368:	b0 e0       	ldi	r27, 0x00	; 0
    136a:	e1 e3       	ldi	r30, 0x31	; 49
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	80 81       	ld	r24, Z
    1370:	48 2f       	mov	r20, r24
    1372:	8b 81       	ldd	r24, Y+3	; 0x03
    1374:	28 2f       	mov	r18, r24
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	81 e0       	ldi	r24, 0x01	; 1
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	02 2e       	mov	r0, r18
    137e:	02 c0       	rjmp	.+4      	; 0x1384 <DIO_u8SetPinDirection+0x1f6>
    1380:	88 0f       	add	r24, r24
    1382:	99 1f       	adc	r25, r25
    1384:	0a 94       	dec	r0
    1386:	e2 f7       	brpl	.-8      	; 0x1380 <DIO_u8SetPinDirection+0x1f2>
    1388:	84 2b       	or	r24, r20
    138a:	8c 93       	st	X, r24
    138c:	08 c0       	rjmp	.+16     	; 0x139e <DIO_u8SetPinDirection+0x210>
			default: Local_u8RunState = DIO_ERROR;
    138e:	81 e0       	ldi	r24, 0x01	; 1
    1390:	89 83       	std	Y+1, r24	; 0x01
    1392:	05 c0       	rjmp	.+10     	; 0x139e <DIO_u8SetPinDirection+0x210>
			}
		}
		else
		{
			Local_u8RunState = DIO_ERROR;
    1394:	81 e0       	ldi	r24, 0x01	; 1
    1396:	89 83       	std	Y+1, r24	; 0x01
    1398:	02 c0       	rjmp	.+4      	; 0x139e <DIO_u8SetPinDirection+0x210>
		}
	}
	else
	{
		Local_u8RunState = DIO_ERROR;
    139a:	81 e0       	ldi	r24, 0x01	; 1
    139c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8RunState;
    139e:	89 81       	ldd	r24, Y+1	; 0x01
}
    13a0:	28 96       	adiw	r28, 0x08	; 8
    13a2:	0f b6       	in	r0, 0x3f	; 63
    13a4:	f8 94       	cli
    13a6:	de bf       	out	0x3e, r29	; 62
    13a8:	0f be       	out	0x3f, r0	; 63
    13aa:	cd bf       	out	0x3d, r28	; 61
    13ac:	cf 91       	pop	r28
    13ae:	df 91       	pop	r29
    13b0:	08 95       	ret

000013b2 <DIO_u8SetPinValue>:


u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
    13b2:	df 93       	push	r29
    13b4:	cf 93       	push	r28
    13b6:	cd b7       	in	r28, 0x3d	; 61
    13b8:	de b7       	in	r29, 0x3e	; 62
    13ba:	28 97       	sbiw	r28, 0x08	; 8
    13bc:	0f b6       	in	r0, 0x3f	; 63
    13be:	f8 94       	cli
    13c0:	de bf       	out	0x3e, r29	; 62
    13c2:	0f be       	out	0x3f, r0	; 63
    13c4:	cd bf       	out	0x3d, r28	; 61
    13c6:	8a 83       	std	Y+2, r24	; 0x02
    13c8:	6b 83       	std	Y+3, r22	; 0x03
    13ca:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8RunState = DIO_OK;
    13cc:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8Pin >= DIO_PIN0) && (Copy_u8Pin <= DIO_PIN7))
    13ce:	8b 81       	ldd	r24, Y+3	; 0x03
    13d0:	88 30       	cpi	r24, 0x08	; 8
    13d2:	08 f0       	brcs	.+2      	; 0x13d6 <DIO_u8SetPinValue+0x24>
    13d4:	f4 c0       	rjmp	.+488    	; 0x15be <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value == DIO_PIN_LOW)
    13d6:	8c 81       	ldd	r24, Y+4	; 0x04
    13d8:	88 23       	and	r24, r24
    13da:	09 f0       	breq	.+2      	; 0x13de <DIO_u8SetPinValue+0x2c>
    13dc:	77 c0       	rjmp	.+238    	; 0x14cc <DIO_u8SetPinValue+0x11a>
		{
			switch(Copy_u8Port)
    13de:	8a 81       	ldd	r24, Y+2	; 0x02
    13e0:	28 2f       	mov	r18, r24
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	38 87       	std	Y+8, r19	; 0x08
    13e6:	2f 83       	std	Y+7, r18	; 0x07
    13e8:	8f 81       	ldd	r24, Y+7	; 0x07
    13ea:	98 85       	ldd	r25, Y+8	; 0x08
    13ec:	81 30       	cpi	r24, 0x01	; 1
    13ee:	91 05       	cpc	r25, r1
    13f0:	59 f1       	breq	.+86     	; 0x1448 <DIO_u8SetPinValue+0x96>
    13f2:	2f 81       	ldd	r18, Y+7	; 0x07
    13f4:	38 85       	ldd	r19, Y+8	; 0x08
    13f6:	22 30       	cpi	r18, 0x02	; 2
    13f8:	31 05       	cpc	r19, r1
    13fa:	2c f4       	brge	.+10     	; 0x1406 <DIO_u8SetPinValue+0x54>
    13fc:	8f 81       	ldd	r24, Y+7	; 0x07
    13fe:	98 85       	ldd	r25, Y+8	; 0x08
    1400:	00 97       	sbiw	r24, 0x00	; 0
    1402:	69 f0       	breq	.+26     	; 0x141e <DIO_u8SetPinValue+0x6c>
    1404:	60 c0       	rjmp	.+192    	; 0x14c6 <DIO_u8SetPinValue+0x114>
    1406:	2f 81       	ldd	r18, Y+7	; 0x07
    1408:	38 85       	ldd	r19, Y+8	; 0x08
    140a:	22 30       	cpi	r18, 0x02	; 2
    140c:	31 05       	cpc	r19, r1
    140e:	89 f1       	breq	.+98     	; 0x1472 <DIO_u8SetPinValue+0xc0>
    1410:	8f 81       	ldd	r24, Y+7	; 0x07
    1412:	98 85       	ldd	r25, Y+8	; 0x08
    1414:	83 30       	cpi	r24, 0x03	; 3
    1416:	91 05       	cpc	r25, r1
    1418:	09 f4       	brne	.+2      	; 0x141c <DIO_u8SetPinValue+0x6a>
    141a:	40 c0       	rjmp	.+128    	; 0x149c <DIO_u8SetPinValue+0xea>
    141c:	54 c0       	rjmp	.+168    	; 0x14c6 <DIO_u8SetPinValue+0x114>
			{
			case DIO_PORTA: CLR_BIT(PORTA, Copy_u8Pin); break;
    141e:	ab e3       	ldi	r26, 0x3B	; 59
    1420:	b0 e0       	ldi	r27, 0x00	; 0
    1422:	eb e3       	ldi	r30, 0x3B	; 59
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	80 81       	ld	r24, Z
    1428:	48 2f       	mov	r20, r24
    142a:	8b 81       	ldd	r24, Y+3	; 0x03
    142c:	28 2f       	mov	r18, r24
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	81 e0       	ldi	r24, 0x01	; 1
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	02 2e       	mov	r0, r18
    1436:	02 c0       	rjmp	.+4      	; 0x143c <DIO_u8SetPinValue+0x8a>
    1438:	88 0f       	add	r24, r24
    143a:	99 1f       	adc	r25, r25
    143c:	0a 94       	dec	r0
    143e:	e2 f7       	brpl	.-8      	; 0x1438 <DIO_u8SetPinValue+0x86>
    1440:	80 95       	com	r24
    1442:	84 23       	and	r24, r20
    1444:	8c 93       	st	X, r24
    1446:	bd c0       	rjmp	.+378    	; 0x15c2 <DIO_u8SetPinValue+0x210>
			case DIO_PORTB:	CLR_BIT(PORTB, Copy_u8Pin); break;
    1448:	a8 e3       	ldi	r26, 0x38	; 56
    144a:	b0 e0       	ldi	r27, 0x00	; 0
    144c:	e8 e3       	ldi	r30, 0x38	; 56
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	80 81       	ld	r24, Z
    1452:	48 2f       	mov	r20, r24
    1454:	8b 81       	ldd	r24, Y+3	; 0x03
    1456:	28 2f       	mov	r18, r24
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	81 e0       	ldi	r24, 0x01	; 1
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	02 2e       	mov	r0, r18
    1460:	02 c0       	rjmp	.+4      	; 0x1466 <DIO_u8SetPinValue+0xb4>
    1462:	88 0f       	add	r24, r24
    1464:	99 1f       	adc	r25, r25
    1466:	0a 94       	dec	r0
    1468:	e2 f7       	brpl	.-8      	; 0x1462 <DIO_u8SetPinValue+0xb0>
    146a:	80 95       	com	r24
    146c:	84 23       	and	r24, r20
    146e:	8c 93       	st	X, r24
    1470:	a8 c0       	rjmp	.+336    	; 0x15c2 <DIO_u8SetPinValue+0x210>
			case DIO_PORTC: CLR_BIT(PORTC, Copy_u8Pin); break;
    1472:	a5 e3       	ldi	r26, 0x35	; 53
    1474:	b0 e0       	ldi	r27, 0x00	; 0
    1476:	e5 e3       	ldi	r30, 0x35	; 53
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	80 81       	ld	r24, Z
    147c:	48 2f       	mov	r20, r24
    147e:	8b 81       	ldd	r24, Y+3	; 0x03
    1480:	28 2f       	mov	r18, r24
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	81 e0       	ldi	r24, 0x01	; 1
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	02 2e       	mov	r0, r18
    148a:	02 c0       	rjmp	.+4      	; 0x1490 <DIO_u8SetPinValue+0xde>
    148c:	88 0f       	add	r24, r24
    148e:	99 1f       	adc	r25, r25
    1490:	0a 94       	dec	r0
    1492:	e2 f7       	brpl	.-8      	; 0x148c <DIO_u8SetPinValue+0xda>
    1494:	80 95       	com	r24
    1496:	84 23       	and	r24, r20
    1498:	8c 93       	st	X, r24
    149a:	93 c0       	rjmp	.+294    	; 0x15c2 <DIO_u8SetPinValue+0x210>
			case DIO_PORTD: CLR_BIT(PORTD, Copy_u8Pin); break;
    149c:	a2 e3       	ldi	r26, 0x32	; 50
    149e:	b0 e0       	ldi	r27, 0x00	; 0
    14a0:	e2 e3       	ldi	r30, 0x32	; 50
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	80 81       	ld	r24, Z
    14a6:	48 2f       	mov	r20, r24
    14a8:	8b 81       	ldd	r24, Y+3	; 0x03
    14aa:	28 2f       	mov	r18, r24
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	81 e0       	ldi	r24, 0x01	; 1
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	02 2e       	mov	r0, r18
    14b4:	02 c0       	rjmp	.+4      	; 0x14ba <DIO_u8SetPinValue+0x108>
    14b6:	88 0f       	add	r24, r24
    14b8:	99 1f       	adc	r25, r25
    14ba:	0a 94       	dec	r0
    14bc:	e2 f7       	brpl	.-8      	; 0x14b6 <DIO_u8SetPinValue+0x104>
    14be:	80 95       	com	r24
    14c0:	84 23       	and	r24, r20
    14c2:	8c 93       	st	X, r24
    14c4:	7e c0       	rjmp	.+252    	; 0x15c2 <DIO_u8SetPinValue+0x210>
			default: Local_u8RunState = DIO_ERROR;
    14c6:	81 e0       	ldi	r24, 0x01	; 1
    14c8:	89 83       	std	Y+1, r24	; 0x01
    14ca:	7b c0       	rjmp	.+246    	; 0x15c2 <DIO_u8SetPinValue+0x210>
			}
		}
		else if(Copy_u8Value == DIO_PIN_HIGH)
    14cc:	8c 81       	ldd	r24, Y+4	; 0x04
    14ce:	81 30       	cpi	r24, 0x01	; 1
    14d0:	09 f0       	breq	.+2      	; 0x14d4 <DIO_u8SetPinValue+0x122>
    14d2:	72 c0       	rjmp	.+228    	; 0x15b8 <DIO_u8SetPinValue+0x206>
		{
			switch(Copy_u8Port)
    14d4:	8a 81       	ldd	r24, Y+2	; 0x02
    14d6:	28 2f       	mov	r18, r24
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	3e 83       	std	Y+6, r19	; 0x06
    14dc:	2d 83       	std	Y+5, r18	; 0x05
    14de:	8d 81       	ldd	r24, Y+5	; 0x05
    14e0:	9e 81       	ldd	r25, Y+6	; 0x06
    14e2:	81 30       	cpi	r24, 0x01	; 1
    14e4:	91 05       	cpc	r25, r1
    14e6:	49 f1       	breq	.+82     	; 0x153a <DIO_u8SetPinValue+0x188>
    14e8:	2d 81       	ldd	r18, Y+5	; 0x05
    14ea:	3e 81       	ldd	r19, Y+6	; 0x06
    14ec:	22 30       	cpi	r18, 0x02	; 2
    14ee:	31 05       	cpc	r19, r1
    14f0:	2c f4       	brge	.+10     	; 0x14fc <DIO_u8SetPinValue+0x14a>
    14f2:	8d 81       	ldd	r24, Y+5	; 0x05
    14f4:	9e 81       	ldd	r25, Y+6	; 0x06
    14f6:	00 97       	sbiw	r24, 0x00	; 0
    14f8:	61 f0       	breq	.+24     	; 0x1512 <DIO_u8SetPinValue+0x160>
    14fa:	5b c0       	rjmp	.+182    	; 0x15b2 <DIO_u8SetPinValue+0x200>
    14fc:	2d 81       	ldd	r18, Y+5	; 0x05
    14fe:	3e 81       	ldd	r19, Y+6	; 0x06
    1500:	22 30       	cpi	r18, 0x02	; 2
    1502:	31 05       	cpc	r19, r1
    1504:	71 f1       	breq	.+92     	; 0x1562 <DIO_u8SetPinValue+0x1b0>
    1506:	8d 81       	ldd	r24, Y+5	; 0x05
    1508:	9e 81       	ldd	r25, Y+6	; 0x06
    150a:	83 30       	cpi	r24, 0x03	; 3
    150c:	91 05       	cpc	r25, r1
    150e:	e9 f1       	breq	.+122    	; 0x158a <DIO_u8SetPinValue+0x1d8>
    1510:	50 c0       	rjmp	.+160    	; 0x15b2 <DIO_u8SetPinValue+0x200>
			{
			case DIO_PORTA: SET_BIT(PORTA, Copy_u8Pin); break;
    1512:	ab e3       	ldi	r26, 0x3B	; 59
    1514:	b0 e0       	ldi	r27, 0x00	; 0
    1516:	eb e3       	ldi	r30, 0x3B	; 59
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	80 81       	ld	r24, Z
    151c:	48 2f       	mov	r20, r24
    151e:	8b 81       	ldd	r24, Y+3	; 0x03
    1520:	28 2f       	mov	r18, r24
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	81 e0       	ldi	r24, 0x01	; 1
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	02 2e       	mov	r0, r18
    152a:	02 c0       	rjmp	.+4      	; 0x1530 <DIO_u8SetPinValue+0x17e>
    152c:	88 0f       	add	r24, r24
    152e:	99 1f       	adc	r25, r25
    1530:	0a 94       	dec	r0
    1532:	e2 f7       	brpl	.-8      	; 0x152c <DIO_u8SetPinValue+0x17a>
    1534:	84 2b       	or	r24, r20
    1536:	8c 93       	st	X, r24
    1538:	44 c0       	rjmp	.+136    	; 0x15c2 <DIO_u8SetPinValue+0x210>
			case DIO_PORTB:	SET_BIT(PORTB, Copy_u8Pin); break;
    153a:	a8 e3       	ldi	r26, 0x38	; 56
    153c:	b0 e0       	ldi	r27, 0x00	; 0
    153e:	e8 e3       	ldi	r30, 0x38	; 56
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	80 81       	ld	r24, Z
    1544:	48 2f       	mov	r20, r24
    1546:	8b 81       	ldd	r24, Y+3	; 0x03
    1548:	28 2f       	mov	r18, r24
    154a:	30 e0       	ldi	r19, 0x00	; 0
    154c:	81 e0       	ldi	r24, 0x01	; 1
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	02 2e       	mov	r0, r18
    1552:	02 c0       	rjmp	.+4      	; 0x1558 <DIO_u8SetPinValue+0x1a6>
    1554:	88 0f       	add	r24, r24
    1556:	99 1f       	adc	r25, r25
    1558:	0a 94       	dec	r0
    155a:	e2 f7       	brpl	.-8      	; 0x1554 <DIO_u8SetPinValue+0x1a2>
    155c:	84 2b       	or	r24, r20
    155e:	8c 93       	st	X, r24
    1560:	30 c0       	rjmp	.+96     	; 0x15c2 <DIO_u8SetPinValue+0x210>
			case DIO_PORTC: SET_BIT(PORTC, Copy_u8Pin); break;
    1562:	a5 e3       	ldi	r26, 0x35	; 53
    1564:	b0 e0       	ldi	r27, 0x00	; 0
    1566:	e5 e3       	ldi	r30, 0x35	; 53
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	80 81       	ld	r24, Z
    156c:	48 2f       	mov	r20, r24
    156e:	8b 81       	ldd	r24, Y+3	; 0x03
    1570:	28 2f       	mov	r18, r24
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	02 2e       	mov	r0, r18
    157a:	02 c0       	rjmp	.+4      	; 0x1580 <DIO_u8SetPinValue+0x1ce>
    157c:	88 0f       	add	r24, r24
    157e:	99 1f       	adc	r25, r25
    1580:	0a 94       	dec	r0
    1582:	e2 f7       	brpl	.-8      	; 0x157c <DIO_u8SetPinValue+0x1ca>
    1584:	84 2b       	or	r24, r20
    1586:	8c 93       	st	X, r24
    1588:	1c c0       	rjmp	.+56     	; 0x15c2 <DIO_u8SetPinValue+0x210>
			case DIO_PORTD: SET_BIT(PORTD, Copy_u8Pin); break;
    158a:	a2 e3       	ldi	r26, 0x32	; 50
    158c:	b0 e0       	ldi	r27, 0x00	; 0
    158e:	e2 e3       	ldi	r30, 0x32	; 50
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	80 81       	ld	r24, Z
    1594:	48 2f       	mov	r20, r24
    1596:	8b 81       	ldd	r24, Y+3	; 0x03
    1598:	28 2f       	mov	r18, r24
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	81 e0       	ldi	r24, 0x01	; 1
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	02 2e       	mov	r0, r18
    15a2:	02 c0       	rjmp	.+4      	; 0x15a8 <DIO_u8SetPinValue+0x1f6>
    15a4:	88 0f       	add	r24, r24
    15a6:	99 1f       	adc	r25, r25
    15a8:	0a 94       	dec	r0
    15aa:	e2 f7       	brpl	.-8      	; 0x15a4 <DIO_u8SetPinValue+0x1f2>
    15ac:	84 2b       	or	r24, r20
    15ae:	8c 93       	st	X, r24
    15b0:	08 c0       	rjmp	.+16     	; 0x15c2 <DIO_u8SetPinValue+0x210>
			default: Local_u8RunState = DIO_ERROR;
    15b2:	81 e0       	ldi	r24, 0x01	; 1
    15b4:	89 83       	std	Y+1, r24	; 0x01
    15b6:	05 c0       	rjmp	.+10     	; 0x15c2 <DIO_u8SetPinValue+0x210>
			}
		}
		else
		{
			Local_u8RunState = DIO_ERROR;
    15b8:	81 e0       	ldi	r24, 0x01	; 1
    15ba:	89 83       	std	Y+1, r24	; 0x01
    15bc:	02 c0       	rjmp	.+4      	; 0x15c2 <DIO_u8SetPinValue+0x210>
		}
	}
	else
	{
		Local_u8RunState = DIO_ERROR;
    15be:	81 e0       	ldi	r24, 0x01	; 1
    15c0:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8RunState;
    15c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    15c4:	28 96       	adiw	r28, 0x08	; 8
    15c6:	0f b6       	in	r0, 0x3f	; 63
    15c8:	f8 94       	cli
    15ca:	de bf       	out	0x3e, r29	; 62
    15cc:	0f be       	out	0x3f, r0	; 63
    15ce:	cd bf       	out	0x3d, r28	; 61
    15d0:	cf 91       	pop	r28
    15d2:	df 91       	pop	r29
    15d4:	08 95       	ret

000015d6 <DIO_u8GetPinValue>:


u8 DIO_u8GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 *Copy_u8Variable)
{
    15d6:	df 93       	push	r29
    15d8:	cf 93       	push	r28
    15da:	cd b7       	in	r28, 0x3d	; 61
    15dc:	de b7       	in	r29, 0x3e	; 62
    15de:	27 97       	sbiw	r28, 0x07	; 7
    15e0:	0f b6       	in	r0, 0x3f	; 63
    15e2:	f8 94       	cli
    15e4:	de bf       	out	0x3e, r29	; 62
    15e6:	0f be       	out	0x3f, r0	; 63
    15e8:	cd bf       	out	0x3d, r28	; 61
    15ea:	8a 83       	std	Y+2, r24	; 0x02
    15ec:	6b 83       	std	Y+3, r22	; 0x03
    15ee:	5d 83       	std	Y+5, r21	; 0x05
    15f0:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8RunState = DIO_OK;
    15f2:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8Pin >= DIO_PIN0) && (Copy_u8Pin <= DIO_PIN7) && (Copy_u8Variable != NULL))
    15f4:	8b 81       	ldd	r24, Y+3	; 0x03
    15f6:	88 30       	cpi	r24, 0x08	; 8
    15f8:	08 f0       	brcs	.+2      	; 0x15fc <DIO_u8GetPinValue+0x26>
    15fa:	79 c0       	rjmp	.+242    	; 0x16ee <DIO_u8GetPinValue+0x118>
    15fc:	8c 81       	ldd	r24, Y+4	; 0x04
    15fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1600:	00 97       	sbiw	r24, 0x00	; 0
    1602:	09 f4       	brne	.+2      	; 0x1606 <DIO_u8GetPinValue+0x30>
    1604:	74 c0       	rjmp	.+232    	; 0x16ee <DIO_u8GetPinValue+0x118>
	{
		switch(Copy_u8Port)
    1606:	8a 81       	ldd	r24, Y+2	; 0x02
    1608:	28 2f       	mov	r18, r24
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	3f 83       	std	Y+7, r19	; 0x07
    160e:	2e 83       	std	Y+6, r18	; 0x06
    1610:	4e 81       	ldd	r20, Y+6	; 0x06
    1612:	5f 81       	ldd	r21, Y+7	; 0x07
    1614:	41 30       	cpi	r20, 0x01	; 1
    1616:	51 05       	cpc	r21, r1
    1618:	59 f1       	breq	.+86     	; 0x1670 <DIO_u8GetPinValue+0x9a>
    161a:	8e 81       	ldd	r24, Y+6	; 0x06
    161c:	9f 81       	ldd	r25, Y+7	; 0x07
    161e:	82 30       	cpi	r24, 0x02	; 2
    1620:	91 05       	cpc	r25, r1
    1622:	34 f4       	brge	.+12     	; 0x1630 <DIO_u8GetPinValue+0x5a>
    1624:	2e 81       	ldd	r18, Y+6	; 0x06
    1626:	3f 81       	ldd	r19, Y+7	; 0x07
    1628:	21 15       	cp	r18, r1
    162a:	31 05       	cpc	r19, r1
    162c:	69 f0       	breq	.+26     	; 0x1648 <DIO_u8GetPinValue+0x72>
    162e:	5c c0       	rjmp	.+184    	; 0x16e8 <DIO_u8GetPinValue+0x112>
    1630:	4e 81       	ldd	r20, Y+6	; 0x06
    1632:	5f 81       	ldd	r21, Y+7	; 0x07
    1634:	42 30       	cpi	r20, 0x02	; 2
    1636:	51 05       	cpc	r21, r1
    1638:	79 f1       	breq	.+94     	; 0x1698 <DIO_u8GetPinValue+0xc2>
    163a:	8e 81       	ldd	r24, Y+6	; 0x06
    163c:	9f 81       	ldd	r25, Y+7	; 0x07
    163e:	83 30       	cpi	r24, 0x03	; 3
    1640:	91 05       	cpc	r25, r1
    1642:	09 f4       	brne	.+2      	; 0x1646 <DIO_u8GetPinValue+0x70>
    1644:	3d c0       	rjmp	.+122    	; 0x16c0 <DIO_u8GetPinValue+0xea>
    1646:	50 c0       	rjmp	.+160    	; 0x16e8 <DIO_u8GetPinValue+0x112>
		{
		case DIO_PORTA: *Copy_u8Variable = GET_BIT(PINA, Copy_u8Pin); break;
    1648:	e9 e3       	ldi	r30, 0x39	; 57
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	80 81       	ld	r24, Z
    164e:	28 2f       	mov	r18, r24
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	8b 81       	ldd	r24, Y+3	; 0x03
    1654:	88 2f       	mov	r24, r24
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	a9 01       	movw	r20, r18
    165a:	02 c0       	rjmp	.+4      	; 0x1660 <DIO_u8GetPinValue+0x8a>
    165c:	55 95       	asr	r21
    165e:	47 95       	ror	r20
    1660:	8a 95       	dec	r24
    1662:	e2 f7       	brpl	.-8      	; 0x165c <DIO_u8GetPinValue+0x86>
    1664:	ca 01       	movw	r24, r20
    1666:	81 70       	andi	r24, 0x01	; 1
    1668:	ec 81       	ldd	r30, Y+4	; 0x04
    166a:	fd 81       	ldd	r31, Y+5	; 0x05
    166c:	80 83       	st	Z, r24
    166e:	41 c0       	rjmp	.+130    	; 0x16f2 <DIO_u8GetPinValue+0x11c>
		case DIO_PORTB:	*Copy_u8Variable = GET_BIT(PINB, Copy_u8Pin); break;
    1670:	e6 e3       	ldi	r30, 0x36	; 54
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	80 81       	ld	r24, Z
    1676:	28 2f       	mov	r18, r24
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	8b 81       	ldd	r24, Y+3	; 0x03
    167c:	88 2f       	mov	r24, r24
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	a9 01       	movw	r20, r18
    1682:	02 c0       	rjmp	.+4      	; 0x1688 <DIO_u8GetPinValue+0xb2>
    1684:	55 95       	asr	r21
    1686:	47 95       	ror	r20
    1688:	8a 95       	dec	r24
    168a:	e2 f7       	brpl	.-8      	; 0x1684 <DIO_u8GetPinValue+0xae>
    168c:	ca 01       	movw	r24, r20
    168e:	81 70       	andi	r24, 0x01	; 1
    1690:	ec 81       	ldd	r30, Y+4	; 0x04
    1692:	fd 81       	ldd	r31, Y+5	; 0x05
    1694:	80 83       	st	Z, r24
    1696:	2d c0       	rjmp	.+90     	; 0x16f2 <DIO_u8GetPinValue+0x11c>
		case DIO_PORTC: *Copy_u8Variable = GET_BIT(PINC, Copy_u8Pin); break;
    1698:	e3 e3       	ldi	r30, 0x33	; 51
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	80 81       	ld	r24, Z
    169e:	28 2f       	mov	r18, r24
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	8b 81       	ldd	r24, Y+3	; 0x03
    16a4:	88 2f       	mov	r24, r24
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	a9 01       	movw	r20, r18
    16aa:	02 c0       	rjmp	.+4      	; 0x16b0 <DIO_u8GetPinValue+0xda>
    16ac:	55 95       	asr	r21
    16ae:	47 95       	ror	r20
    16b0:	8a 95       	dec	r24
    16b2:	e2 f7       	brpl	.-8      	; 0x16ac <DIO_u8GetPinValue+0xd6>
    16b4:	ca 01       	movw	r24, r20
    16b6:	81 70       	andi	r24, 0x01	; 1
    16b8:	ec 81       	ldd	r30, Y+4	; 0x04
    16ba:	fd 81       	ldd	r31, Y+5	; 0x05
    16bc:	80 83       	st	Z, r24
    16be:	19 c0       	rjmp	.+50     	; 0x16f2 <DIO_u8GetPinValue+0x11c>
		case DIO_PORTD: *Copy_u8Variable = GET_BIT(PIND, Copy_u8Pin); break;
    16c0:	e0 e3       	ldi	r30, 0x30	; 48
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	80 81       	ld	r24, Z
    16c6:	28 2f       	mov	r18, r24
    16c8:	30 e0       	ldi	r19, 0x00	; 0
    16ca:	8b 81       	ldd	r24, Y+3	; 0x03
    16cc:	88 2f       	mov	r24, r24
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	a9 01       	movw	r20, r18
    16d2:	02 c0       	rjmp	.+4      	; 0x16d8 <DIO_u8GetPinValue+0x102>
    16d4:	55 95       	asr	r21
    16d6:	47 95       	ror	r20
    16d8:	8a 95       	dec	r24
    16da:	e2 f7       	brpl	.-8      	; 0x16d4 <DIO_u8GetPinValue+0xfe>
    16dc:	ca 01       	movw	r24, r20
    16de:	81 70       	andi	r24, 0x01	; 1
    16e0:	ec 81       	ldd	r30, Y+4	; 0x04
    16e2:	fd 81       	ldd	r31, Y+5	; 0x05
    16e4:	80 83       	st	Z, r24
    16e6:	05 c0       	rjmp	.+10     	; 0x16f2 <DIO_u8GetPinValue+0x11c>
		default: Local_u8RunState = DIO_ERROR;
    16e8:	81 e0       	ldi	r24, 0x01	; 1
    16ea:	89 83       	std	Y+1, r24	; 0x01
    16ec:	02 c0       	rjmp	.+4      	; 0x16f2 <DIO_u8GetPinValue+0x11c>
		}
	}
	else
	{
		Local_u8RunState = DIO_ERROR;
    16ee:	81 e0       	ldi	r24, 0x01	; 1
    16f0:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8RunState;
    16f2:	89 81       	ldd	r24, Y+1	; 0x01
}
    16f4:	27 96       	adiw	r28, 0x07	; 7
    16f6:	0f b6       	in	r0, 0x3f	; 63
    16f8:	f8 94       	cli
    16fa:	de bf       	out	0x3e, r29	; 62
    16fc:	0f be       	out	0x3f, r0	; 63
    16fe:	cd bf       	out	0x3d, r28	; 61
    1700:	cf 91       	pop	r28
    1702:	df 91       	pop	r29
    1704:	08 95       	ret

00001706 <ADC_voidInit>:
static void (*Global_pvNotificationFunction) (void) = NULL;
static u8 Global_u8BusyState = FREE;
static u16 Global_u16Result;

void ADC_voidInit (void)
{
    1706:	df 93       	push	r29
    1708:	cf 93       	push	r28
    170a:	cd b7       	in	r28, 0x3d	; 61
    170c:	de b7       	in	r29, 0x3e	; 62
	/*AVCC as a reference voltage*/
	ADMUX &= ADC_REFERANCE_MASK;
    170e:	a7 e2       	ldi	r26, 0x27	; 39
    1710:	b0 e0       	ldi	r27, 0x00	; 0
    1712:	e7 e2       	ldi	r30, 0x27	; 39
    1714:	f0 e0       	ldi	r31, 0x00	; 0
    1716:	80 81       	ld	r24, Z
    1718:	8f 73       	andi	r24, 0x3F	; 63
    171a:	8c 93       	st	X, r24
	ADMUX |= ADC_REF_VOLTAGE;
    171c:	a7 e2       	ldi	r26, 0x27	; 39
    171e:	b0 e0       	ldi	r27, 0x00	; 0
    1720:	e7 e2       	ldi	r30, 0x27	; 39
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	80 81       	ld	r24, Z
    1726:	80 64       	ori	r24, 0x40	; 64
    1728:	8c 93       	st	X, r24
	/*Enable left adjust*/
	#if ADC_NUMBER_OF_BITS == EIGHT_BITS
		SET_BIT(ADMUX, ADMUX_ADLAR);
	/*Enable right adjust*/
	#elif ADC_NUMBER_OF_BITS == TEN_BITS
		CLR_BIT(ADMUX, ADMUX_ADLAR);
    172a:	a7 e2       	ldi	r26, 0x27	; 39
    172c:	b0 e0       	ldi	r27, 0x00	; 0
    172e:	e7 e2       	ldi	r30, 0x27	; 39
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	80 81       	ld	r24, Z
    1734:	8f 7d       	andi	r24, 0xDF	; 223
    1736:	8c 93       	st	X, r24
	#else
		#error "ADC_ADJSUT configuration Error"
	#endif

	/*Set the prescaler value*/
	ADCSRA &= ADC_PRESCALER_MASK;
    1738:	a6 e2       	ldi	r26, 0x26	; 38
    173a:	b0 e0       	ldi	r27, 0x00	; 0
    173c:	e6 e2       	ldi	r30, 0x26	; 38
    173e:	f0 e0       	ldi	r31, 0x00	; 0
    1740:	80 81       	ld	r24, Z
    1742:	88 7f       	andi	r24, 0xF8	; 248
    1744:	8c 93       	st	X, r24
	ADCSRA |= ADC_PRESCALER;
    1746:	a6 e2       	ldi	r26, 0x26	; 38
    1748:	b0 e0       	ldi	r27, 0x00	; 0
    174a:	e6 e2       	ldi	r30, 0x26	; 38
    174c:	f0 e0       	ldi	r31, 0x00	; 0
    174e:	80 81       	ld	r24, Z
    1750:	86 60       	ori	r24, 0x06	; 6
    1752:	8c 93       	st	X, r24

	/*ADC interrupt enable*/
	#if ADC_INTERRUPT_MODE  == ENABLE
		SET_BIT(ADCSRA, ADCSRA_ADIE);
	#elif ADC_INTERRUPT_MODE  == DISABLE
    	CLR_BIT(ADCSRA, ADCSRA_ADIE);
    1754:	a6 e2       	ldi	r26, 0x26	; 38
    1756:	b0 e0       	ldi	r27, 0x00	; 0
    1758:	e6 e2       	ldi	r30, 0x26	; 38
    175a:	f0 e0       	ldi	r31, 0x00	; 0
    175c:	80 81       	ld	r24, Z
    175e:	87 7f       	andi	r24, 0xF7	; 247
    1760:	8c 93       	st	X, r24
    	#error "ADC_INTERRUPT_MODE Configuration Error"
	#endif

	/*Enable ADC peripheral*/
	#if ADC_ENABLE == ENABLE
    	SET_BIT(ADCSRA, ADCSRA_ADEN);
    1762:	a6 e2       	ldi	r26, 0x26	; 38
    1764:	b0 e0       	ldi	r27, 0x00	; 0
    1766:	e6 e2       	ldi	r30, 0x26	; 38
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	80 81       	ld	r24, Z
    176c:	80 68       	ori	r24, 0x80	; 128
    176e:	8c 93       	st	X, r24
	#elif ADC_ENABLE == DISABLE
    	CLR_BIT(ADCSRA, ADCSRA_ADEN);
	#else
		#error "ADC_ENABLE Configuration Error"
	#endif
}
    1770:	cf 91       	pop	r28
    1772:	df 91       	pop	r29
    1774:	08 95       	ret

00001776 <ADC_u8GetChannelReadingSynchronous>:


u16 ADC_u8GetChannelReadingSynchronous (u8 Copy_u8Channel)
{
    1776:	df 93       	push	r29
    1778:	cf 93       	push	r28
    177a:	00 d0       	rcall	.+0      	; 0x177c <ADC_u8GetChannelReadingSynchronous+0x6>
    177c:	0f 92       	push	r0
    177e:	cd b7       	in	r28, 0x3d	; 61
    1780:	de b7       	in	r29, 0x3e	; 62
    1782:	89 83       	std	Y+1, r24	; 0x01
	if (Global_u8BusyState == BUSY)
    1784:	80 91 d0 00 	lds	r24, 0x00D0
    1788:	81 30       	cpi	r24, 0x01	; 1
    178a:	19 f4       	brne	.+6      	; 0x1792 <ADC_u8GetChannelReadingSynchronous+0x1c>
	{
		return 0;
    178c:	1b 82       	std	Y+3, r1	; 0x03
    178e:	1a 82       	std	Y+2, r1	; 0x02
    1790:	42 c0       	rjmp	.+132    	; 0x1816 <ADC_u8GetChannelReadingSynchronous+0xa0>
	}
	else
	{
		/*Check if the function argument in valid or not*/
		if (Copy_u8Channel < 8)
    1792:	89 81       	ldd	r24, Y+1	; 0x01
    1794:	88 30       	cpi	r24, 0x08	; 8
    1796:	d8 f5       	brcc	.+118    	; 0x180e <ADC_u8GetChannelReadingSynchronous+0x98>
		{
			/*Set the ADC_BusyState to be busy*/
			Global_u8BusyState = BUSY;
    1798:	81 e0       	ldi	r24, 0x01	; 1
    179a:	80 93 d0 00 	sts	0x00D0, r24

			/*Set the MUX bits to the input Channel*/
			ADMUX &= ADC_MUX_MASK;
    179e:	a7 e2       	ldi	r26, 0x27	; 39
    17a0:	b0 e0       	ldi	r27, 0x00	; 0
    17a2:	e7 e2       	ldi	r30, 0x27	; 39
    17a4:	f0 e0       	ldi	r31, 0x00	; 0
    17a6:	80 81       	ld	r24, Z
    17a8:	80 7e       	andi	r24, 0xE0	; 224
    17aa:	8c 93       	st	X, r24
			ADMUX |= Copy_u8Channel;
    17ac:	a7 e2       	ldi	r26, 0x27	; 39
    17ae:	b0 e0       	ldi	r27, 0x00	; 0
    17b0:	e7 e2       	ldi	r30, 0x27	; 39
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	90 81       	ld	r25, Z
    17b6:	89 81       	ldd	r24, Y+1	; 0x01
    17b8:	89 2b       	or	r24, r25
    17ba:	8c 93       	st	X, r24

		    /*ADC operation mode*/
			#if ADC_MODE == SINGLE_CONVERSATION
				/*Disable the AutoTrigger*/
		    	CLR_BIT(ADCSRA, ADCSRA_ADATE);
    17bc:	a6 e2       	ldi	r26, 0x26	; 38
    17be:	b0 e0       	ldi	r27, 0x00	; 0
    17c0:	e6 e2       	ldi	r30, 0x26	; 38
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	80 81       	ld	r24, Z
    17c6:	8f 7d       	andi	r24, 0xDF	; 223
    17c8:	8c 93       	st	X, r24
				/*Start conversion*/
				SET_BIT(ADCSRA, ADCSRA_ADSC);
    17ca:	a6 e2       	ldi	r26, 0x26	; 38
    17cc:	b0 e0       	ldi	r27, 0x00	; 0
    17ce:	e6 e2       	ldi	r30, 0x26	; 38
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	80 81       	ld	r24, Z
    17d4:	80 64       	ori	r24, 0x40	; 64
    17d6:	8c 93       	st	X, r24
				/*Polling (busy waiting) until the conversion complete flag is set*/
				while (GET_BIT(ADCSRA, ADCSRA_ADIF) == 0);
    17d8:	e6 e2       	ldi	r30, 0x26	; 38
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	80 81       	ld	r24, Z
    17de:	82 95       	swap	r24
    17e0:	8f 70       	andi	r24, 0x0F	; 15
    17e2:	88 2f       	mov	r24, r24
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	81 70       	andi	r24, 0x01	; 1
    17e8:	90 70       	andi	r25, 0x00	; 0
    17ea:	00 97       	sbiw	r24, 0x00	; 0
    17ec:	a9 f3       	breq	.-22     	; 0x17d8 <ADC_u8GetChannelReadingSynchronous+0x62>
				/*Clear the conversion complete flag*/
				SET_BIT(ADCSRA, ADCSRA_ADIF);
    17ee:	a6 e2       	ldi	r26, 0x26	; 38
    17f0:	b0 e0       	ldi	r27, 0x00	; 0
    17f2:	e6 e2       	ldi	r30, 0x26	; 38
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	80 81       	ld	r24, Z
    17f8:	80 61       	ori	r24, 0x10	; 16
    17fa:	8c 93       	st	X, r24
			#else
				#error "ADC_MODE Configuration Error"
			#endif

			/*Set the ADC_BusyState to be free*/
			Global_u8BusyState = FREE;
    17fc:	10 92 d0 00 	sts	0x00D0, r1

			/*Return the reading*/
			#if ADC_NUMBER_OF_BITS == EIGHT_BITS
				return ADCH;
			#elif ADC_NUMBER_OF_BITS == TEN_BITS
				return ADC;
    1800:	e4 e2       	ldi	r30, 0x24	; 36
    1802:	f0 e0       	ldi	r31, 0x00	; 0
    1804:	80 81       	ld	r24, Z
    1806:	91 81       	ldd	r25, Z+1	; 0x01
    1808:	9b 83       	std	Y+3, r25	; 0x03
    180a:	8a 83       	std	Y+2, r24	; 0x02
    180c:	04 c0       	rjmp	.+8      	; 0x1816 <ADC_u8GetChannelReadingSynchronous+0xa0>
			#endif
		}
		else
		{
			/*Do Nothing*/
			return 1;
    180e:	81 e0       	ldi	r24, 0x01	; 1
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	9b 83       	std	Y+3, r25	; 0x03
    1814:	8a 83       	std	Y+2, r24	; 0x02
    1816:	8a 81       	ldd	r24, Y+2	; 0x02
    1818:	9b 81       	ldd	r25, Y+3	; 0x03
		}

	}
}
    181a:	0f 90       	pop	r0
    181c:	0f 90       	pop	r0
    181e:	0f 90       	pop	r0
    1820:	cf 91       	pop	r28
    1822:	df 91       	pop	r29
    1824:	08 95       	ret

00001826 <ADC_u8GetChannelReadingAsynchronous>:


u16 ADC_u8GetChannelReadingAsynchronous (u8 Copy_u8Channel, void (*Copy_pvCallBackFunction) (void))
{
    1826:	df 93       	push	r29
    1828:	cf 93       	push	r28
    182a:	00 d0       	rcall	.+0      	; 0x182c <ADC_u8GetChannelReadingAsynchronous+0x6>
    182c:	00 d0       	rcall	.+0      	; 0x182e <ADC_u8GetChannelReadingAsynchronous+0x8>
    182e:	0f 92       	push	r0
    1830:	cd b7       	in	r28, 0x3d	; 61
    1832:	de b7       	in	r29, 0x3e	; 62
    1834:	89 83       	std	Y+1, r24	; 0x01
    1836:	7b 83       	std	Y+3, r23	; 0x03
    1838:	6a 83       	std	Y+2, r22	; 0x02
	if (Global_u8BusyState == BUSY)
    183a:	80 91 d0 00 	lds	r24, 0x00D0
    183e:	81 30       	cpi	r24, 0x01	; 1
    1840:	19 f4       	brne	.+6      	; 0x1848 <ADC_u8GetChannelReadingAsynchronous+0x22>
	{
		return 0;
    1842:	1d 82       	std	Y+5, r1	; 0x05
    1844:	1c 82       	std	Y+4, r1	; 0x04
    1846:	3b c0       	rjmp	.+118    	; 0x18be <ADC_u8GetChannelReadingAsynchronous+0x98>
	}
	else
	{
		/*Check if the function argument in valid or not*/
		if (Copy_u8Channel < 8)
    1848:	89 81       	ldd	r24, Y+1	; 0x01
    184a:	88 30       	cpi	r24, 0x08	; 8
    184c:	a0 f5       	brcc	.+104    	; 0x18b6 <ADC_u8GetChannelReadingAsynchronous+0x90>
		{
			/*Set the ADC_BusyState to be busy*/
			Global_u8BusyState = BUSY;
    184e:	81 e0       	ldi	r24, 0x01	; 1
    1850:	80 93 d0 00 	sts	0x00D0, r24

			/*Clear the MUX bits in ADMUX register*/
			ADMUX &= ADC_MUX_MASK;
    1854:	a7 e2       	ldi	r26, 0x27	; 39
    1856:	b0 e0       	ldi	r27, 0x00	; 0
    1858:	e7 e2       	ldi	r30, 0x27	; 39
    185a:	f0 e0       	ldi	r31, 0x00	; 0
    185c:	80 81       	ld	r24, Z
    185e:	80 7e       	andi	r24, 0xE0	; 224
    1860:	8c 93       	st	X, r24
			/*Set the required channel into the MUX bits*/
			ADMUX |= Copy_u8Channel;
    1862:	a7 e2       	ldi	r26, 0x27	; 39
    1864:	b0 e0       	ldi	r27, 0x00	; 0
    1866:	e7 e2       	ldi	r30, 0x27	; 39
    1868:	f0 e0       	ldi	r31, 0x00	; 0
    186a:	90 81       	ld	r25, Z
    186c:	89 81       	ldd	r24, Y+1	; 0x01
    186e:	89 2b       	or	r24, r25
    1870:	8c 93       	st	X, r24

			/*Set the call back function*/
			Global_pvNotificationFunction = Copy_pvCallBackFunction;
    1872:	8a 81       	ldd	r24, Y+2	; 0x02
    1874:	9b 81       	ldd	r25, Y+3	; 0x03
    1876:	90 93 cf 00 	sts	0x00CF, r25
    187a:	80 93 ce 00 	sts	0x00CE, r24

		    /*ADC operation mode*/
			#if ADC_MODE == SINGLE_CONVERSATION
				/*Disable the AutoTrigger*/
		    	CLR_BIT(ADCSRA, ADCSRA_ADATE);
    187e:	a6 e2       	ldi	r26, 0x26	; 38
    1880:	b0 e0       	ldi	r27, 0x00	; 0
    1882:	e6 e2       	ldi	r30, 0x26	; 38
    1884:	f0 e0       	ldi	r31, 0x00	; 0
    1886:	80 81       	ld	r24, Z
    1888:	8f 7d       	andi	r24, 0xDF	; 223
    188a:	8c 93       	st	X, r24
				/*Start conversion*/
				SET_BIT(ADCSRA, ADCSRA_ADSC);
    188c:	a6 e2       	ldi	r26, 0x26	; 38
    188e:	b0 e0       	ldi	r27, 0x00	; 0
    1890:	e6 e2       	ldi	r30, 0x26	; 38
    1892:	f0 e0       	ldi	r31, 0x00	; 0
    1894:	80 81       	ld	r24, Z
    1896:	80 64       	ori	r24, 0x40	; 64
    1898:	8c 93       	st	X, r24
				/*Enable the interrupt*/
				SET_BIT(ADCSRA, ADCSRA_ADIE);
    189a:	a6 e2       	ldi	r26, 0x26	; 38
    189c:	b0 e0       	ldi	r27, 0x00	; 0
    189e:	e6 e2       	ldi	r30, 0x26	; 38
    18a0:	f0 e0       	ldi	r31, 0x00	; 0
    18a2:	80 81       	ld	r24, Z
    18a4:	88 60       	ori	r24, 0x08	; 8
    18a6:	8c 93       	st	X, r24
			#else
				#error "ADC_MODE Configuration Error"
			#endif

			/*Return the reading*/
			return Global_u16Result;
    18a8:	80 91 d1 00 	lds	r24, 0x00D1
    18ac:	90 91 d2 00 	lds	r25, 0x00D2
    18b0:	9d 83       	std	Y+5, r25	; 0x05
    18b2:	8c 83       	std	Y+4, r24	; 0x04
    18b4:	04 c0       	rjmp	.+8      	; 0x18be <ADC_u8GetChannelReadingAsynchronous+0x98>
		}
		else
		{
			/*Do nothing*/
			return 1;
    18b6:	81 e0       	ldi	r24, 0x01	; 1
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	9d 83       	std	Y+5, r25	; 0x05
    18bc:	8c 83       	std	Y+4, r24	; 0x04
    18be:	8c 81       	ldd	r24, Y+4	; 0x04
    18c0:	9d 81       	ldd	r25, Y+5	; 0x05
		}
	}
}
    18c2:	0f 90       	pop	r0
    18c4:	0f 90       	pop	r0
    18c6:	0f 90       	pop	r0
    18c8:	0f 90       	pop	r0
    18ca:	0f 90       	pop	r0
    18cc:	cf 91       	pop	r28
    18ce:	df 91       	pop	r29
    18d0:	08 95       	ret

000018d2 <__vector_16>:

void __vector_16 (void) __attribute__((signal));
void __vector_16 (void)
{
    18d2:	1f 92       	push	r1
    18d4:	0f 92       	push	r0
    18d6:	0f b6       	in	r0, 0x3f	; 63
    18d8:	0f 92       	push	r0
    18da:	11 24       	eor	r1, r1
    18dc:	2f 93       	push	r18
    18de:	3f 93       	push	r19
    18e0:	4f 93       	push	r20
    18e2:	5f 93       	push	r21
    18e4:	6f 93       	push	r22
    18e6:	7f 93       	push	r23
    18e8:	8f 93       	push	r24
    18ea:	9f 93       	push	r25
    18ec:	af 93       	push	r26
    18ee:	bf 93       	push	r27
    18f0:	ef 93       	push	r30
    18f2:	ff 93       	push	r31
    18f4:	df 93       	push	r29
    18f6:	cf 93       	push	r28
    18f8:	cd b7       	in	r28, 0x3d	; 61
    18fa:	de b7       	in	r29, 0x3e	; 62
	/*Read the result*/
	#if ADC_NUMBER_OF_BITS == EIGHT_BITS
		Global_u16Result = ADCH;
	#elif ADC_NUMBER_OF_BITS == TEN_BITS
		Global_u16Result = ADC;
    18fc:	e4 e2       	ldi	r30, 0x24	; 36
    18fe:	f0 e0       	ldi	r31, 0x00	; 0
    1900:	80 81       	ld	r24, Z
    1902:	91 81       	ldd	r25, Z+1	; 0x01
    1904:	90 93 d2 00 	sts	0x00D2, r25
    1908:	80 93 d1 00 	sts	0x00D1, r24
	#else
		#error "ADC_NUMBER_OF_BITS Configuration Error"
	#endif

	if (Global_pvNotificationFunction != NULL)
    190c:	80 91 ce 00 	lds	r24, 0x00CE
    1910:	90 91 cf 00 	lds	r25, 0x00CF
    1914:	00 97       	sbiw	r24, 0x00	; 0
    1916:	71 f0       	breq	.+28     	; 0x1934 <__vector_16+0x62>
	{
		Global_pvNotificationFunction();
    1918:	e0 91 ce 00 	lds	r30, 0x00CE
    191c:	f0 91 cf 00 	lds	r31, 0x00CF
    1920:	09 95       	icall

		/*Set the ADC_BusyState to be free*/
		Global_u8BusyState = FREE;
    1922:	10 92 d0 00 	sts	0x00D0, r1

		/*Disable the interrupt*/
		CLR_BIT(ADCSRA, ADCSRA_ADIE);
    1926:	a6 e2       	ldi	r26, 0x26	; 38
    1928:	b0 e0       	ldi	r27, 0x00	; 0
    192a:	e6 e2       	ldi	r30, 0x26	; 38
    192c:	f0 e0       	ldi	r31, 0x00	; 0
    192e:	80 81       	ld	r24, Z
    1930:	87 7f       	andi	r24, 0xF7	; 247
    1932:	8c 93       	st	X, r24
	}
	else
	{
		/*Do nothing*/
	}
}
    1934:	cf 91       	pop	r28
    1936:	df 91       	pop	r29
    1938:	ff 91       	pop	r31
    193a:	ef 91       	pop	r30
    193c:	bf 91       	pop	r27
    193e:	af 91       	pop	r26
    1940:	9f 91       	pop	r25
    1942:	8f 91       	pop	r24
    1944:	7f 91       	pop	r23
    1946:	6f 91       	pop	r22
    1948:	5f 91       	pop	r21
    194a:	4f 91       	pop	r20
    194c:	3f 91       	pop	r19
    194e:	2f 91       	pop	r18
    1950:	0f 90       	pop	r0
    1952:	0f be       	out	0x3f, r0	; 63
    1954:	0f 90       	pop	r0
    1956:	1f 90       	pop	r1
    1958:	18 95       	reti

0000195a <Transisor_voidIntialization>:
#include "Transistor_private.h"
#include "Transistor_config.h"


void Transisor_voidIntialization(void)
{
    195a:	df 93       	push	r29
    195c:	cf 93       	push	r28
    195e:	cd b7       	in	r28, 0x3d	; 61
    1960:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDirection(TRANSISTOR_BASE_PORT, TRANSISTOR_BASE_PIN, DIO_PIN_OUTPUT);
    1962:	80 e0       	ldi	r24, 0x00	; 0
    1964:	60 e0       	ldi	r22, 0x00	; 0
    1966:	41 e0       	ldi	r20, 0x01	; 1
    1968:	0e 94 c7 08 	call	0x118e	; 0x118e <DIO_u8SetPinDirection>
}
    196c:	cf 91       	pop	r28
    196e:	df 91       	pop	r29
    1970:	08 95       	ret

00001972 <Transisor_voidSaturationMode>:

void Transisor_voidSaturationMode(void)
{
    1972:	df 93       	push	r29
    1974:	cf 93       	push	r28
    1976:	cd b7       	in	r28, 0x3d	; 61
    1978:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(TRANSISTOR_BASE_PORT, TRANSISTOR_BASE_PIN, DIO_PIN_HIGH);
    197a:	80 e0       	ldi	r24, 0x00	; 0
    197c:	60 e0       	ldi	r22, 0x00	; 0
    197e:	41 e0       	ldi	r20, 0x01	; 1
    1980:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <DIO_u8SetPinValue>
}
    1984:	cf 91       	pop	r28
    1986:	df 91       	pop	r29
    1988:	08 95       	ret

0000198a <Transisor_voidCutOffMode>:

void Transisor_voidCutOffMode(void)
{
    198a:	df 93       	push	r29
    198c:	cf 93       	push	r28
    198e:	cd b7       	in	r28, 0x3d	; 61
    1990:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(TRANSISTOR_BASE_PORT, TRANSISTOR_BASE_PIN, DIO_PIN_LOW);
    1992:	80 e0       	ldi	r24, 0x00	; 0
    1994:	60 e0       	ldi	r22, 0x00	; 0
    1996:	40 e0       	ldi	r20, 0x00	; 0
    1998:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <DIO_u8SetPinValue>
}
    199c:	cf 91       	pop	r28
    199e:	df 91       	pop	r29
    19a0:	08 95       	ret

000019a2 <SSD_u8SetNumber>:
#include "SSD_interface.h"
#include "SSD_private.h"
#include "SSD_config.h"

u8 SSD_u8SetNumber(u8 Copy_u8Number, SSD_t *Copy_pSSD_tElements)
{
    19a2:	df 93       	push	r29
    19a4:	cf 93       	push	r28
    19a6:	cd b7       	in	r28, 0x3d	; 61
    19a8:	de b7       	in	r29, 0x3e	; 62
    19aa:	63 97       	sbiw	r28, 0x13	; 19
    19ac:	0f b6       	in	r0, 0x3f	; 63
    19ae:	f8 94       	cli
    19b0:	de bf       	out	0x3e, r29	; 62
    19b2:	0f be       	out	0x3f, r0	; 63
    19b4:	cd bf       	out	0x3d, r28	; 61
    19b6:	8c 87       	std	Y+12, r24	; 0x0c
    19b8:	7e 87       	std	Y+14, r23	; 0x0e
    19ba:	6d 87       	std	Y+13, r22	; 0x0d
	u8 Local_u8ErrorState = 0;
    19bc:	19 82       	std	Y+1, r1	; 0x01
	u8 Local_u8ArrayOfNumbers[10] = {0b00111111, 0b00000110, 0b01011011, 0b01001111, 0b01100110,
								0b01101101, 0b01111101, 0b00000111, 0b01111111, 0b01101111};
    19be:	ce 01       	movw	r24, r28
    19c0:	02 96       	adiw	r24, 0x02	; 2
    19c2:	98 8b       	std	Y+16, r25	; 0x10
    19c4:	8f 87       	std	Y+15, r24	; 0x0f
    19c6:	ee ea       	ldi	r30, 0xAE	; 174
    19c8:	f0 e0       	ldi	r31, 0x00	; 0
    19ca:	fa 8b       	std	Y+18, r31	; 0x12
    19cc:	e9 8b       	std	Y+17, r30	; 0x11
    19ce:	fa e0       	ldi	r31, 0x0A	; 10
    19d0:	fb 8b       	std	Y+19, r31	; 0x13
    19d2:	e9 89       	ldd	r30, Y+17	; 0x11
    19d4:	fa 89       	ldd	r31, Y+18	; 0x12
    19d6:	00 80       	ld	r0, Z
    19d8:	89 89       	ldd	r24, Y+17	; 0x11
    19da:	9a 89       	ldd	r25, Y+18	; 0x12
    19dc:	01 96       	adiw	r24, 0x01	; 1
    19de:	9a 8b       	std	Y+18, r25	; 0x12
    19e0:	89 8b       	std	Y+17, r24	; 0x11
    19e2:	ef 85       	ldd	r30, Y+15	; 0x0f
    19e4:	f8 89       	ldd	r31, Y+16	; 0x10
    19e6:	00 82       	st	Z, r0
    19e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    19ea:	98 89       	ldd	r25, Y+16	; 0x10
    19ec:	01 96       	adiw	r24, 0x01	; 1
    19ee:	98 8b       	std	Y+16, r25	; 0x10
    19f0:	8f 87       	std	Y+15, r24	; 0x0f
    19f2:	9b 89       	ldd	r25, Y+19	; 0x13
    19f4:	91 50       	subi	r25, 0x01	; 1
    19f6:	9b 8b       	std	Y+19, r25	; 0x13
    19f8:	eb 89       	ldd	r30, Y+19	; 0x13
    19fa:	ee 23       	and	r30, r30
    19fc:	51 f7       	brne	.-44     	; 0x19d2 <SSD_u8SetNumber+0x30>

	if(Copy_pSSD_tElements != 0)
    19fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a00:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a02:	00 97       	sbiw	r24, 0x00	; 0
    1a04:	09 f4       	brne	.+2      	; 0x1a08 <SSD_u8SetNumber+0x66>
    1a06:	5b c0       	rjmp	.+182    	; 0x1abe <SSD_u8SetNumber+0x11c>
	{
		if(Copy_pSSD_tElements->u8CommonType == ANODE)
    1a08:	ed 85       	ldd	r30, Y+13	; 0x0d
    1a0a:	fe 85       	ldd	r31, Y+14	; 0x0e
    1a0c:	80 81       	ld	r24, Z
    1a0e:	88 23       	and	r24, r24
    1a10:	69 f5       	brne	.+90     	; 0x1a6c <SSD_u8SetNumber+0xca>
		{
			DIO_u8SetPinDirection(Copy_pSSD_tElements->u8EnablePort, Copy_pSSD_tElements->u8EnablePin, DIO_PIN_OUTPUT);
    1a12:	ed 85       	ldd	r30, Y+13	; 0x0d
    1a14:	fe 85       	ldd	r31, Y+14	; 0x0e
    1a16:	82 81       	ldd	r24, Z+2	; 0x02
    1a18:	ed 85       	ldd	r30, Y+13	; 0x0d
    1a1a:	fe 85       	ldd	r31, Y+14	; 0x0e
    1a1c:	93 81       	ldd	r25, Z+3	; 0x03
    1a1e:	69 2f       	mov	r22, r25
    1a20:	41 e0       	ldi	r20, 0x01	; 1
    1a22:	0e 94 c7 08 	call	0x118e	; 0x118e <DIO_u8SetPinDirection>
			DIO_u8SetPinValue(Copy_pSSD_tElements->u8EnablePort, Copy_pSSD_tElements->u8EnablePin, DIO_PIN_HIGH);
    1a26:	ed 85       	ldd	r30, Y+13	; 0x0d
    1a28:	fe 85       	ldd	r31, Y+14	; 0x0e
    1a2a:	82 81       	ldd	r24, Z+2	; 0x02
    1a2c:	ed 85       	ldd	r30, Y+13	; 0x0d
    1a2e:	fe 85       	ldd	r31, Y+14	; 0x0e
    1a30:	93 81       	ldd	r25, Z+3	; 0x03
    1a32:	69 2f       	mov	r22, r25
    1a34:	41 e0       	ldi	r20, 0x01	; 1
    1a36:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <DIO_u8SetPinValue>
			DIO_u8SetPortDirection(Copy_pSSD_tElements->u8Port, DIO_PORT_OUTPUT);
    1a3a:	ed 85       	ldd	r30, Y+13	; 0x0d
    1a3c:	fe 85       	ldd	r31, Y+14	; 0x0e
    1a3e:	81 81       	ldd	r24, Z+1	; 0x01
    1a40:	6f ef       	ldi	r22, 0xFF	; 255
    1a42:	0e 94 dd 07 	call	0xfba	; 0xfba <DIO_u8SetPortDirection>
			DIO_u8SetPortValue(Copy_pSSD_tElements->u8Port, ~(Local_u8ArrayOfNumbers[Copy_u8Number]));
    1a46:	ed 85       	ldd	r30, Y+13	; 0x0d
    1a48:	fe 85       	ldd	r31, Y+14	; 0x0e
    1a4a:	41 81       	ldd	r20, Z+1	; 0x01
    1a4c:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a4e:	28 2f       	mov	r18, r24
    1a50:	30 e0       	ldi	r19, 0x00	; 0
    1a52:	ce 01       	movw	r24, r28
    1a54:	02 96       	adiw	r24, 0x02	; 2
    1a56:	fc 01       	movw	r30, r24
    1a58:	e2 0f       	add	r30, r18
    1a5a:	f3 1f       	adc	r31, r19
    1a5c:	80 81       	ld	r24, Z
    1a5e:	98 2f       	mov	r25, r24
    1a60:	90 95       	com	r25
    1a62:	84 2f       	mov	r24, r20
    1a64:	69 2f       	mov	r22, r25
    1a66:	0e 94 25 08 	call	0x104a	; 0x104a <DIO_u8SetPortValue>
    1a6a:	2b c0       	rjmp	.+86     	; 0x1ac2 <SSD_u8SetNumber+0x120>
		}
		else if(Copy_pSSD_tElements->u8CommonType == CATHODE)
    1a6c:	ed 85       	ldd	r30, Y+13	; 0x0d
    1a6e:	fe 85       	ldd	r31, Y+14	; 0x0e
    1a70:	80 81       	ld	r24, Z
    1a72:	81 30       	cpi	r24, 0x01	; 1
    1a74:	09 f5       	brne	.+66     	; 0x1ab8 <SSD_u8SetNumber+0x116>
		{
			DIO_u8SetPinDirection(Copy_pSSD_tElements->u8EnablePort, Copy_pSSD_tElements->u8EnablePin, DIO_PIN_INPUT);
    1a76:	ed 85       	ldd	r30, Y+13	; 0x0d
    1a78:	fe 85       	ldd	r31, Y+14	; 0x0e
    1a7a:	82 81       	ldd	r24, Z+2	; 0x02
    1a7c:	ed 85       	ldd	r30, Y+13	; 0x0d
    1a7e:	fe 85       	ldd	r31, Y+14	; 0x0e
    1a80:	93 81       	ldd	r25, Z+3	; 0x03
    1a82:	69 2f       	mov	r22, r25
    1a84:	40 e0       	ldi	r20, 0x00	; 0
    1a86:	0e 94 c7 08 	call	0x118e	; 0x118e <DIO_u8SetPinDirection>
			DIO_u8SetPortDirection(Copy_pSSD_tElements->u8Port, DIO_PORT_OUTPUT);
    1a8a:	ed 85       	ldd	r30, Y+13	; 0x0d
    1a8c:	fe 85       	ldd	r31, Y+14	; 0x0e
    1a8e:	81 81       	ldd	r24, Z+1	; 0x01
    1a90:	6f ef       	ldi	r22, 0xFF	; 255
    1a92:	0e 94 dd 07 	call	0xfba	; 0xfba <DIO_u8SetPortDirection>
			DIO_u8SetPortValue(Copy_pSSD_tElements->u8Port, Local_u8ArrayOfNumbers[Copy_u8Number]);
    1a96:	ed 85       	ldd	r30, Y+13	; 0x0d
    1a98:	fe 85       	ldd	r31, Y+14	; 0x0e
    1a9a:	41 81       	ldd	r20, Z+1	; 0x01
    1a9c:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a9e:	28 2f       	mov	r18, r24
    1aa0:	30 e0       	ldi	r19, 0x00	; 0
    1aa2:	ce 01       	movw	r24, r28
    1aa4:	02 96       	adiw	r24, 0x02	; 2
    1aa6:	fc 01       	movw	r30, r24
    1aa8:	e2 0f       	add	r30, r18
    1aaa:	f3 1f       	adc	r31, r19
    1aac:	90 81       	ld	r25, Z
    1aae:	84 2f       	mov	r24, r20
    1ab0:	69 2f       	mov	r22, r25
    1ab2:	0e 94 25 08 	call	0x104a	; 0x104a <DIO_u8SetPortValue>
    1ab6:	05 c0       	rjmp	.+10     	; 0x1ac2 <SSD_u8SetNumber+0x120>
		}
		else
		{
			Local_u8ErrorState = 1;
    1ab8:	81 e0       	ldi	r24, 0x01	; 1
    1aba:	89 83       	std	Y+1, r24	; 0x01
    1abc:	02 c0       	rjmp	.+4      	; 0x1ac2 <SSD_u8SetNumber+0x120>
		}
	}
	else
	{
		Local_u8ErrorState = 1;
    1abe:	81 e0       	ldi	r24, 0x01	; 1
    1ac0:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_u8ErrorState;
    1ac2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ac4:	63 96       	adiw	r28, 0x13	; 19
    1ac6:	0f b6       	in	r0, 0x3f	; 63
    1ac8:	f8 94       	cli
    1aca:	de bf       	out	0x3e, r29	; 62
    1acc:	0f be       	out	0x3f, r0	; 63
    1ace:	cd bf       	out	0x3d, r28	; 61
    1ad0:	cf 91       	pop	r28
    1ad2:	df 91       	pop	r29
    1ad4:	08 95       	ret

00001ad6 <Relay_voidIntialization>:
#include "Relay_private.h"
#include "Relay_config.h"


void Relay_voidIntialization(void)
{
    1ad6:	df 93       	push	r29
    1ad8:	cf 93       	push	r28
    1ada:	cd b7       	in	r28, 0x3d	; 61
    1adc:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDirection(RELAY_PORT, RELAY_PIN, DIO_PIN_OUTPUT);
    1ade:	80 e0       	ldi	r24, 0x00	; 0
    1ae0:	60 e0       	ldi	r22, 0x00	; 0
    1ae2:	41 e0       	ldi	r20, 0x01	; 1
    1ae4:	0e 94 c7 08 	call	0x118e	; 0x118e <DIO_u8SetPinDirection>
}
    1ae8:	cf 91       	pop	r28
    1aea:	df 91       	pop	r29
    1aec:	08 95       	ret

00001aee <Relay_voidNormallyClose>:

void Relay_voidNormallyClose(void)
{
    1aee:	df 93       	push	r29
    1af0:	cf 93       	push	r28
    1af2:	cd b7       	in	r28, 0x3d	; 61
    1af4:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(RELAY_PORT, RELAY_PIN, DIO_PIN_LOW);
    1af6:	80 e0       	ldi	r24, 0x00	; 0
    1af8:	60 e0       	ldi	r22, 0x00	; 0
    1afa:	40 e0       	ldi	r20, 0x00	; 0
    1afc:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <DIO_u8SetPinValue>
}
    1b00:	cf 91       	pop	r28
    1b02:	df 91       	pop	r29
    1b04:	08 95       	ret

00001b06 <Relay_voidNormallyOpen>:

void Relay_voidNormallyOpen(void)
{
    1b06:	df 93       	push	r29
    1b08:	cf 93       	push	r28
    1b0a:	cd b7       	in	r28, 0x3d	; 61
    1b0c:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(RELAY_PORT, RELAY_PIN, DIO_PIN_HIGH);
    1b0e:	80 e0       	ldi	r24, 0x00	; 0
    1b10:	60 e0       	ldi	r22, 0x00	; 0
    1b12:	41 e0       	ldi	r20, 0x01	; 1
    1b14:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <DIO_u8SetPinValue>
}
    1b18:	cf 91       	pop	r28
    1b1a:	df 91       	pop	r29
    1b1c:	08 95       	ret

00001b1e <OptoCoupler_voidIntialization>:
#include "OptoCoupler_private.h"
#include "OptoCoupler_config.h"


void OptoCoupler_voidIntialization(void)
{
    1b1e:	df 93       	push	r29
    1b20:	cf 93       	push	r28
    1b22:	cd b7       	in	r28, 0x3d	; 61
    1b24:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDirection(OPTOCOUPLER_ANODE_PORT, OPTOCOUPLER_ANODE_PIN, DIO_PIN_OUTPUT);
    1b26:	80 e0       	ldi	r24, 0x00	; 0
    1b28:	60 e0       	ldi	r22, 0x00	; 0
    1b2a:	41 e0       	ldi	r20, 0x01	; 1
    1b2c:	0e 94 c7 08 	call	0x118e	; 0x118e <DIO_u8SetPinDirection>
}
    1b30:	cf 91       	pop	r28
    1b32:	df 91       	pop	r29
    1b34:	08 95       	ret

00001b36 <OptoCoupler_voidOnMode>:

void OptoCoupler_voidOnMode(void)
{
    1b36:	df 93       	push	r29
    1b38:	cf 93       	push	r28
    1b3a:	cd b7       	in	r28, 0x3d	; 61
    1b3c:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(OPTOCOUPLER_ANODE_PORT, OPTOCOUPLER_ANODE_PIN, DIO_PIN_HIGH);
    1b3e:	80 e0       	ldi	r24, 0x00	; 0
    1b40:	60 e0       	ldi	r22, 0x00	; 0
    1b42:	41 e0       	ldi	r20, 0x01	; 1
    1b44:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <DIO_u8SetPinValue>
}
    1b48:	cf 91       	pop	r28
    1b4a:	df 91       	pop	r29
    1b4c:	08 95       	ret

00001b4e <OptoCoupler_voidOffMode>:

void OptoCoupler_voidOffMode(void)
{
    1b4e:	df 93       	push	r29
    1b50:	cf 93       	push	r28
    1b52:	cd b7       	in	r28, 0x3d	; 61
    1b54:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(OPTOCOUPLER_ANODE_PORT, OPTOCOUPLER_ANODE_PIN, DIO_PIN_LOW);
    1b56:	80 e0       	ldi	r24, 0x00	; 0
    1b58:	60 e0       	ldi	r22, 0x00	; 0
    1b5a:	40 e0       	ldi	r20, 0x00	; 0
    1b5c:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <DIO_u8SetPinValue>
}
    1b60:	cf 91       	pop	r28
    1b62:	df 91       	pop	r29
    1b64:	08 95       	ret

00001b66 <MOTOR_voidInitialize>:
#include "MOTOR_interface.h"
#include "MOTOR_private.h"
#include "MOTOR_config.h"

void MOTOR_voidInitialize(void)
{
    1b66:	df 93       	push	r29
    1b68:	cf 93       	push	r28
    1b6a:	cd b7       	in	r28, 0x3d	; 61
    1b6c:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDirection(MOTOR_PORT, MOTOR_CCW_PIN, DIO_PIN_OUTPUT);
    1b6e:	80 e0       	ldi	r24, 0x00	; 0
    1b70:	60 e0       	ldi	r22, 0x00	; 0
    1b72:	41 e0       	ldi	r20, 0x01	; 1
    1b74:	0e 94 c7 08 	call	0x118e	; 0x118e <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(MOTOR_PORT, MOTOR_CW_PIN, DIO_PIN_OUTPUT);
    1b78:	80 e0       	ldi	r24, 0x00	; 0
    1b7a:	61 e0       	ldi	r22, 0x01	; 1
    1b7c:	41 e0       	ldi	r20, 0x01	; 1
    1b7e:	0e 94 c7 08 	call	0x118e	; 0x118e <DIO_u8SetPinDirection>
}
    1b82:	cf 91       	pop	r28
    1b84:	df 91       	pop	r29
    1b86:	08 95       	ret

00001b88 <MOTOR_voidCounterClockWise>:

void MOTOR_voidCounterClockWise(void)
{
    1b88:	df 93       	push	r29
    1b8a:	cf 93       	push	r28
    1b8c:	cd b7       	in	r28, 0x3d	; 61
    1b8e:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(MOTOR_PORT, MOTOR_CW_PIN, DIO_PIN_LOW);
    1b90:	80 e0       	ldi	r24, 0x00	; 0
    1b92:	61 e0       	ldi	r22, 0x01	; 1
    1b94:	40 e0       	ldi	r20, 0x00	; 0
    1b96:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(MOTOR_PORT, MOTOR_CCW_PIN, DIO_PIN_HIGH);
    1b9a:	80 e0       	ldi	r24, 0x00	; 0
    1b9c:	60 e0       	ldi	r22, 0x00	; 0
    1b9e:	41 e0       	ldi	r20, 0x01	; 1
    1ba0:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <DIO_u8SetPinValue>
}
    1ba4:	cf 91       	pop	r28
    1ba6:	df 91       	pop	r29
    1ba8:	08 95       	ret

00001baa <MOTOR_voidClockWise>:
void MOTOR_voidClockWise(void)
{
    1baa:	df 93       	push	r29
    1bac:	cf 93       	push	r28
    1bae:	cd b7       	in	r28, 0x3d	; 61
    1bb0:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(MOTOR_PORT, MOTOR_CCW_PIN, DIO_PIN_LOW);
    1bb2:	80 e0       	ldi	r24, 0x00	; 0
    1bb4:	60 e0       	ldi	r22, 0x00	; 0
    1bb6:	40 e0       	ldi	r20, 0x00	; 0
    1bb8:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(MOTOR_PORT, MOTOR_CW_PIN, DIO_PIN_HIGH);
    1bbc:	80 e0       	ldi	r24, 0x00	; 0
    1bbe:	61 e0       	ldi	r22, 0x01	; 1
    1bc0:	41 e0       	ldi	r20, 0x01	; 1
    1bc2:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <DIO_u8SetPinValue>
}
    1bc6:	cf 91       	pop	r28
    1bc8:	df 91       	pop	r29
    1bca:	08 95       	ret

00001bcc <MOTOR_voidStop>:
void MOTOR_voidStop(void)
{
    1bcc:	df 93       	push	r29
    1bce:	cf 93       	push	r28
    1bd0:	cd b7       	in	r28, 0x3d	; 61
    1bd2:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(MOTOR_PORT, MOTOR_CCW_PIN, DIO_PIN_LOW);
    1bd4:	80 e0       	ldi	r24, 0x00	; 0
    1bd6:	60 e0       	ldi	r22, 0x00	; 0
    1bd8:	40 e0       	ldi	r20, 0x00	; 0
    1bda:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(MOTOR_PORT, MOTOR_CW_PIN, DIO_PIN_LOW);
    1bde:	80 e0       	ldi	r24, 0x00	; 0
    1be0:	61 e0       	ldi	r22, 0x01	; 1
    1be2:	40 e0       	ldi	r20, 0x00	; 0
    1be4:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <DIO_u8SetPinValue>
}
    1be8:	cf 91       	pop	r28
    1bea:	df 91       	pop	r29
    1bec:	08 95       	ret

00001bee <LED_u8TurnOn>:
#include "LED_private.h"
#include "LED_config.h"


void LED_u8TurnOn(LED_t *Copy_LED_tElements)
{
    1bee:	df 93       	push	r29
    1bf0:	cf 93       	push	r28
    1bf2:	00 d0       	rcall	.+0      	; 0x1bf4 <LED_u8TurnOn+0x6>
    1bf4:	cd b7       	in	r28, 0x3d	; 61
    1bf6:	de b7       	in	r29, 0x3e	; 62
    1bf8:	9a 83       	std	Y+2, r25	; 0x02
    1bfa:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_LED_tElements->u8ConnectionType == SOURCE)
    1bfc:	e9 81       	ldd	r30, Y+1	; 0x01
    1bfe:	fa 81       	ldd	r31, Y+2	; 0x02
    1c00:	82 81       	ldd	r24, Z+2	; 0x02
    1c02:	88 23       	and	r24, r24
    1c04:	a9 f4       	brne	.+42     	; 0x1c30 <LED_u8TurnOn+0x42>
	{
		DIO_u8SetPinDirection(Copy_LED_tElements->u8Port, Copy_LED_tElements->u8Pin, DIO_PIN_OUTPUT);
    1c06:	e9 81       	ldd	r30, Y+1	; 0x01
    1c08:	fa 81       	ldd	r31, Y+2	; 0x02
    1c0a:	80 81       	ld	r24, Z
    1c0c:	e9 81       	ldd	r30, Y+1	; 0x01
    1c0e:	fa 81       	ldd	r31, Y+2	; 0x02
    1c10:	91 81       	ldd	r25, Z+1	; 0x01
    1c12:	69 2f       	mov	r22, r25
    1c14:	41 e0       	ldi	r20, 0x01	; 1
    1c16:	0e 94 c7 08 	call	0x118e	; 0x118e <DIO_u8SetPinDirection>
		DIO_u8SetPinValue(Copy_LED_tElements->u8Port, Copy_LED_tElements->u8Pin, DIO_PIN_HIGH);
    1c1a:	e9 81       	ldd	r30, Y+1	; 0x01
    1c1c:	fa 81       	ldd	r31, Y+2	; 0x02
    1c1e:	80 81       	ld	r24, Z
    1c20:	e9 81       	ldd	r30, Y+1	; 0x01
    1c22:	fa 81       	ldd	r31, Y+2	; 0x02
    1c24:	91 81       	ldd	r25, Z+1	; 0x01
    1c26:	69 2f       	mov	r22, r25
    1c28:	41 e0       	ldi	r20, 0x01	; 1
    1c2a:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <DIO_u8SetPinValue>
    1c2e:	19 c0       	rjmp	.+50     	; 0x1c62 <LED_u8TurnOn+0x74>
	}
	else if(Copy_LED_tElements->u8ConnectionType == SINK)
    1c30:	e9 81       	ldd	r30, Y+1	; 0x01
    1c32:	fa 81       	ldd	r31, Y+2	; 0x02
    1c34:	82 81       	ldd	r24, Z+2	; 0x02
    1c36:	81 30       	cpi	r24, 0x01	; 1
    1c38:	a1 f4       	brne	.+40     	; 0x1c62 <LED_u8TurnOn+0x74>
	{
		DIO_u8SetPinDirection(Copy_LED_tElements->u8Port, Copy_LED_tElements->u8Pin, DIO_PIN_OUTPUT);
    1c3a:	e9 81       	ldd	r30, Y+1	; 0x01
    1c3c:	fa 81       	ldd	r31, Y+2	; 0x02
    1c3e:	80 81       	ld	r24, Z
    1c40:	e9 81       	ldd	r30, Y+1	; 0x01
    1c42:	fa 81       	ldd	r31, Y+2	; 0x02
    1c44:	91 81       	ldd	r25, Z+1	; 0x01
    1c46:	69 2f       	mov	r22, r25
    1c48:	41 e0       	ldi	r20, 0x01	; 1
    1c4a:	0e 94 c7 08 	call	0x118e	; 0x118e <DIO_u8SetPinDirection>
		DIO_u8SetPinValue(Copy_LED_tElements->u8Port, Copy_LED_tElements->u8Pin, DIO_PIN_LOW);
    1c4e:	e9 81       	ldd	r30, Y+1	; 0x01
    1c50:	fa 81       	ldd	r31, Y+2	; 0x02
    1c52:	80 81       	ld	r24, Z
    1c54:	e9 81       	ldd	r30, Y+1	; 0x01
    1c56:	fa 81       	ldd	r31, Y+2	; 0x02
    1c58:	91 81       	ldd	r25, Z+1	; 0x01
    1c5a:	69 2f       	mov	r22, r25
    1c5c:	40 e0       	ldi	r20, 0x00	; 0
    1c5e:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <DIO_u8SetPinValue>
	}
	else
	{
		return;
	}
}
    1c62:	0f 90       	pop	r0
    1c64:	0f 90       	pop	r0
    1c66:	cf 91       	pop	r28
    1c68:	df 91       	pop	r29
    1c6a:	08 95       	ret

00001c6c <LED_u8TurnOff>:

void LED_u8TurnOff(LED_t *Copy_LED_tElements)
{
    1c6c:	df 93       	push	r29
    1c6e:	cf 93       	push	r28
    1c70:	00 d0       	rcall	.+0      	; 0x1c72 <LED_u8TurnOff+0x6>
    1c72:	cd b7       	in	r28, 0x3d	; 61
    1c74:	de b7       	in	r29, 0x3e	; 62
    1c76:	9a 83       	std	Y+2, r25	; 0x02
    1c78:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_LED_tElements->u8ConnectionType == SOURCE)
    1c7a:	e9 81       	ldd	r30, Y+1	; 0x01
    1c7c:	fa 81       	ldd	r31, Y+2	; 0x02
    1c7e:	82 81       	ldd	r24, Z+2	; 0x02
    1c80:	88 23       	and	r24, r24
    1c82:	a9 f4       	brne	.+42     	; 0x1cae <LED_u8TurnOff+0x42>
	{
		DIO_u8SetPinDirection(Copy_LED_tElements->u8Port, Copy_LED_tElements->u8Pin, DIO_PIN_OUTPUT);
    1c84:	e9 81       	ldd	r30, Y+1	; 0x01
    1c86:	fa 81       	ldd	r31, Y+2	; 0x02
    1c88:	80 81       	ld	r24, Z
    1c8a:	e9 81       	ldd	r30, Y+1	; 0x01
    1c8c:	fa 81       	ldd	r31, Y+2	; 0x02
    1c8e:	91 81       	ldd	r25, Z+1	; 0x01
    1c90:	69 2f       	mov	r22, r25
    1c92:	41 e0       	ldi	r20, 0x01	; 1
    1c94:	0e 94 c7 08 	call	0x118e	; 0x118e <DIO_u8SetPinDirection>
		DIO_u8SetPinValue(Copy_LED_tElements->u8Port, Copy_LED_tElements->u8Pin, DIO_PIN_LOW);
    1c98:	e9 81       	ldd	r30, Y+1	; 0x01
    1c9a:	fa 81       	ldd	r31, Y+2	; 0x02
    1c9c:	80 81       	ld	r24, Z
    1c9e:	e9 81       	ldd	r30, Y+1	; 0x01
    1ca0:	fa 81       	ldd	r31, Y+2	; 0x02
    1ca2:	91 81       	ldd	r25, Z+1	; 0x01
    1ca4:	69 2f       	mov	r22, r25
    1ca6:	40 e0       	ldi	r20, 0x00	; 0
    1ca8:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <DIO_u8SetPinValue>
    1cac:	19 c0       	rjmp	.+50     	; 0x1ce0 <LED_u8TurnOff+0x74>
	}
	else if(Copy_LED_tElements->u8ConnectionType == SINK)
    1cae:	e9 81       	ldd	r30, Y+1	; 0x01
    1cb0:	fa 81       	ldd	r31, Y+2	; 0x02
    1cb2:	82 81       	ldd	r24, Z+2	; 0x02
    1cb4:	81 30       	cpi	r24, 0x01	; 1
    1cb6:	a1 f4       	brne	.+40     	; 0x1ce0 <LED_u8TurnOff+0x74>
	{
		DIO_u8SetPinDirection(Copy_LED_tElements->u8Port, Copy_LED_tElements->u8Pin, DIO_PIN_OUTPUT);
    1cb8:	e9 81       	ldd	r30, Y+1	; 0x01
    1cba:	fa 81       	ldd	r31, Y+2	; 0x02
    1cbc:	80 81       	ld	r24, Z
    1cbe:	e9 81       	ldd	r30, Y+1	; 0x01
    1cc0:	fa 81       	ldd	r31, Y+2	; 0x02
    1cc2:	91 81       	ldd	r25, Z+1	; 0x01
    1cc4:	69 2f       	mov	r22, r25
    1cc6:	41 e0       	ldi	r20, 0x01	; 1
    1cc8:	0e 94 c7 08 	call	0x118e	; 0x118e <DIO_u8SetPinDirection>
		DIO_u8SetPinValue(Copy_LED_tElements->u8Port, Copy_LED_tElements->u8Pin, DIO_PIN_HIGH);
    1ccc:	e9 81       	ldd	r30, Y+1	; 0x01
    1cce:	fa 81       	ldd	r31, Y+2	; 0x02
    1cd0:	80 81       	ld	r24, Z
    1cd2:	e9 81       	ldd	r30, Y+1	; 0x01
    1cd4:	fa 81       	ldd	r31, Y+2	; 0x02
    1cd6:	91 81       	ldd	r25, Z+1	; 0x01
    1cd8:	69 2f       	mov	r22, r25
    1cda:	41 e0       	ldi	r20, 0x01	; 1
    1cdc:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <DIO_u8SetPinValue>
	}
	else
	{
		return;
	}
}
    1ce0:	0f 90       	pop	r0
    1ce2:	0f 90       	pop	r0
    1ce4:	cf 91       	pop	r28
    1ce6:	df 91       	pop	r29
    1ce8:	08 95       	ret

00001cea <LCD_voidSendCommand>:
#include "LCD_private.h"
#include "LCD_config.h"


void LCD_voidSendCommand(u8 Copy_u8Command)
{
    1cea:	df 93       	push	r29
    1cec:	cf 93       	push	r28
    1cee:	cd b7       	in	r28, 0x3d	; 61
    1cf0:	de b7       	in	r29, 0x3e	; 62
    1cf2:	2f 97       	sbiw	r28, 0x0f	; 15
    1cf4:	0f b6       	in	r0, 0x3f	; 63
    1cf6:	f8 94       	cli
    1cf8:	de bf       	out	0x3e, r29	; 62
    1cfa:	0f be       	out	0x3f, r0	; 63
    1cfc:	cd bf       	out	0x3d, r28	; 61
    1cfe:	8f 87       	std	Y+15, r24	; 0x0f
	/*Set the RS pin to be LOW: 0 command*/
	DIO_u8SetPinValue(LCD_CRTL_PORT, LCD_RS_PIN, DIO_PIN_LOW);
    1d00:	83 e0       	ldi	r24, 0x03	; 3
    1d02:	67 e0       	ldi	r22, 0x07	; 7
    1d04:	40 e0       	ldi	r20, 0x00	; 0
    1d06:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <DIO_u8SetPinValue>
	/*Set the RW pin to be LOW: 0 write*/
	DIO_u8SetPinValue(LCD_CRTL_PORT, LCD_RW_PIN, DIO_PIN_LOW);
    1d0a:	83 e0       	ldi	r24, 0x03	; 3
    1d0c:	66 e0       	ldi	r22, 0x06	; 6
    1d0e:	40 e0       	ldi	r20, 0x00	; 0
    1d10:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <DIO_u8SetPinValue>

#if 	LCD_MODE == LCD_EIGHT_BIT

	/*Set the Port value to be the command*/
	DIO_u8SetPortValue(LCD_DATA_PORT, Copy_u8Command);
    1d14:	82 e0       	ldi	r24, 0x02	; 2
    1d16:	6f 85       	ldd	r22, Y+15	; 0x0f
    1d18:	0e 94 25 08 	call	0x104a	; 0x104a <DIO_u8SetPortValue>

	DIO_u8SetPortValue(LCD_DATA_PORT, ((Copy_u8Command<<4) & 0xf0));
#endif

	/*Set the EN pin to be HIGH: 1 to read , waiting for 2ms and then make it LOW again: 0*/
	DIO_u8SetPinValue(LCD_CRTL_PORT, LCD_EN_PIN, DIO_PIN_HIGH);
    1d1c:	83 e0       	ldi	r24, 0x03	; 3
    1d1e:	65 e0       	ldi	r22, 0x05	; 5
    1d20:	41 e0       	ldi	r20, 0x01	; 1
    1d22:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <DIO_u8SetPinValue>
    1d26:	80 e0       	ldi	r24, 0x00	; 0
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	a0 e0       	ldi	r26, 0x00	; 0
    1d2c:	b0 e4       	ldi	r27, 0x40	; 64
    1d2e:	8b 87       	std	Y+11, r24	; 0x0b
    1d30:	9c 87       	std	Y+12, r25	; 0x0c
    1d32:	ad 87       	std	Y+13, r26	; 0x0d
    1d34:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d36:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d38:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d3e:	20 e0       	ldi	r18, 0x00	; 0
    1d40:	30 e0       	ldi	r19, 0x00	; 0
    1d42:	4a ef       	ldi	r20, 0xFA	; 250
    1d44:	54 e4       	ldi	r21, 0x44	; 68
    1d46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d4a:	dc 01       	movw	r26, r24
    1d4c:	cb 01       	movw	r24, r22
    1d4e:	8f 83       	std	Y+7, r24	; 0x07
    1d50:	98 87       	std	Y+8, r25	; 0x08
    1d52:	a9 87       	std	Y+9, r26	; 0x09
    1d54:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d56:	6f 81       	ldd	r22, Y+7	; 0x07
    1d58:	78 85       	ldd	r23, Y+8	; 0x08
    1d5a:	89 85       	ldd	r24, Y+9	; 0x09
    1d5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d5e:	20 e0       	ldi	r18, 0x00	; 0
    1d60:	30 e0       	ldi	r19, 0x00	; 0
    1d62:	40 e8       	ldi	r20, 0x80	; 128
    1d64:	5f e3       	ldi	r21, 0x3F	; 63
    1d66:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d6a:	88 23       	and	r24, r24
    1d6c:	2c f4       	brge	.+10     	; 0x1d78 <LCD_voidSendCommand+0x8e>
		__ticks = 1;
    1d6e:	81 e0       	ldi	r24, 0x01	; 1
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	9e 83       	std	Y+6, r25	; 0x06
    1d74:	8d 83       	std	Y+5, r24	; 0x05
    1d76:	3f c0       	rjmp	.+126    	; 0x1df6 <LCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    1d78:	6f 81       	ldd	r22, Y+7	; 0x07
    1d7a:	78 85       	ldd	r23, Y+8	; 0x08
    1d7c:	89 85       	ldd	r24, Y+9	; 0x09
    1d7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d80:	20 e0       	ldi	r18, 0x00	; 0
    1d82:	3f ef       	ldi	r19, 0xFF	; 255
    1d84:	4f e7       	ldi	r20, 0x7F	; 127
    1d86:	57 e4       	ldi	r21, 0x47	; 71
    1d88:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d8c:	18 16       	cp	r1, r24
    1d8e:	4c f5       	brge	.+82     	; 0x1de2 <LCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d90:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d92:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d94:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d96:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d98:	20 e0       	ldi	r18, 0x00	; 0
    1d9a:	30 e0       	ldi	r19, 0x00	; 0
    1d9c:	40 e2       	ldi	r20, 0x20	; 32
    1d9e:	51 e4       	ldi	r21, 0x41	; 65
    1da0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1da4:	dc 01       	movw	r26, r24
    1da6:	cb 01       	movw	r24, r22
    1da8:	bc 01       	movw	r22, r24
    1daa:	cd 01       	movw	r24, r26
    1dac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1db0:	dc 01       	movw	r26, r24
    1db2:	cb 01       	movw	r24, r22
    1db4:	9e 83       	std	Y+6, r25	; 0x06
    1db6:	8d 83       	std	Y+5, r24	; 0x05
    1db8:	0f c0       	rjmp	.+30     	; 0x1dd8 <LCD_voidSendCommand+0xee>
    1dba:	88 ec       	ldi	r24, 0xC8	; 200
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	9c 83       	std	Y+4, r25	; 0x04
    1dc0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1dc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc4:	9c 81       	ldd	r25, Y+4	; 0x04
    1dc6:	01 97       	sbiw	r24, 0x01	; 1
    1dc8:	f1 f7       	brne	.-4      	; 0x1dc6 <LCD_voidSendCommand+0xdc>
    1dca:	9c 83       	std	Y+4, r25	; 0x04
    1dcc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dce:	8d 81       	ldd	r24, Y+5	; 0x05
    1dd0:	9e 81       	ldd	r25, Y+6	; 0x06
    1dd2:	01 97       	sbiw	r24, 0x01	; 1
    1dd4:	9e 83       	std	Y+6, r25	; 0x06
    1dd6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dd8:	8d 81       	ldd	r24, Y+5	; 0x05
    1dda:	9e 81       	ldd	r25, Y+6	; 0x06
    1ddc:	00 97       	sbiw	r24, 0x00	; 0
    1dde:	69 f7       	brne	.-38     	; 0x1dba <LCD_voidSendCommand+0xd0>
    1de0:	14 c0       	rjmp	.+40     	; 0x1e0a <LCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1de2:	6f 81       	ldd	r22, Y+7	; 0x07
    1de4:	78 85       	ldd	r23, Y+8	; 0x08
    1de6:	89 85       	ldd	r24, Y+9	; 0x09
    1de8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dee:	dc 01       	movw	r26, r24
    1df0:	cb 01       	movw	r24, r22
    1df2:	9e 83       	std	Y+6, r25	; 0x06
    1df4:	8d 83       	std	Y+5, r24	; 0x05
    1df6:	8d 81       	ldd	r24, Y+5	; 0x05
    1df8:	9e 81       	ldd	r25, Y+6	; 0x06
    1dfa:	9a 83       	std	Y+2, r25	; 0x02
    1dfc:	89 83       	std	Y+1, r24	; 0x01
    1dfe:	89 81       	ldd	r24, Y+1	; 0x01
    1e00:	9a 81       	ldd	r25, Y+2	; 0x02
    1e02:	01 97       	sbiw	r24, 0x01	; 1
    1e04:	f1 f7       	brne	.-4      	; 0x1e02 <LCD_voidSendCommand+0x118>
    1e06:	9a 83       	std	Y+2, r25	; 0x02
    1e08:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(LCD_CRTL_PORT, LCD_EN_PIN, DIO_PIN_LOW);
    1e0a:	83 e0       	ldi	r24, 0x03	; 3
    1e0c:	65 e0       	ldi	r22, 0x05	; 5
    1e0e:	40 e0       	ldi	r20, 0x00	; 0
    1e10:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <DIO_u8SetPinValue>
}
    1e14:	2f 96       	adiw	r28, 0x0f	; 15
    1e16:	0f b6       	in	r0, 0x3f	; 63
    1e18:	f8 94       	cli
    1e1a:	de bf       	out	0x3e, r29	; 62
    1e1c:	0f be       	out	0x3f, r0	; 63
    1e1e:	cd bf       	out	0x3d, r28	; 61
    1e20:	cf 91       	pop	r28
    1e22:	df 91       	pop	r29
    1e24:	08 95       	ret

00001e26 <LCD_voidSendData>:


void LCD_voidSendData(u8 Copy_u8Data)
{
    1e26:	df 93       	push	r29
    1e28:	cf 93       	push	r28
    1e2a:	cd b7       	in	r28, 0x3d	; 61
    1e2c:	de b7       	in	r29, 0x3e	; 62
    1e2e:	2f 97       	sbiw	r28, 0x0f	; 15
    1e30:	0f b6       	in	r0, 0x3f	; 63
    1e32:	f8 94       	cli
    1e34:	de bf       	out	0x3e, r29	; 62
    1e36:	0f be       	out	0x3f, r0	; 63
    1e38:	cd bf       	out	0x3d, r28	; 61
    1e3a:	8f 87       	std	Y+15, r24	; 0x0f
	/*Set the RS pin to be HIGH: 1 command*/
	DIO_u8SetPinValue(LCD_CRTL_PORT, LCD_RS_PIN, DIO_PIN_HIGH);
    1e3c:	83 e0       	ldi	r24, 0x03	; 3
    1e3e:	67 e0       	ldi	r22, 0x07	; 7
    1e40:	41 e0       	ldi	r20, 0x01	; 1
    1e42:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <DIO_u8SetPinValue>
	/*Set the RW pin to be LOW: 0 write*/
	DIO_u8SetPinValue(LCD_CRTL_PORT, LCD_RW_PIN, DIO_PIN_LOW);
    1e46:	83 e0       	ldi	r24, 0x03	; 3
    1e48:	66 e0       	ldi	r22, 0x06	; 6
    1e4a:	40 e0       	ldi	r20, 0x00	; 0
    1e4c:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <DIO_u8SetPinValue>

#if 	LCD_MODE == LCD_EIGHT_BIT

	/*Set the Port value to be the data*/
	DIO_u8SetPortValue(LCD_DATA_PORT, Copy_u8Data);
    1e50:	82 e0       	ldi	r24, 0x02	; 2
    1e52:	6f 85       	ldd	r22, Y+15	; 0x0f
    1e54:	0e 94 25 08 	call	0x104a	; 0x104a <DIO_u8SetPortValue>
	DIO_u8SetPortValue(LCD_DATA_PORT, ((Copy_u8Data<<4) & 0xf0));

#endif

	/*Set the EN pin to be HIGH: 1 to read , waiting for 2ms and then make it LOW again: 0*/
	DIO_u8SetPinValue(LCD_CRTL_PORT, LCD_EN_PIN, DIO_PIN_HIGH);
    1e58:	83 e0       	ldi	r24, 0x03	; 3
    1e5a:	65 e0       	ldi	r22, 0x05	; 5
    1e5c:	41 e0       	ldi	r20, 0x01	; 1
    1e5e:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <DIO_u8SetPinValue>
    1e62:	80 e0       	ldi	r24, 0x00	; 0
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	a0 e0       	ldi	r26, 0x00	; 0
    1e68:	b0 e4       	ldi	r27, 0x40	; 64
    1e6a:	8b 87       	std	Y+11, r24	; 0x0b
    1e6c:	9c 87       	std	Y+12, r25	; 0x0c
    1e6e:	ad 87       	std	Y+13, r26	; 0x0d
    1e70:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e72:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e74:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e76:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e78:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e7a:	20 e0       	ldi	r18, 0x00	; 0
    1e7c:	30 e0       	ldi	r19, 0x00	; 0
    1e7e:	4a ef       	ldi	r20, 0xFA	; 250
    1e80:	54 e4       	ldi	r21, 0x44	; 68
    1e82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e86:	dc 01       	movw	r26, r24
    1e88:	cb 01       	movw	r24, r22
    1e8a:	8f 83       	std	Y+7, r24	; 0x07
    1e8c:	98 87       	std	Y+8, r25	; 0x08
    1e8e:	a9 87       	std	Y+9, r26	; 0x09
    1e90:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e92:	6f 81       	ldd	r22, Y+7	; 0x07
    1e94:	78 85       	ldd	r23, Y+8	; 0x08
    1e96:	89 85       	ldd	r24, Y+9	; 0x09
    1e98:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e9a:	20 e0       	ldi	r18, 0x00	; 0
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	40 e8       	ldi	r20, 0x80	; 128
    1ea0:	5f e3       	ldi	r21, 0x3F	; 63
    1ea2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ea6:	88 23       	and	r24, r24
    1ea8:	2c f4       	brge	.+10     	; 0x1eb4 <LCD_voidSendData+0x8e>
		__ticks = 1;
    1eaa:	81 e0       	ldi	r24, 0x01	; 1
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	9e 83       	std	Y+6, r25	; 0x06
    1eb0:	8d 83       	std	Y+5, r24	; 0x05
    1eb2:	3f c0       	rjmp	.+126    	; 0x1f32 <LCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    1eb4:	6f 81       	ldd	r22, Y+7	; 0x07
    1eb6:	78 85       	ldd	r23, Y+8	; 0x08
    1eb8:	89 85       	ldd	r24, Y+9	; 0x09
    1eba:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ebc:	20 e0       	ldi	r18, 0x00	; 0
    1ebe:	3f ef       	ldi	r19, 0xFF	; 255
    1ec0:	4f e7       	ldi	r20, 0x7F	; 127
    1ec2:	57 e4       	ldi	r21, 0x47	; 71
    1ec4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ec8:	18 16       	cp	r1, r24
    1eca:	4c f5       	brge	.+82     	; 0x1f1e <LCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ecc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ece:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ed0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ed2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ed4:	20 e0       	ldi	r18, 0x00	; 0
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	40 e2       	ldi	r20, 0x20	; 32
    1eda:	51 e4       	ldi	r21, 0x41	; 65
    1edc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ee0:	dc 01       	movw	r26, r24
    1ee2:	cb 01       	movw	r24, r22
    1ee4:	bc 01       	movw	r22, r24
    1ee6:	cd 01       	movw	r24, r26
    1ee8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eec:	dc 01       	movw	r26, r24
    1eee:	cb 01       	movw	r24, r22
    1ef0:	9e 83       	std	Y+6, r25	; 0x06
    1ef2:	8d 83       	std	Y+5, r24	; 0x05
    1ef4:	0f c0       	rjmp	.+30     	; 0x1f14 <LCD_voidSendData+0xee>
    1ef6:	88 ec       	ldi	r24, 0xC8	; 200
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	9c 83       	std	Y+4, r25	; 0x04
    1efc:	8b 83       	std	Y+3, r24	; 0x03
    1efe:	8b 81       	ldd	r24, Y+3	; 0x03
    1f00:	9c 81       	ldd	r25, Y+4	; 0x04
    1f02:	01 97       	sbiw	r24, 0x01	; 1
    1f04:	f1 f7       	brne	.-4      	; 0x1f02 <LCD_voidSendData+0xdc>
    1f06:	9c 83       	std	Y+4, r25	; 0x04
    1f08:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f0c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f0e:	01 97       	sbiw	r24, 0x01	; 1
    1f10:	9e 83       	std	Y+6, r25	; 0x06
    1f12:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f14:	8d 81       	ldd	r24, Y+5	; 0x05
    1f16:	9e 81       	ldd	r25, Y+6	; 0x06
    1f18:	00 97       	sbiw	r24, 0x00	; 0
    1f1a:	69 f7       	brne	.-38     	; 0x1ef6 <LCD_voidSendData+0xd0>
    1f1c:	14 c0       	rjmp	.+40     	; 0x1f46 <LCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f1e:	6f 81       	ldd	r22, Y+7	; 0x07
    1f20:	78 85       	ldd	r23, Y+8	; 0x08
    1f22:	89 85       	ldd	r24, Y+9	; 0x09
    1f24:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f2a:	dc 01       	movw	r26, r24
    1f2c:	cb 01       	movw	r24, r22
    1f2e:	9e 83       	std	Y+6, r25	; 0x06
    1f30:	8d 83       	std	Y+5, r24	; 0x05
    1f32:	8d 81       	ldd	r24, Y+5	; 0x05
    1f34:	9e 81       	ldd	r25, Y+6	; 0x06
    1f36:	9a 83       	std	Y+2, r25	; 0x02
    1f38:	89 83       	std	Y+1, r24	; 0x01
    1f3a:	89 81       	ldd	r24, Y+1	; 0x01
    1f3c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f3e:	01 97       	sbiw	r24, 0x01	; 1
    1f40:	f1 f7       	brne	.-4      	; 0x1f3e <LCD_voidSendData+0x118>
    1f42:	9a 83       	std	Y+2, r25	; 0x02
    1f44:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(LCD_CRTL_PORT, LCD_EN_PIN, DIO_PIN_LOW);
    1f46:	83 e0       	ldi	r24, 0x03	; 3
    1f48:	65 e0       	ldi	r22, 0x05	; 5
    1f4a:	40 e0       	ldi	r20, 0x00	; 0
    1f4c:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <DIO_u8SetPinValue>
}
    1f50:	2f 96       	adiw	r28, 0x0f	; 15
    1f52:	0f b6       	in	r0, 0x3f	; 63
    1f54:	f8 94       	cli
    1f56:	de bf       	out	0x3e, r29	; 62
    1f58:	0f be       	out	0x3f, r0	; 63
    1f5a:	cd bf       	out	0x3d, r28	; 61
    1f5c:	cf 91       	pop	r28
    1f5e:	df 91       	pop	r29
    1f60:	08 95       	ret

00001f62 <LCD_voidInitialize>:

void LCD_voidInitialize(void)
{
    1f62:	df 93       	push	r29
    1f64:	cf 93       	push	r28
    1f66:	cd b7       	in	r28, 0x3d	; 61
    1f68:	de b7       	in	r29, 0x3e	; 62
    1f6a:	2e 97       	sbiw	r28, 0x0e	; 14
    1f6c:	0f b6       	in	r0, 0x3f	; 63
    1f6e:	f8 94       	cli
    1f70:	de bf       	out	0x3e, r29	; 62
    1f72:	0f be       	out	0x3f, r0	; 63
    1f74:	cd bf       	out	0x3d, r28	; 61
	/*Set the control pins to be output*/
	DIO_u8SetPinDirection(LCD_CRTL_PORT, LCD_EN_PIN, DIO_PIN_OUTPUT);
    1f76:	83 e0       	ldi	r24, 0x03	; 3
    1f78:	65 e0       	ldi	r22, 0x05	; 5
    1f7a:	41 e0       	ldi	r20, 0x01	; 1
    1f7c:	0e 94 c7 08 	call	0x118e	; 0x118e <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(LCD_CRTL_PORT, LCD_RW_PIN, DIO_PIN_OUTPUT);
    1f80:	83 e0       	ldi	r24, 0x03	; 3
    1f82:	66 e0       	ldi	r22, 0x06	; 6
    1f84:	41 e0       	ldi	r20, 0x01	; 1
    1f86:	0e 94 c7 08 	call	0x118e	; 0x118e <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(LCD_CRTL_PORT, LCD_RS_PIN, DIO_PIN_OUTPUT);
    1f8a:	83 e0       	ldi	r24, 0x03	; 3
    1f8c:	67 e0       	ldi	r22, 0x07	; 7
    1f8e:	41 e0       	ldi	r20, 0x01	; 1
    1f90:	0e 94 c7 08 	call	0x118e	; 0x118e <DIO_u8SetPinDirection>
    1f94:	80 e0       	ldi	r24, 0x00	; 0
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	a0 e2       	ldi	r26, 0x20	; 32
    1f9a:	b2 e4       	ldi	r27, 0x42	; 66
    1f9c:	8b 87       	std	Y+11, r24	; 0x0b
    1f9e:	9c 87       	std	Y+12, r25	; 0x0c
    1fa0:	ad 87       	std	Y+13, r26	; 0x0d
    1fa2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fa4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fa6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fa8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1faa:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fac:	20 e0       	ldi	r18, 0x00	; 0
    1fae:	30 e0       	ldi	r19, 0x00	; 0
    1fb0:	4a ef       	ldi	r20, 0xFA	; 250
    1fb2:	54 e4       	ldi	r21, 0x44	; 68
    1fb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fb8:	dc 01       	movw	r26, r24
    1fba:	cb 01       	movw	r24, r22
    1fbc:	8f 83       	std	Y+7, r24	; 0x07
    1fbe:	98 87       	std	Y+8, r25	; 0x08
    1fc0:	a9 87       	std	Y+9, r26	; 0x09
    1fc2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fc4:	6f 81       	ldd	r22, Y+7	; 0x07
    1fc6:	78 85       	ldd	r23, Y+8	; 0x08
    1fc8:	89 85       	ldd	r24, Y+9	; 0x09
    1fca:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fcc:	20 e0       	ldi	r18, 0x00	; 0
    1fce:	30 e0       	ldi	r19, 0x00	; 0
    1fd0:	40 e8       	ldi	r20, 0x80	; 128
    1fd2:	5f e3       	ldi	r21, 0x3F	; 63
    1fd4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fd8:	88 23       	and	r24, r24
    1fda:	2c f4       	brge	.+10     	; 0x1fe6 <LCD_voidInitialize+0x84>
		__ticks = 1;
    1fdc:	81 e0       	ldi	r24, 0x01	; 1
    1fde:	90 e0       	ldi	r25, 0x00	; 0
    1fe0:	9e 83       	std	Y+6, r25	; 0x06
    1fe2:	8d 83       	std	Y+5, r24	; 0x05
    1fe4:	3f c0       	rjmp	.+126    	; 0x2064 <LCD_voidInitialize+0x102>
	else if (__tmp > 65535)
    1fe6:	6f 81       	ldd	r22, Y+7	; 0x07
    1fe8:	78 85       	ldd	r23, Y+8	; 0x08
    1fea:	89 85       	ldd	r24, Y+9	; 0x09
    1fec:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fee:	20 e0       	ldi	r18, 0x00	; 0
    1ff0:	3f ef       	ldi	r19, 0xFF	; 255
    1ff2:	4f e7       	ldi	r20, 0x7F	; 127
    1ff4:	57 e4       	ldi	r21, 0x47	; 71
    1ff6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ffa:	18 16       	cp	r1, r24
    1ffc:	4c f5       	brge	.+82     	; 0x2050 <LCD_voidInitialize+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ffe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2000:	7c 85       	ldd	r23, Y+12	; 0x0c
    2002:	8d 85       	ldd	r24, Y+13	; 0x0d
    2004:	9e 85       	ldd	r25, Y+14	; 0x0e
    2006:	20 e0       	ldi	r18, 0x00	; 0
    2008:	30 e0       	ldi	r19, 0x00	; 0
    200a:	40 e2       	ldi	r20, 0x20	; 32
    200c:	51 e4       	ldi	r21, 0x41	; 65
    200e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2012:	dc 01       	movw	r26, r24
    2014:	cb 01       	movw	r24, r22
    2016:	bc 01       	movw	r22, r24
    2018:	cd 01       	movw	r24, r26
    201a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    201e:	dc 01       	movw	r26, r24
    2020:	cb 01       	movw	r24, r22
    2022:	9e 83       	std	Y+6, r25	; 0x06
    2024:	8d 83       	std	Y+5, r24	; 0x05
    2026:	0f c0       	rjmp	.+30     	; 0x2046 <LCD_voidInitialize+0xe4>
    2028:	88 ec       	ldi	r24, 0xC8	; 200
    202a:	90 e0       	ldi	r25, 0x00	; 0
    202c:	9c 83       	std	Y+4, r25	; 0x04
    202e:	8b 83       	std	Y+3, r24	; 0x03
    2030:	8b 81       	ldd	r24, Y+3	; 0x03
    2032:	9c 81       	ldd	r25, Y+4	; 0x04
    2034:	01 97       	sbiw	r24, 0x01	; 1
    2036:	f1 f7       	brne	.-4      	; 0x2034 <LCD_voidInitialize+0xd2>
    2038:	9c 83       	std	Y+4, r25	; 0x04
    203a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    203c:	8d 81       	ldd	r24, Y+5	; 0x05
    203e:	9e 81       	ldd	r25, Y+6	; 0x06
    2040:	01 97       	sbiw	r24, 0x01	; 1
    2042:	9e 83       	std	Y+6, r25	; 0x06
    2044:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2046:	8d 81       	ldd	r24, Y+5	; 0x05
    2048:	9e 81       	ldd	r25, Y+6	; 0x06
    204a:	00 97       	sbiw	r24, 0x00	; 0
    204c:	69 f7       	brne	.-38     	; 0x2028 <LCD_voidInitialize+0xc6>
    204e:	14 c0       	rjmp	.+40     	; 0x2078 <LCD_voidInitialize+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2050:	6f 81       	ldd	r22, Y+7	; 0x07
    2052:	78 85       	ldd	r23, Y+8	; 0x08
    2054:	89 85       	ldd	r24, Y+9	; 0x09
    2056:	9a 85       	ldd	r25, Y+10	; 0x0a
    2058:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    205c:	dc 01       	movw	r26, r24
    205e:	cb 01       	movw	r24, r22
    2060:	9e 83       	std	Y+6, r25	; 0x06
    2062:	8d 83       	std	Y+5, r24	; 0x05
    2064:	8d 81       	ldd	r24, Y+5	; 0x05
    2066:	9e 81       	ldd	r25, Y+6	; 0x06
    2068:	9a 83       	std	Y+2, r25	; 0x02
    206a:	89 83       	std	Y+1, r24	; 0x01
    206c:	89 81       	ldd	r24, Y+1	; 0x01
    206e:	9a 81       	ldd	r25, Y+2	; 0x02
    2070:	01 97       	sbiw	r24, 0x01	; 1
    2072:	f1 f7       	brne	.-4      	; 0x2070 <LCD_voidInitialize+0x10e>
    2074:	9a 83       	std	Y+2, r25	; 0x02
    2076:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(40);

#if LCD_MODE == LCD_EIGHT_BIT

	/*Set the data port to be output*/
	DIO_u8SetPortDirection(LCD_DATA_PORT, DIO_PORT_OUTPUT);
    2078:	82 e0       	ldi	r24, 0x02	; 2
    207a:	6f ef       	ldi	r22, 0xFF	; 255
    207c:	0e 94 dd 07 	call	0xfba	; 0xfba <DIO_u8SetPortDirection>

	/*Send the function set command: N = 1 ->2 lines, F = 0 -> 5*8 font size*/
	LCD_voidSendCommand(0x38);
    2080:	88 e3       	ldi	r24, 0x38	; 56
    2082:	0e 94 75 0e 	call	0x1cea	; 0x1cea <LCD_voidSendCommand>

	/*Send the function set command: D = 1 -> DisplayOn, C = 0 -> CursorInvisible, B = 0 -> NoBlinking*/
	LCD_voidSendCommand(0x0C);
    2086:	8c e0       	ldi	r24, 0x0C	; 12
    2088:	0e 94 75 0e 	call	0x1cea	; 0x1cea <LCD_voidSendCommand>

	/*Send the display clear command*/
	LCD_voidSendCommand(0x01);
    208c:	81 e0       	ldi	r24, 0x01	; 1
    208e:	0e 94 75 0e 	call	0x1cea	; 0x1cea <LCD_voidSendCommand>
		LCD_voidSendCommand(0x0C);
	/*Send the display clear command*/
		LCD_voidSendCommand(0x01);

#endif
}
    2092:	2e 96       	adiw	r28, 0x0e	; 14
    2094:	0f b6       	in	r0, 0x3f	; 63
    2096:	f8 94       	cli
    2098:	de bf       	out	0x3e, r29	; 62
    209a:	0f be       	out	0x3f, r0	; 63
    209c:	cd bf       	out	0x3d, r28	; 61
    209e:	cf 91       	pop	r28
    20a0:	df 91       	pop	r29
    20a2:	08 95       	ret

000020a4 <LCD_voidGoToXY>:


void LCD_voidGoToXY(u8 Copy_u8XPostion, u8 Copy_u8YPostion)
{
    20a4:	df 93       	push	r29
    20a6:	cf 93       	push	r28
    20a8:	00 d0       	rcall	.+0      	; 0x20aa <LCD_voidGoToXY+0x6>
    20aa:	0f 92       	push	r0
    20ac:	cd b7       	in	r28, 0x3d	; 61
    20ae:	de b7       	in	r29, 0x3e	; 62
    20b0:	8a 83       	std	Y+2, r24	; 0x02
    20b2:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address = 0;
    20b4:	19 82       	std	Y+1, r1	; 0x01
	/* Check the number of row 0 or 1 */
	if (Copy_u8XPostion == LCD_ROW0)
    20b6:	8a 81       	ldd	r24, Y+2	; 0x02
    20b8:	88 23       	and	r24, r24
    20ba:	19 f4       	brne	.+6      	; 0x20c2 <LCD_voidGoToXY+0x1e>
	{
		Local_u8Address = Copy_u8YPostion;
    20bc:	8b 81       	ldd	r24, Y+3	; 0x03
    20be:	89 83       	std	Y+1, r24	; 0x01
    20c0:	06 c0       	rjmp	.+12     	; 0x20ce <LCD_voidGoToXY+0x2a>
	}
	else if (Copy_u8XPostion == LCD_ROW1)
    20c2:	8a 81       	ldd	r24, Y+2	; 0x02
    20c4:	81 30       	cpi	r24, 0x01	; 1
    20c6:	19 f4       	brne	.+6      	; 0x20ce <LCD_voidGoToXY+0x2a>
	{
		Local_u8Address = Copy_u8YPostion + DDRAM_OFFSET;
    20c8:	8b 81       	ldd	r24, Y+3	; 0x03
    20ca:	80 5c       	subi	r24, 0xC0	; 192
    20cc:	89 83       	std	Y+1, r24	; 0x01
	}

	SET_BIT(Local_u8Address, 7);
    20ce:	89 81       	ldd	r24, Y+1	; 0x01
    20d0:	80 68       	ori	r24, 0x80	; 128
    20d2:	89 83       	std	Y+1, r24	; 0x01

	LCD_voidSendCommand(Local_u8Address);
    20d4:	89 81       	ldd	r24, Y+1	; 0x01
    20d6:	0e 94 75 0e 	call	0x1cea	; 0x1cea <LCD_voidSendCommand>

}
    20da:	0f 90       	pop	r0
    20dc:	0f 90       	pop	r0
    20de:	0f 90       	pop	r0
    20e0:	cf 91       	pop	r28
    20e2:	df 91       	pop	r29
    20e4:	08 95       	ret

000020e6 <LCD_voidSendCustomCharacter>:


void LCD_voidSendCustomCharacter(u8 *Copy_pu8CharacterArray, u8 Copy_u8PatternNumber, u8 Copy_u8XPostion, u8 Copy_u8YPostion)
{
    20e6:	df 93       	push	r29
    20e8:	cf 93       	push	r28
    20ea:	cd b7       	in	r28, 0x3d	; 61
    20ec:	de b7       	in	r29, 0x3e	; 62
    20ee:	27 97       	sbiw	r28, 0x07	; 7
    20f0:	0f b6       	in	r0, 0x3f	; 63
    20f2:	f8 94       	cli
    20f4:	de bf       	out	0x3e, r29	; 62
    20f6:	0f be       	out	0x3f, r0	; 63
    20f8:	cd bf       	out	0x3d, r28	; 61
    20fa:	9c 83       	std	Y+4, r25	; 0x04
    20fc:	8b 83       	std	Y+3, r24	; 0x03
    20fe:	6d 83       	std	Y+5, r22	; 0x05
    2100:	4e 83       	std	Y+6, r20	; 0x06
    2102:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMAddress = 0, Local_u8LoopCounter;
    2104:	1a 82       	std	Y+2, r1	; 0x02
	/* Calculating CGRAMAddress */
	Local_u8CGRAMAddress = Copy_u8PatternNumber * 8;
    2106:	8d 81       	ldd	r24, Y+5	; 0x05
    2108:	88 2f       	mov	r24, r24
    210a:	90 e0       	ldi	r25, 0x00	; 0
    210c:	88 0f       	add	r24, r24
    210e:	99 1f       	adc	r25, r25
    2110:	88 0f       	add	r24, r24
    2112:	99 1f       	adc	r25, r25
    2114:	88 0f       	add	r24, r24
    2116:	99 1f       	adc	r25, r25
    2118:	8a 83       	std	Y+2, r24	; 0x02

	/* make the 6th bit from address to 1 and sending the command to the LCD */
	SET_BIT(Local_u8CGRAMAddress, 6);
    211a:	8a 81       	ldd	r24, Y+2	; 0x02
    211c:	80 64       	ori	r24, 0x40	; 64
    211e:	8a 83       	std	Y+2, r24	; 0x02
	LCD_voidSendCommand(Local_u8CGRAMAddress);
    2120:	8a 81       	ldd	r24, Y+2	; 0x02
    2122:	0e 94 75 0e 	call	0x1cea	; 0x1cea <LCD_voidSendCommand>

	/* Sending the bytes from character array to the LCD */
	for(Local_u8LoopCounter = 0; Local_u8LoopCounter < 8; Local_u8LoopCounter++)
    2126:	19 82       	std	Y+1, r1	; 0x01
    2128:	0e c0       	rjmp	.+28     	; 0x2146 <LCD_voidSendCustomCharacter+0x60>
	{
		LCD_voidSendData(Copy_pu8CharacterArray[Local_u8LoopCounter]);
    212a:	89 81       	ldd	r24, Y+1	; 0x01
    212c:	28 2f       	mov	r18, r24
    212e:	30 e0       	ldi	r19, 0x00	; 0
    2130:	8b 81       	ldd	r24, Y+3	; 0x03
    2132:	9c 81       	ldd	r25, Y+4	; 0x04
    2134:	fc 01       	movw	r30, r24
    2136:	e2 0f       	add	r30, r18
    2138:	f3 1f       	adc	r31, r19
    213a:	80 81       	ld	r24, Z
    213c:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <LCD_voidSendData>
	/* make the 6th bit from address to 1 and sending the command to the LCD */
	SET_BIT(Local_u8CGRAMAddress, 6);
	LCD_voidSendCommand(Local_u8CGRAMAddress);

	/* Sending the bytes from character array to the LCD */
	for(Local_u8LoopCounter = 0; Local_u8LoopCounter < 8; Local_u8LoopCounter++)
    2140:	89 81       	ldd	r24, Y+1	; 0x01
    2142:	8f 5f       	subi	r24, 0xFF	; 255
    2144:	89 83       	std	Y+1, r24	; 0x01
    2146:	89 81       	ldd	r24, Y+1	; 0x01
    2148:	88 30       	cpi	r24, 0x08	; 8
    214a:	78 f3       	brcs	.-34     	; 0x212a <LCD_voidSendCustomCharacter+0x44>
	{
		LCD_voidSendData(Copy_pu8CharacterArray[Local_u8LoopCounter]);
	}
	/* Send the DDRAM address command and specifying the position of the character */
	LCD_voidGoToXY(Copy_u8XPostion, Copy_u8YPostion);
    214c:	8e 81       	ldd	r24, Y+6	; 0x06
    214e:	6f 81       	ldd	r22, Y+7	; 0x07
    2150:	0e 94 52 10 	call	0x20a4	; 0x20a4 <LCD_voidGoToXY>

	/* Displaying the pattern from CGRAM */
	LCD_voidSendData(Copy_u8PatternNumber);
    2154:	8d 81       	ldd	r24, Y+5	; 0x05
    2156:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <LCD_voidSendData>
}
    215a:	27 96       	adiw	r28, 0x07	; 7
    215c:	0f b6       	in	r0, 0x3f	; 63
    215e:	f8 94       	cli
    2160:	de bf       	out	0x3e, r29	; 62
    2162:	0f be       	out	0x3f, r0	; 63
    2164:	cd bf       	out	0x3d, r28	; 61
    2166:	cf 91       	pop	r28
    2168:	df 91       	pop	r29
    216a:	08 95       	ret

0000216c <LCD_voidSendString>:


void LCD_voidSendString(const u8 *Copy_pu8String)
{
    216c:	df 93       	push	r29
    216e:	cf 93       	push	r28
    2170:	00 d0       	rcall	.+0      	; 0x2172 <LCD_voidSendString+0x6>
    2172:	0f 92       	push	r0
    2174:	cd b7       	in	r28, 0x3d	; 61
    2176:	de b7       	in	r29, 0x3e	; 62
    2178:	9b 83       	std	Y+3, r25	; 0x03
    217a:	8a 83       	std	Y+2, r24	; 0x02
	for(u8 Local_u8Iterator = 0; Copy_pu8String[Local_u8Iterator] != '\0'; Local_u8Iterator++)
    217c:	19 82       	std	Y+1, r1	; 0x01
    217e:	0e c0       	rjmp	.+28     	; 0x219c <LCD_voidSendString+0x30>
	{
		LCD_voidSendData(Copy_pu8String[Local_u8Iterator]);
    2180:	89 81       	ldd	r24, Y+1	; 0x01
    2182:	28 2f       	mov	r18, r24
    2184:	30 e0       	ldi	r19, 0x00	; 0
    2186:	8a 81       	ldd	r24, Y+2	; 0x02
    2188:	9b 81       	ldd	r25, Y+3	; 0x03
    218a:	fc 01       	movw	r30, r24
    218c:	e2 0f       	add	r30, r18
    218e:	f3 1f       	adc	r31, r19
    2190:	80 81       	ld	r24, Z
    2192:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <LCD_voidSendData>
}


void LCD_voidSendString(const u8 *Copy_pu8String)
{
	for(u8 Local_u8Iterator = 0; Copy_pu8String[Local_u8Iterator] != '\0'; Local_u8Iterator++)
    2196:	89 81       	ldd	r24, Y+1	; 0x01
    2198:	8f 5f       	subi	r24, 0xFF	; 255
    219a:	89 83       	std	Y+1, r24	; 0x01
    219c:	89 81       	ldd	r24, Y+1	; 0x01
    219e:	28 2f       	mov	r18, r24
    21a0:	30 e0       	ldi	r19, 0x00	; 0
    21a2:	8a 81       	ldd	r24, Y+2	; 0x02
    21a4:	9b 81       	ldd	r25, Y+3	; 0x03
    21a6:	fc 01       	movw	r30, r24
    21a8:	e2 0f       	add	r30, r18
    21aa:	f3 1f       	adc	r31, r19
    21ac:	80 81       	ld	r24, Z
    21ae:	88 23       	and	r24, r24
    21b0:	39 f7       	brne	.-50     	; 0x2180 <LCD_voidSendString+0x14>
	{
		LCD_voidSendData(Copy_pu8String[Local_u8Iterator]);
	}
}
    21b2:	0f 90       	pop	r0
    21b4:	0f 90       	pop	r0
    21b6:	0f 90       	pop	r0
    21b8:	cf 91       	pop	r28
    21ba:	df 91       	pop	r29
    21bc:	08 95       	ret

000021be <LCD_voidWriteNumber>:

void LCD_voidWriteNumber(s32 Copy_s32Number)
{
    21be:	ef 92       	push	r14
    21c0:	ff 92       	push	r15
    21c2:	0f 93       	push	r16
    21c4:	1f 93       	push	r17
    21c6:	df 93       	push	r29
    21c8:	cf 93       	push	r28
    21ca:	cd b7       	in	r28, 0x3d	; 61
    21cc:	de b7       	in	r29, 0x3e	; 62
    21ce:	62 97       	sbiw	r28, 0x12	; 18
    21d0:	0f b6       	in	r0, 0x3f	; 63
    21d2:	f8 94       	cli
    21d4:	de bf       	out	0x3e, r29	; 62
    21d6:	0f be       	out	0x3f, r0	; 63
    21d8:	cd bf       	out	0x3d, r28	; 61
    21da:	9a 8b       	std	Y+18, r25	; 0x12
    21dc:	89 8b       	std	Y+17, r24	; 0x11
	s8 Local_s8Array[11], Local_s8Digits = 0;
    21de:	1d 82       	std	Y+5, r1	; 0x05
	s32 Local_s32Copy;

	if (Copy_s32Number > 0)
    21e0:	89 89       	ldd	r24, Y+17	; 0x11
    21e2:	9a 89       	ldd	r25, Y+18	; 0x12
    21e4:	18 16       	cp	r1, r24
    21e6:	19 06       	cpc	r1, r25
    21e8:	bc f4       	brge	.+46     	; 0x2218 <LCD_voidWriteNumber+0x5a>
	{
		Local_s32Copy = Copy_s32Number;
    21ea:	89 89       	ldd	r24, Y+17	; 0x11
    21ec:	9a 89       	ldd	r25, Y+18	; 0x12
    21ee:	9c 83       	std	Y+4, r25	; 0x04
    21f0:	8b 83       	std	Y+3, r24	; 0x03
    21f2:	0d c0       	rjmp	.+26     	; 0x220e <LCD_voidWriteNumber+0x50>
		while (Local_s32Copy != 0)
		{
			Local_s32Copy /= 10;
    21f4:	8b 81       	ldd	r24, Y+3	; 0x03
    21f6:	9c 81       	ldd	r25, Y+4	; 0x04
    21f8:	2a e0       	ldi	r18, 0x0A	; 10
    21fa:	30 e0       	ldi	r19, 0x00	; 0
    21fc:	b9 01       	movw	r22, r18
    21fe:	0e 94 64 14 	call	0x28c8	; 0x28c8 <__divmodhi4>
    2202:	cb 01       	movw	r24, r22
    2204:	9c 83       	std	Y+4, r25	; 0x04
    2206:	8b 83       	std	Y+3, r24	; 0x03
			Local_s8Digits++;
    2208:	8d 81       	ldd	r24, Y+5	; 0x05
    220a:	8f 5f       	subi	r24, 0xFF	; 255
    220c:	8d 83       	std	Y+5, r24	; 0x05
	s32 Local_s32Copy;

	if (Copy_s32Number > 0)
	{
		Local_s32Copy = Copy_s32Number;
		while (Local_s32Copy != 0)
    220e:	8b 81       	ldd	r24, Y+3	; 0x03
    2210:	9c 81       	ldd	r25, Y+4	; 0x04
    2212:	00 97       	sbiw	r24, 0x00	; 0
    2214:	79 f7       	brne	.-34     	; 0x21f4 <LCD_voidWriteNumber+0x36>
    2216:	38 c0       	rjmp	.+112    	; 0x2288 <LCD_voidWriteNumber+0xca>
		{
			Local_s32Copy /= 10;
			Local_s8Digits++;
		}
	}
	else if (Copy_s32Number < 0)
    2218:	89 89       	ldd	r24, Y+17	; 0x11
    221a:	9a 89       	ldd	r25, Y+18	; 0x12
    221c:	99 23       	and	r25, r25
    221e:	d4 f4       	brge	.+52     	; 0x2254 <LCD_voidWriteNumber+0x96>
	{
		Local_s32Copy = -Copy_s32Number;
    2220:	89 89       	ldd	r24, Y+17	; 0x11
    2222:	9a 89       	ldd	r25, Y+18	; 0x12
    2224:	90 95       	com	r25
    2226:	81 95       	neg	r24
    2228:	9f 4f       	sbci	r25, 0xFF	; 255
    222a:	9c 83       	std	Y+4, r25	; 0x04
    222c:	8b 83       	std	Y+3, r24	; 0x03
    222e:	0d c0       	rjmp	.+26     	; 0x224a <LCD_voidWriteNumber+0x8c>

		{
			while (Local_s32Copy != 0)
			{
				Local_s32Copy /= 10;
    2230:	8b 81       	ldd	r24, Y+3	; 0x03
    2232:	9c 81       	ldd	r25, Y+4	; 0x04
    2234:	2a e0       	ldi	r18, 0x0A	; 10
    2236:	30 e0       	ldi	r19, 0x00	; 0
    2238:	b9 01       	movw	r22, r18
    223a:	0e 94 64 14 	call	0x28c8	; 0x28c8 <__divmodhi4>
    223e:	cb 01       	movw	r24, r22
    2240:	9c 83       	std	Y+4, r25	; 0x04
    2242:	8b 83       	std	Y+3, r24	; 0x03
				Local_s8Digits++;
    2244:	8d 81       	ldd	r24, Y+5	; 0x05
    2246:	8f 5f       	subi	r24, 0xFF	; 255
    2248:	8d 83       	std	Y+5, r24	; 0x05
	else if (Copy_s32Number < 0)
	{
		Local_s32Copy = -Copy_s32Number;

		{
			while (Local_s32Copy != 0)
    224a:	8b 81       	ldd	r24, Y+3	; 0x03
    224c:	9c 81       	ldd	r25, Y+4	; 0x04
    224e:	00 97       	sbiw	r24, 0x00	; 0
    2250:	79 f7       	brne	.-34     	; 0x2230 <LCD_voidWriteNumber+0x72>
    2252:	1a c0       	rjmp	.+52     	; 0x2288 <LCD_voidWriteNumber+0xca>
			}
		}
	}
	else
	{
		Local_s8Array[Local_s8Digits] = Copy_s32Number;
    2254:	8d 81       	ldd	r24, Y+5	; 0x05
    2256:	28 2f       	mov	r18, r24
    2258:	33 27       	eor	r19, r19
    225a:	27 fd       	sbrc	r18, 7
    225c:	30 95       	com	r19
    225e:	49 89       	ldd	r20, Y+17	; 0x11
    2260:	ce 01       	movw	r24, r28
    2262:	06 96       	adiw	r24, 0x06	; 6
    2264:	fc 01       	movw	r30, r24
    2266:	e2 0f       	add	r30, r18
    2268:	f3 1f       	adc	r31, r19
    226a:	40 83       	st	Z, r20
		LCD_voidSendData(Local_s8Array[Local_s8Digits] + '0');
    226c:	8d 81       	ldd	r24, Y+5	; 0x05
    226e:	28 2f       	mov	r18, r24
    2270:	33 27       	eor	r19, r19
    2272:	27 fd       	sbrc	r18, 7
    2274:	30 95       	com	r19
    2276:	ce 01       	movw	r24, r28
    2278:	06 96       	adiw	r24, 0x06	; 6
    227a:	fc 01       	movw	r30, r24
    227c:	e2 0f       	add	r30, r18
    227e:	f3 1f       	adc	r31, r19
    2280:	80 81       	ld	r24, Z
    2282:	80 5d       	subi	r24, 0xD0	; 208
    2284:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <LCD_voidSendData>
	}

	if (Local_s8Digits > 0)
    2288:	8d 81       	ldd	r24, Y+5	; 0x05
    228a:	18 16       	cp	r1, r24
    228c:	0c f0       	brlt	.+2      	; 0x2290 <LCD_voidWriteNumber+0xd2>
    228e:	e4 c0       	rjmp	.+456    	; 0x2458 <LCD_voidWriteNumber+0x29a>
	{
		if (Copy_s32Number > 0)
    2290:	89 89       	ldd	r24, Y+17	; 0x11
    2292:	9a 89       	ldd	r25, Y+18	; 0x12
    2294:	18 16       	cp	r1, r24
    2296:	19 06       	cpc	r1, r25
    2298:	0c f0       	brlt	.+2      	; 0x229c <LCD_voidWriteNumber+0xde>
    229a:	5e c0       	rjmp	.+188    	; 0x2358 <LCD_voidWriteNumber+0x19a>
		{
			for (u8 Local_u8Iterator= 0; Local_s8Digits != 0; Local_u8Iterator++)
    229c:	1a 82       	std	Y+2, r1	; 0x02
    229e:	57 c0       	rjmp	.+174    	; 0x234e <LCD_voidWriteNumber+0x190>
			{
				Local_s8Array[Local_u8Iterator] = Copy_s32Number / LCD_u32Power(10, Local_s8Digits-1);
    22a0:	8a 81       	ldd	r24, Y+2	; 0x02
    22a2:	e8 2e       	mov	r14, r24
    22a4:	ff 24       	eor	r15, r15
    22a6:	09 89       	ldd	r16, Y+17	; 0x11
    22a8:	1a 89       	ldd	r17, Y+18	; 0x12
    22aa:	8d 81       	ldd	r24, Y+5	; 0x05
    22ac:	99 27       	eor	r25, r25
    22ae:	87 fd       	sbrc	r24, 7
    22b0:	90 95       	com	r25
    22b2:	01 97       	sbiw	r24, 0x01	; 1
    22b4:	9c 01       	movw	r18, r24
    22b6:	8a e0       	ldi	r24, 0x0A	; 10
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	b9 01       	movw	r22, r18
    22bc:	0e 94 39 12 	call	0x2472	; 0x2472 <LCD_u32Power>
    22c0:	9c 01       	movw	r18, r24
    22c2:	c8 01       	movw	r24, r16
    22c4:	b9 01       	movw	r22, r18
    22c6:	0e 94 50 14 	call	0x28a0	; 0x28a0 <__udivmodhi4>
    22ca:	cb 01       	movw	r24, r22
    22cc:	28 2f       	mov	r18, r24
    22ce:	ce 01       	movw	r24, r28
    22d0:	06 96       	adiw	r24, 0x06	; 6
    22d2:	fc 01       	movw	r30, r24
    22d4:	ee 0d       	add	r30, r14
    22d6:	ff 1d       	adc	r31, r15
    22d8:	20 83       	st	Z, r18
				Copy_s32Number -= Local_s8Array[Local_u8Iterator] * LCD_u32Power(10, Local_s8Digits-1);
    22da:	e9 88       	ldd	r14, Y+17	; 0x11
    22dc:	fa 88       	ldd	r15, Y+18	; 0x12
    22de:	8a 81       	ldd	r24, Y+2	; 0x02
    22e0:	28 2f       	mov	r18, r24
    22e2:	30 e0       	ldi	r19, 0x00	; 0
    22e4:	ce 01       	movw	r24, r28
    22e6:	06 96       	adiw	r24, 0x06	; 6
    22e8:	fc 01       	movw	r30, r24
    22ea:	e2 0f       	add	r30, r18
    22ec:	f3 1f       	adc	r31, r19
    22ee:	80 81       	ld	r24, Z
    22f0:	08 2f       	mov	r16, r24
    22f2:	11 27       	eor	r17, r17
    22f4:	07 fd       	sbrc	r16, 7
    22f6:	10 95       	com	r17
    22f8:	8d 81       	ldd	r24, Y+5	; 0x05
    22fa:	99 27       	eor	r25, r25
    22fc:	87 fd       	sbrc	r24, 7
    22fe:	90 95       	com	r25
    2300:	01 97       	sbiw	r24, 0x01	; 1
    2302:	9c 01       	movw	r18, r24
    2304:	8a e0       	ldi	r24, 0x0A	; 10
    2306:	90 e0       	ldi	r25, 0x00	; 0
    2308:	b9 01       	movw	r22, r18
    230a:	0e 94 39 12 	call	0x2472	; 0x2472 <LCD_u32Power>
    230e:	9c 01       	movw	r18, r24
    2310:	02 9f       	mul	r16, r18
    2312:	c0 01       	movw	r24, r0
    2314:	03 9f       	mul	r16, r19
    2316:	90 0d       	add	r25, r0
    2318:	12 9f       	mul	r17, r18
    231a:	90 0d       	add	r25, r0
    231c:	11 24       	eor	r1, r1
    231e:	97 01       	movw	r18, r14
    2320:	28 1b       	sub	r18, r24
    2322:	39 0b       	sbc	r19, r25
    2324:	c9 01       	movw	r24, r18
    2326:	9a 8b       	std	Y+18, r25	; 0x12
    2328:	89 8b       	std	Y+17, r24	; 0x11
				Local_s8Digits--;
    232a:	8d 81       	ldd	r24, Y+5	; 0x05
    232c:	81 50       	subi	r24, 0x01	; 1
    232e:	8d 83       	std	Y+5, r24	; 0x05
				LCD_voidSendData(Local_s8Array[Local_u8Iterator] + '0');
    2330:	8a 81       	ldd	r24, Y+2	; 0x02
    2332:	28 2f       	mov	r18, r24
    2334:	30 e0       	ldi	r19, 0x00	; 0
    2336:	ce 01       	movw	r24, r28
    2338:	06 96       	adiw	r24, 0x06	; 6
    233a:	fc 01       	movw	r30, r24
    233c:	e2 0f       	add	r30, r18
    233e:	f3 1f       	adc	r31, r19
    2340:	80 81       	ld	r24, Z
    2342:	80 5d       	subi	r24, 0xD0	; 208
    2344:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <LCD_voidSendData>

	if (Local_s8Digits > 0)
	{
		if (Copy_s32Number > 0)
		{
			for (u8 Local_u8Iterator= 0; Local_s8Digits != 0; Local_u8Iterator++)
    2348:	8a 81       	ldd	r24, Y+2	; 0x02
    234a:	8f 5f       	subi	r24, 0xFF	; 255
    234c:	8a 83       	std	Y+2, r24	; 0x02
    234e:	8d 81       	ldd	r24, Y+5	; 0x05
    2350:	88 23       	and	r24, r24
    2352:	09 f0       	breq	.+2      	; 0x2356 <LCD_voidWriteNumber+0x198>
    2354:	a5 cf       	rjmp	.-182    	; 0x22a0 <LCD_voidWriteNumber+0xe2>
    2356:	80 c0       	rjmp	.+256    	; 0x2458 <LCD_voidWriteNumber+0x29a>
				LCD_voidSendData(Local_s8Array[Local_u8Iterator] + '0');
			}
		}
		else
		{
			u8 Local_u8Iterator= 0;
    2358:	19 82       	std	Y+1, r1	; 0x01
			Local_s8Array[Local_s8Digits] = '-';
    235a:	8d 81       	ldd	r24, Y+5	; 0x05
    235c:	28 2f       	mov	r18, r24
    235e:	33 27       	eor	r19, r19
    2360:	27 fd       	sbrc	r18, 7
    2362:	30 95       	com	r19
    2364:	ce 01       	movw	r24, r28
    2366:	06 96       	adiw	r24, 0x06	; 6
    2368:	fc 01       	movw	r30, r24
    236a:	e2 0f       	add	r30, r18
    236c:	f3 1f       	adc	r31, r19
    236e:	8d e2       	ldi	r24, 0x2D	; 45
    2370:	80 83       	st	Z, r24
			LCD_voidSendData(Local_s8Array[Local_s8Digits]);
    2372:	8d 81       	ldd	r24, Y+5	; 0x05
    2374:	28 2f       	mov	r18, r24
    2376:	33 27       	eor	r19, r19
    2378:	27 fd       	sbrc	r18, 7
    237a:	30 95       	com	r19
    237c:	ce 01       	movw	r24, r28
    237e:	06 96       	adiw	r24, 0x06	; 6
    2380:	fc 01       	movw	r30, r24
    2382:	e2 0f       	add	r30, r18
    2384:	f3 1f       	adc	r31, r19
    2386:	80 81       	ld	r24, Z
    2388:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <LCD_voidSendData>
			Local_u8Iterator++;
    238c:	89 81       	ldd	r24, Y+1	; 0x01
    238e:	8f 5f       	subi	r24, 0xFF	; 255
    2390:	89 83       	std	Y+1, r24	; 0x01
			Copy_s32Number = -Copy_s32Number;
    2392:	89 89       	ldd	r24, Y+17	; 0x11
    2394:	9a 89       	ldd	r25, Y+18	; 0x12
    2396:	90 95       	com	r25
    2398:	81 95       	neg	r24
    239a:	9f 4f       	sbci	r25, 0xFF	; 255
    239c:	9a 8b       	std	Y+18, r25	; 0x12
    239e:	89 8b       	std	Y+17, r24	; 0x11
    23a0:	57 c0       	rjmp	.+174    	; 0x2450 <LCD_voidWriteNumber+0x292>
			for (; Local_s8Digits != 0; Local_u8Iterator++)
			{
				Local_s8Array[Local_u8Iterator] = Copy_s32Number / LCD_u32Power(10, Local_s8Digits-1);
    23a2:	89 81       	ldd	r24, Y+1	; 0x01
    23a4:	e8 2e       	mov	r14, r24
    23a6:	ff 24       	eor	r15, r15
    23a8:	09 89       	ldd	r16, Y+17	; 0x11
    23aa:	1a 89       	ldd	r17, Y+18	; 0x12
    23ac:	8d 81       	ldd	r24, Y+5	; 0x05
    23ae:	99 27       	eor	r25, r25
    23b0:	87 fd       	sbrc	r24, 7
    23b2:	90 95       	com	r25
    23b4:	01 97       	sbiw	r24, 0x01	; 1
    23b6:	9c 01       	movw	r18, r24
    23b8:	8a e0       	ldi	r24, 0x0A	; 10
    23ba:	90 e0       	ldi	r25, 0x00	; 0
    23bc:	b9 01       	movw	r22, r18
    23be:	0e 94 39 12 	call	0x2472	; 0x2472 <LCD_u32Power>
    23c2:	9c 01       	movw	r18, r24
    23c4:	c8 01       	movw	r24, r16
    23c6:	b9 01       	movw	r22, r18
    23c8:	0e 94 50 14 	call	0x28a0	; 0x28a0 <__udivmodhi4>
    23cc:	cb 01       	movw	r24, r22
    23ce:	28 2f       	mov	r18, r24
    23d0:	ce 01       	movw	r24, r28
    23d2:	06 96       	adiw	r24, 0x06	; 6
    23d4:	fc 01       	movw	r30, r24
    23d6:	ee 0d       	add	r30, r14
    23d8:	ff 1d       	adc	r31, r15
    23da:	20 83       	st	Z, r18
				Copy_s32Number -= Local_s8Array[Local_u8Iterator] * LCD_u32Power(10, Local_s8Digits-1);
    23dc:	e9 88       	ldd	r14, Y+17	; 0x11
    23de:	fa 88       	ldd	r15, Y+18	; 0x12
    23e0:	89 81       	ldd	r24, Y+1	; 0x01
    23e2:	28 2f       	mov	r18, r24
    23e4:	30 e0       	ldi	r19, 0x00	; 0
    23e6:	ce 01       	movw	r24, r28
    23e8:	06 96       	adiw	r24, 0x06	; 6
    23ea:	fc 01       	movw	r30, r24
    23ec:	e2 0f       	add	r30, r18
    23ee:	f3 1f       	adc	r31, r19
    23f0:	80 81       	ld	r24, Z
    23f2:	08 2f       	mov	r16, r24
    23f4:	11 27       	eor	r17, r17
    23f6:	07 fd       	sbrc	r16, 7
    23f8:	10 95       	com	r17
    23fa:	8d 81       	ldd	r24, Y+5	; 0x05
    23fc:	99 27       	eor	r25, r25
    23fe:	87 fd       	sbrc	r24, 7
    2400:	90 95       	com	r25
    2402:	01 97       	sbiw	r24, 0x01	; 1
    2404:	9c 01       	movw	r18, r24
    2406:	8a e0       	ldi	r24, 0x0A	; 10
    2408:	90 e0       	ldi	r25, 0x00	; 0
    240a:	b9 01       	movw	r22, r18
    240c:	0e 94 39 12 	call	0x2472	; 0x2472 <LCD_u32Power>
    2410:	9c 01       	movw	r18, r24
    2412:	02 9f       	mul	r16, r18
    2414:	c0 01       	movw	r24, r0
    2416:	03 9f       	mul	r16, r19
    2418:	90 0d       	add	r25, r0
    241a:	12 9f       	mul	r17, r18
    241c:	90 0d       	add	r25, r0
    241e:	11 24       	eor	r1, r1
    2420:	97 01       	movw	r18, r14
    2422:	28 1b       	sub	r18, r24
    2424:	39 0b       	sbc	r19, r25
    2426:	c9 01       	movw	r24, r18
    2428:	9a 8b       	std	Y+18, r25	; 0x12
    242a:	89 8b       	std	Y+17, r24	; 0x11
				Local_s8Digits--;
    242c:	8d 81       	ldd	r24, Y+5	; 0x05
    242e:	81 50       	subi	r24, 0x01	; 1
    2430:	8d 83       	std	Y+5, r24	; 0x05
				LCD_voidSendData(Local_s8Array[Local_u8Iterator] + '0');
    2432:	89 81       	ldd	r24, Y+1	; 0x01
    2434:	28 2f       	mov	r18, r24
    2436:	30 e0       	ldi	r19, 0x00	; 0
    2438:	ce 01       	movw	r24, r28
    243a:	06 96       	adiw	r24, 0x06	; 6
    243c:	fc 01       	movw	r30, r24
    243e:	e2 0f       	add	r30, r18
    2440:	f3 1f       	adc	r31, r19
    2442:	80 81       	ld	r24, Z
    2444:	80 5d       	subi	r24, 0xD0	; 208
    2446:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <LCD_voidSendData>
			u8 Local_u8Iterator= 0;
			Local_s8Array[Local_s8Digits] = '-';
			LCD_voidSendData(Local_s8Array[Local_s8Digits]);
			Local_u8Iterator++;
			Copy_s32Number = -Copy_s32Number;
			for (; Local_s8Digits != 0; Local_u8Iterator++)
    244a:	89 81       	ldd	r24, Y+1	; 0x01
    244c:	8f 5f       	subi	r24, 0xFF	; 255
    244e:	89 83       	std	Y+1, r24	; 0x01
    2450:	8d 81       	ldd	r24, Y+5	; 0x05
    2452:	88 23       	and	r24, r24
    2454:	09 f0       	breq	.+2      	; 0x2458 <LCD_voidWriteNumber+0x29a>
    2456:	a5 cf       	rjmp	.-182    	; 0x23a2 <LCD_voidWriteNumber+0x1e4>
				Local_s8Digits--;
				LCD_voidSendData(Local_s8Array[Local_u8Iterator] + '0');
			}
		}
	}
}
    2458:	62 96       	adiw	r28, 0x12	; 18
    245a:	0f b6       	in	r0, 0x3f	; 63
    245c:	f8 94       	cli
    245e:	de bf       	out	0x3e, r29	; 62
    2460:	0f be       	out	0x3f, r0	; 63
    2462:	cd bf       	out	0x3d, r28	; 61
    2464:	cf 91       	pop	r28
    2466:	df 91       	pop	r29
    2468:	1f 91       	pop	r17
    246a:	0f 91       	pop	r16
    246c:	ff 90       	pop	r15
    246e:	ef 90       	pop	r14
    2470:	08 95       	ret

00002472 <LCD_u32Power>:

u32 LCD_u32Power(u32 Copy_u32Base, u32 Copy_u32Power)
{
    2472:	df 93       	push	r29
    2474:	cf 93       	push	r28
    2476:	00 d0       	rcall	.+0      	; 0x2478 <LCD_u32Power+0x6>
    2478:	00 d0       	rcall	.+0      	; 0x247a <LCD_u32Power+0x8>
    247a:	00 d0       	rcall	.+0      	; 0x247c <LCD_u32Power+0xa>
    247c:	cd b7       	in	r28, 0x3d	; 61
    247e:	de b7       	in	r29, 0x3e	; 62
    2480:	9c 83       	std	Y+4, r25	; 0x04
    2482:	8b 83       	std	Y+3, r24	; 0x03
    2484:	7e 83       	std	Y+6, r23	; 0x06
    2486:	6d 83       	std	Y+5, r22	; 0x05
	u32 Local_u32Number = Copy_u32Base;
    2488:	8b 81       	ldd	r24, Y+3	; 0x03
    248a:	9c 81       	ldd	r25, Y+4	; 0x04
    248c:	9a 83       	std	Y+2, r25	; 0x02
    248e:	89 83       	std	Y+1, r24	; 0x01

	/*Covering the case if the power of number was 0*/
	if(Copy_u32Power == 0)
    2490:	8d 81       	ldd	r24, Y+5	; 0x05
    2492:	9e 81       	ldd	r25, Y+6	; 0x06
    2494:	00 97       	sbiw	r24, 0x00	; 0
    2496:	c1 f4       	brne	.+48     	; 0x24c8 <LCD_u32Power+0x56>
	{
		Copy_u32Base = 1;
    2498:	81 e0       	ldi	r24, 0x01	; 1
    249a:	90 e0       	ldi	r25, 0x00	; 0
    249c:	9c 83       	std	Y+4, r25	; 0x04
    249e:	8b 83       	std	Y+3, r24	; 0x03
    24a0:	13 c0       	rjmp	.+38     	; 0x24c8 <LCD_u32Power+0x56>
	}

	/*The body of power function for postive number*/
	for(; Copy_u32Power > 1; Copy_u32Power--)
	{
		Copy_u32Base *= Local_u32Number;
    24a2:	2b 81       	ldd	r18, Y+3	; 0x03
    24a4:	3c 81       	ldd	r19, Y+4	; 0x04
    24a6:	89 81       	ldd	r24, Y+1	; 0x01
    24a8:	9a 81       	ldd	r25, Y+2	; 0x02
    24aa:	ac 01       	movw	r20, r24
    24ac:	24 9f       	mul	r18, r20
    24ae:	c0 01       	movw	r24, r0
    24b0:	25 9f       	mul	r18, r21
    24b2:	90 0d       	add	r25, r0
    24b4:	34 9f       	mul	r19, r20
    24b6:	90 0d       	add	r25, r0
    24b8:	11 24       	eor	r1, r1
    24ba:	9c 83       	std	Y+4, r25	; 0x04
    24bc:	8b 83       	std	Y+3, r24	; 0x03
	{
		Copy_u32Base = 1;
	}

	/*The body of power function for postive number*/
	for(; Copy_u32Power > 1; Copy_u32Power--)
    24be:	8d 81       	ldd	r24, Y+5	; 0x05
    24c0:	9e 81       	ldd	r25, Y+6	; 0x06
    24c2:	01 97       	sbiw	r24, 0x01	; 1
    24c4:	9e 83       	std	Y+6, r25	; 0x06
    24c6:	8d 83       	std	Y+5, r24	; 0x05
    24c8:	8d 81       	ldd	r24, Y+5	; 0x05
    24ca:	9e 81       	ldd	r25, Y+6	; 0x06
    24cc:	82 30       	cpi	r24, 0x02	; 2
    24ce:	91 05       	cpc	r25, r1
    24d0:	40 f7       	brcc	.-48     	; 0x24a2 <LCD_u32Power+0x30>
	{
		Copy_u32Base *= Local_u32Number;
	}
	return Copy_u32Base;
    24d2:	8b 81       	ldd	r24, Y+3	; 0x03
    24d4:	9c 81       	ldd	r25, Y+4	; 0x04
}
    24d6:	26 96       	adiw	r28, 0x06	; 6
    24d8:	0f b6       	in	r0, 0x3f	; 63
    24da:	f8 94       	cli
    24dc:	de bf       	out	0x3e, r29	; 62
    24de:	0f be       	out	0x3f, r0	; 63
    24e0:	cd bf       	out	0x3d, r28	; 61
    24e2:	cf 91       	pop	r28
    24e4:	df 91       	pop	r29
    24e6:	08 95       	ret

000024e8 <KPD_voidInit>:
#include "KPD_interface.h"
#include "KPD_private.h"
#include "KPD_config.h"

void KPD_voidInit(void)
{
    24e8:	df 93       	push	r29
    24ea:	cf 93       	push	r28
    24ec:	cd b7       	in	r28, 0x3d	; 61
    24ee:	de b7       	in	r29, 0x3e	; 62
	/* Set the columns pins to be output */
	DIO_u8SetPinDirection(KPD_COLUMNS_PORT, KPD_COLUMN0_PIN, DIO_PIN_OUTPUT);
    24f0:	80 e0       	ldi	r24, 0x00	; 0
    24f2:	63 e0       	ldi	r22, 0x03	; 3
    24f4:	41 e0       	ldi	r20, 0x01	; 1
    24f6:	0e 94 c7 08 	call	0x118e	; 0x118e <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_COLUMNS_PORT, KPD_COLUMN1_PIN, DIO_PIN_OUTPUT);
    24fa:	80 e0       	ldi	r24, 0x00	; 0
    24fc:	62 e0       	ldi	r22, 0x02	; 2
    24fe:	41 e0       	ldi	r20, 0x01	; 1
    2500:	0e 94 c7 08 	call	0x118e	; 0x118e <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_COLUMNS_PORT, KPD_COLUMN2_PIN, DIO_PIN_OUTPUT);
    2504:	80 e0       	ldi	r24, 0x00	; 0
    2506:	61 e0       	ldi	r22, 0x01	; 1
    2508:	41 e0       	ldi	r20, 0x01	; 1
    250a:	0e 94 c7 08 	call	0x118e	; 0x118e <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_COLUMNS_PORT, KPD_COLUMN3_PIN, DIO_PIN_OUTPUT);
    250e:	80 e0       	ldi	r24, 0x00	; 0
    2510:	60 e0       	ldi	r22, 0x00	; 0
    2512:	41 e0       	ldi	r20, 0x01	; 1
    2514:	0e 94 c7 08 	call	0x118e	; 0x118e <DIO_u8SetPinDirection>

	/* Set the columns pins to be high */
	DIO_u8SetPinValue(KPD_COLUMNS_PORT, KPD_COLUMN0_PIN, DIO_PIN_HIGH);
    2518:	80 e0       	ldi	r24, 0x00	; 0
    251a:	63 e0       	ldi	r22, 0x03	; 3
    251c:	41 e0       	ldi	r20, 0x01	; 1
    251e:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(KPD_COLUMNS_PORT, KPD_COLUMN1_PIN, DIO_PIN_HIGH);
    2522:	80 e0       	ldi	r24, 0x00	; 0
    2524:	62 e0       	ldi	r22, 0x02	; 2
    2526:	41 e0       	ldi	r20, 0x01	; 1
    2528:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(KPD_COLUMNS_PORT, KPD_COLUMN2_PIN, DIO_PIN_HIGH);
    252c:	80 e0       	ldi	r24, 0x00	; 0
    252e:	61 e0       	ldi	r22, 0x01	; 1
    2530:	41 e0       	ldi	r20, 0x01	; 1
    2532:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(KPD_COLUMNS_PORT, KPD_COLUMN3_PIN, DIO_PIN_HIGH);
    2536:	80 e0       	ldi	r24, 0x00	; 0
    2538:	60 e0       	ldi	r22, 0x00	; 0
    253a:	41 e0       	ldi	r20, 0x01	; 1
    253c:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <DIO_u8SetPinValue>

	/* Set the rows pins to be input */
	DIO_u8SetPinDirection(KPD_ROWS_PORT, KPD_ROW0_PIN, DIO_PIN_INPUT);
    2540:	80 e0       	ldi	r24, 0x00	; 0
    2542:	64 e0       	ldi	r22, 0x04	; 4
    2544:	40 e0       	ldi	r20, 0x00	; 0
    2546:	0e 94 c7 08 	call	0x118e	; 0x118e <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_ROWS_PORT, KPD_ROW1_PIN, DIO_PIN_INPUT);
    254a:	80 e0       	ldi	r24, 0x00	; 0
    254c:	65 e0       	ldi	r22, 0x05	; 5
    254e:	40 e0       	ldi	r20, 0x00	; 0
    2550:	0e 94 c7 08 	call	0x118e	; 0x118e <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_ROWS_PORT, KPD_ROW2_PIN, DIO_PIN_INPUT);
    2554:	80 e0       	ldi	r24, 0x00	; 0
    2556:	66 e0       	ldi	r22, 0x06	; 6
    2558:	40 e0       	ldi	r20, 0x00	; 0
    255a:	0e 94 c7 08 	call	0x118e	; 0x118e <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_ROWS_PORT, KPD_ROW3_PIN, DIO_PIN_INPUT);
    255e:	80 e0       	ldi	r24, 0x00	; 0
    2560:	67 e0       	ldi	r22, 0x07	; 7
    2562:	40 e0       	ldi	r20, 0x00	; 0
    2564:	0e 94 c7 08 	call	0x118e	; 0x118e <DIO_u8SetPinDirection>

	/* Set the rows pins to be pulled up */
	DIO_u8SetPinValue(KPD_ROWS_PORT, KPD_ROW0_PIN, DIO_PULLUP);
    2568:	80 e0       	ldi	r24, 0x00	; 0
    256a:	64 e0       	ldi	r22, 0x04	; 4
    256c:	41 e0       	ldi	r20, 0x01	; 1
    256e:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(KPD_ROWS_PORT, KPD_ROW1_PIN, DIO_PULLUP);
    2572:	80 e0       	ldi	r24, 0x00	; 0
    2574:	65 e0       	ldi	r22, 0x05	; 5
    2576:	41 e0       	ldi	r20, 0x01	; 1
    2578:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(KPD_ROWS_PORT, KPD_ROW2_PIN, DIO_PULLUP);
    257c:	80 e0       	ldi	r24, 0x00	; 0
    257e:	66 e0       	ldi	r22, 0x06	; 6
    2580:	41 e0       	ldi	r20, 0x01	; 1
    2582:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(KPD_ROWS_PORT, KPD_ROW3_PIN, DIO_PULLUP);
    2586:	80 e0       	ldi	r24, 0x00	; 0
    2588:	67 e0       	ldi	r22, 0x07	; 7
    258a:	41 e0       	ldi	r20, 0x01	; 1
    258c:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <DIO_u8SetPinValue>
}
    2590:	cf 91       	pop	r28
    2592:	df 91       	pop	r29
    2594:	08 95       	ret

00002596 <KPD_u8GetPressedKey>:

u8 KPD_u8GetPressedKey(void)
{
    2596:	df 93       	push	r29
    2598:	cf 93       	push	r28
    259a:	cd b7       	in	r28, 0x3d	; 61
    259c:	de b7       	in	r29, 0x3e	; 62
    259e:	a2 97       	sbiw	r28, 0x22	; 34
    25a0:	0f b6       	in	r0, 0x3f	; 63
    25a2:	f8 94       	cli
    25a4:	de bf       	out	0x3e, r29	; 62
    25a6:	0f be       	out	0x3f, r0	; 63
    25a8:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8ColumnsIndex, Local_u8RowsIndex, Local_u8PinState, Local_u8PressedKey = KPD_NO_PRESSED_KEY;
    25aa:	8a ea       	ldi	r24, 0xAA	; 170
    25ac:	89 83       	std	Y+1, r24	; 0x01
	u8 Local_u8ColumnsArray[4] = {KPD_COLUMN0_PIN, KPD_COLUMN1_PIN, KPD_COLUMN2_PIN, KPD_COLUMN3_PIN};
    25ae:	83 e0       	ldi	r24, 0x03	; 3
    25b0:	8d 83       	std	Y+5, r24	; 0x05
    25b2:	82 e0       	ldi	r24, 0x02	; 2
    25b4:	8e 83       	std	Y+6, r24	; 0x06
    25b6:	81 e0       	ldi	r24, 0x01	; 1
    25b8:	8f 83       	std	Y+7, r24	; 0x07
    25ba:	18 86       	std	Y+8, r1	; 0x08
	u8 Local_u8RowsArray[4] = {KPD_ROW0_PIN, KPD_ROW1_PIN, KPD_ROW2_PIN, KPD_ROW3_PIN};
    25bc:	84 e0       	ldi	r24, 0x04	; 4
    25be:	89 87       	std	Y+9, r24	; 0x09
    25c0:	85 e0       	ldi	r24, 0x05	; 5
    25c2:	8a 87       	std	Y+10, r24	; 0x0a
    25c4:	86 e0       	ldi	r24, 0x06	; 6
    25c6:	8b 87       	std	Y+11, r24	; 0x0b
    25c8:	87 e0       	ldi	r24, 0x07	; 7
    25ca:	8c 87       	std	Y+12, r24	; 0x0c
	u8 Local_u8KeysArray[4][4] = KPD_KEYS_ARRAYS_VALUES;
    25cc:	ce 01       	movw	r24, r28
    25ce:	0d 96       	adiw	r24, 0x0d	; 13
    25d0:	9f 8f       	std	Y+31, r25	; 0x1f
    25d2:	8e 8f       	std	Y+30, r24	; 0x1e
    25d4:	e8 eb       	ldi	r30, 0xB8	; 184
    25d6:	f0 e0       	ldi	r31, 0x00	; 0
    25d8:	f9 a3       	std	Y+33, r31	; 0x21
    25da:	e8 a3       	std	Y+32, r30	; 0x20
    25dc:	f0 e1       	ldi	r31, 0x10	; 16
    25de:	fa a3       	std	Y+34, r31	; 0x22
    25e0:	e8 a1       	ldd	r30, Y+32	; 0x20
    25e2:	f9 a1       	ldd	r31, Y+33	; 0x21
    25e4:	00 80       	ld	r0, Z
    25e6:	88 a1       	ldd	r24, Y+32	; 0x20
    25e8:	99 a1       	ldd	r25, Y+33	; 0x21
    25ea:	01 96       	adiw	r24, 0x01	; 1
    25ec:	99 a3       	std	Y+33, r25	; 0x21
    25ee:	88 a3       	std	Y+32, r24	; 0x20
    25f0:	ee 8d       	ldd	r30, Y+30	; 0x1e
    25f2:	ff 8d       	ldd	r31, Y+31	; 0x1f
    25f4:	00 82       	st	Z, r0
    25f6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    25f8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    25fa:	01 96       	adiw	r24, 0x01	; 1
    25fc:	9f 8f       	std	Y+31, r25	; 0x1f
    25fe:	8e 8f       	std	Y+30, r24	; 0x1e
    2600:	9a a1       	ldd	r25, Y+34	; 0x22
    2602:	91 50       	subi	r25, 0x01	; 1
    2604:	9a a3       	std	Y+34, r25	; 0x22
    2606:	ea a1       	ldd	r30, Y+34	; 0x22
    2608:	ee 23       	and	r30, r30
    260a:	51 f7       	brne	.-44     	; 0x25e0 <KPD_u8GetPressedKey+0x4a>

	/* Loop for columns */
	for (Local_u8ColumnsIndex = 0; Local_u8ColumnsIndex < 4; Local_u8ColumnsIndex++)
    260c:	1b 82       	std	Y+3, r1	; 0x03
    260e:	68 c0       	rjmp	.+208    	; 0x26e0 <KPD_u8GetPressedKey+0x14a>
	{
		/* Activate Current Column */
		DIO_u8SetPinValue(KPD_COLUMNS_PORT, Local_u8ColumnsArray[Local_u8ColumnsIndex], DIO_PIN_LOW);
    2610:	8b 81       	ldd	r24, Y+3	; 0x03
    2612:	28 2f       	mov	r18, r24
    2614:	30 e0       	ldi	r19, 0x00	; 0
    2616:	ce 01       	movw	r24, r28
    2618:	05 96       	adiw	r24, 0x05	; 5
    261a:	fc 01       	movw	r30, r24
    261c:	e2 0f       	add	r30, r18
    261e:	f3 1f       	adc	r31, r19
    2620:	90 81       	ld	r25, Z
    2622:	80 e0       	ldi	r24, 0x00	; 0
    2624:	69 2f       	mov	r22, r25
    2626:	40 e0       	ldi	r20, 0x00	; 0
    2628:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <DIO_u8SetPinValue>

		/* Loops for rows */
		for(Local_u8RowsIndex = 0; Local_u8RowsIndex < 4; Local_u8RowsIndex++)
    262c:	1a 82       	std	Y+2, r1	; 0x02
    262e:	43 c0       	rjmp	.+134    	; 0x26b6 <KPD_u8GetPressedKey+0x120>
		{
			DIO_u8GetPinValue(KPD_ROWS_PORT, Local_u8RowsArray[Local_u8RowsIndex], &Local_u8PinState);
    2630:	8a 81       	ldd	r24, Y+2	; 0x02
    2632:	28 2f       	mov	r18, r24
    2634:	30 e0       	ldi	r19, 0x00	; 0
    2636:	ce 01       	movw	r24, r28
    2638:	09 96       	adiw	r24, 0x09	; 9
    263a:	fc 01       	movw	r30, r24
    263c:	e2 0f       	add	r30, r18
    263e:	f3 1f       	adc	r31, r19
    2640:	90 81       	ld	r25, Z
    2642:	9e 01       	movw	r18, r28
    2644:	2c 5f       	subi	r18, 0xFC	; 252
    2646:	3f 4f       	sbci	r19, 0xFF	; 255
    2648:	80 e0       	ldi	r24, 0x00	; 0
    264a:	69 2f       	mov	r22, r25
    264c:	a9 01       	movw	r20, r18
    264e:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <DIO_u8GetPinValue>
			if(Local_u8PinState == 0)
    2652:	8c 81       	ldd	r24, Y+4	; 0x04
    2654:	88 23       	and	r24, r24
    2656:	61 f5       	brne	.+88     	; 0x26b0 <KPD_u8GetPressedKey+0x11a>
			{
				/* Get the pressed Key */
				Local_u8PressedKey = Local_u8KeysArray[Local_u8RowsIndex][Local_u8ColumnsIndex];
    2658:	8a 81       	ldd	r24, Y+2	; 0x02
    265a:	28 2f       	mov	r18, r24
    265c:	30 e0       	ldi	r19, 0x00	; 0
    265e:	8b 81       	ldd	r24, Y+3	; 0x03
    2660:	48 2f       	mov	r20, r24
    2662:	50 e0       	ldi	r21, 0x00	; 0
    2664:	22 0f       	add	r18, r18
    2666:	33 1f       	adc	r19, r19
    2668:	22 0f       	add	r18, r18
    266a:	33 1f       	adc	r19, r19
    266c:	ce 01       	movw	r24, r28
    266e:	01 96       	adiw	r24, 0x01	; 1
    2670:	82 0f       	add	r24, r18
    2672:	93 1f       	adc	r25, r19
    2674:	84 0f       	add	r24, r20
    2676:	95 1f       	adc	r25, r21
    2678:	fc 01       	movw	r30, r24
    267a:	3c 96       	adiw	r30, 0x0c	; 12
    267c:	80 81       	ld	r24, Z
    267e:	89 83       	std	Y+1, r24	; 0x01
    2680:	11 c0       	rjmp	.+34     	; 0x26a4 <KPD_u8GetPressedKey+0x10e>
				/* Polling (Busy Waiting), Wait until the pressed key is released */
				while(Local_u8PinState == 0)
				{
					DIO_u8GetPinValue(KPD_ROWS_PORT, Local_u8RowsArray[Local_u8RowsIndex], &Local_u8PinState);
    2682:	8a 81       	ldd	r24, Y+2	; 0x02
    2684:	28 2f       	mov	r18, r24
    2686:	30 e0       	ldi	r19, 0x00	; 0
    2688:	ce 01       	movw	r24, r28
    268a:	09 96       	adiw	r24, 0x09	; 9
    268c:	fc 01       	movw	r30, r24
    268e:	e2 0f       	add	r30, r18
    2690:	f3 1f       	adc	r31, r19
    2692:	90 81       	ld	r25, Z
    2694:	9e 01       	movw	r18, r28
    2696:	2c 5f       	subi	r18, 0xFC	; 252
    2698:	3f 4f       	sbci	r19, 0xFF	; 255
    269a:	80 e0       	ldi	r24, 0x00	; 0
    269c:	69 2f       	mov	r22, r25
    269e:	a9 01       	movw	r20, r18
    26a0:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <DIO_u8GetPinValue>
			if(Local_u8PinState == 0)
			{
				/* Get the pressed Key */
				Local_u8PressedKey = Local_u8KeysArray[Local_u8RowsIndex][Local_u8ColumnsIndex];
				/* Polling (Busy Waiting), Wait until the pressed key is released */
				while(Local_u8PinState == 0)
    26a4:	8c 81       	ldd	r24, Y+4	; 0x04
    26a6:	88 23       	and	r24, r24
    26a8:	61 f3       	breq	.-40     	; 0x2682 <KPD_u8GetPressedKey+0xec>
				{
					DIO_u8GetPinValue(KPD_ROWS_PORT, Local_u8RowsArray[Local_u8RowsIndex], &Local_u8PinState);
				}
				return Local_u8PressedKey;
    26aa:	f9 81       	ldd	r31, Y+1	; 0x01
    26ac:	fd 8f       	std	Y+29, r31	; 0x1d
    26ae:	1e c0       	rjmp	.+60     	; 0x26ec <KPD_u8GetPressedKey+0x156>
	{
		/* Activate Current Column */
		DIO_u8SetPinValue(KPD_COLUMNS_PORT, Local_u8ColumnsArray[Local_u8ColumnsIndex], DIO_PIN_LOW);

		/* Loops for rows */
		for(Local_u8RowsIndex = 0; Local_u8RowsIndex < 4; Local_u8RowsIndex++)
    26b0:	8a 81       	ldd	r24, Y+2	; 0x02
    26b2:	8f 5f       	subi	r24, 0xFF	; 255
    26b4:	8a 83       	std	Y+2, r24	; 0x02
    26b6:	8a 81       	ldd	r24, Y+2	; 0x02
    26b8:	84 30       	cpi	r24, 0x04	; 4
    26ba:	08 f4       	brcc	.+2      	; 0x26be <KPD_u8GetPressedKey+0x128>
    26bc:	b9 cf       	rjmp	.-142    	; 0x2630 <KPD_u8GetPressedKey+0x9a>
				}
				return Local_u8PressedKey;
			}
		}
		/* Deactivate Current Column */
		DIO_u8SetPinValue(KPD_COLUMNS_PORT, Local_u8ColumnsArray[Local_u8ColumnsIndex], DIO_PIN_HIGH);
    26be:	8b 81       	ldd	r24, Y+3	; 0x03
    26c0:	28 2f       	mov	r18, r24
    26c2:	30 e0       	ldi	r19, 0x00	; 0
    26c4:	ce 01       	movw	r24, r28
    26c6:	05 96       	adiw	r24, 0x05	; 5
    26c8:	fc 01       	movw	r30, r24
    26ca:	e2 0f       	add	r30, r18
    26cc:	f3 1f       	adc	r31, r19
    26ce:	90 81       	ld	r25, Z
    26d0:	80 e0       	ldi	r24, 0x00	; 0
    26d2:	69 2f       	mov	r22, r25
    26d4:	41 e0       	ldi	r20, 0x01	; 1
    26d6:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <DIO_u8SetPinValue>
	u8 Local_u8ColumnsArray[4] = {KPD_COLUMN0_PIN, KPD_COLUMN1_PIN, KPD_COLUMN2_PIN, KPD_COLUMN3_PIN};
	u8 Local_u8RowsArray[4] = {KPD_ROW0_PIN, KPD_ROW1_PIN, KPD_ROW2_PIN, KPD_ROW3_PIN};
	u8 Local_u8KeysArray[4][4] = KPD_KEYS_ARRAYS_VALUES;

	/* Loop for columns */
	for (Local_u8ColumnsIndex = 0; Local_u8ColumnsIndex < 4; Local_u8ColumnsIndex++)
    26da:	8b 81       	ldd	r24, Y+3	; 0x03
    26dc:	8f 5f       	subi	r24, 0xFF	; 255
    26de:	8b 83       	std	Y+3, r24	; 0x03
    26e0:	8b 81       	ldd	r24, Y+3	; 0x03
    26e2:	84 30       	cpi	r24, 0x04	; 4
    26e4:	08 f4       	brcc	.+2      	; 0x26e8 <KPD_u8GetPressedKey+0x152>
    26e6:	94 cf       	rjmp	.-216    	; 0x2610 <KPD_u8GetPressedKey+0x7a>
			}
		}
		/* Deactivate Current Column */
		DIO_u8SetPinValue(KPD_COLUMNS_PORT, Local_u8ColumnsArray[Local_u8ColumnsIndex], DIO_PIN_HIGH);
	}
	return Local_u8PressedKey;
    26e8:	89 81       	ldd	r24, Y+1	; 0x01
    26ea:	8d 8f       	std	Y+29, r24	; 0x1d
    26ec:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    26ee:	a2 96       	adiw	r28, 0x22	; 34
    26f0:	0f b6       	in	r0, 0x3f	; 63
    26f2:	f8 94       	cli
    26f4:	de bf       	out	0x3e, r29	; 62
    26f6:	0f be       	out	0x3f, r0	; 63
    26f8:	cd bf       	out	0x3d, r28	; 61
    26fa:	cf 91       	pop	r28
    26fc:	df 91       	pop	r29
    26fe:	08 95       	ret

00002700 <H_Bridge_voidIntialization>:
#include "H_Bridge_interface.h"
#include "H_Bridge_private.h"


void H_Bridge_voidIntialization (void)
{
    2700:	df 93       	push	r29
    2702:	cf 93       	push	r28
    2704:	cd b7       	in	r28, 0x3d	; 61
    2706:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDirection(H_BRIDGE_PORT, H_BRIDGE_FIRST_DIRECTION_PIN, DIO_PIN_OUTPUT);
    2708:	80 e0       	ldi	r24, 0x00	; 0
    270a:	60 e0       	ldi	r22, 0x00	; 0
    270c:	41 e0       	ldi	r20, 0x01	; 1
    270e:	0e 94 c7 08 	call	0x118e	; 0x118e <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(H_BRIDGE_PORT, H_BRIDGE_SECOND_DIRECTION_PIN, DIO_PIN_OUTPUT);
    2712:	80 e0       	ldi	r24, 0x00	; 0
    2714:	61 e0       	ldi	r22, 0x01	; 1
    2716:	41 e0       	ldi	r20, 0x01	; 1
    2718:	0e 94 c7 08 	call	0x118e	; 0x118e <DIO_u8SetPinDirection>
}
    271c:	cf 91       	pop	r28
    271e:	df 91       	pop	r29
    2720:	08 95       	ret

00002722 <H_Bridge_voidFirstDirection>:

void H_Bridge_voidFirstDirection (void)
{
    2722:	df 93       	push	r29
    2724:	cf 93       	push	r28
    2726:	cd b7       	in	r28, 0x3d	; 61
    2728:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(H_BRIDGE_PORT, H_BRIDGE_SECOND_DIRECTION_PIN, DIO_PIN_LOW);
    272a:	80 e0       	ldi	r24, 0x00	; 0
    272c:	61 e0       	ldi	r22, 0x01	; 1
    272e:	40 e0       	ldi	r20, 0x00	; 0
    2730:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(H_BRIDGE_PORT, H_BRIDGE_FIRST_DIRECTION_PIN, DIO_PIN_HIGH);
    2734:	80 e0       	ldi	r24, 0x00	; 0
    2736:	60 e0       	ldi	r22, 0x00	; 0
    2738:	41 e0       	ldi	r20, 0x01	; 1
    273a:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <DIO_u8SetPinValue>
}
    273e:	cf 91       	pop	r28
    2740:	df 91       	pop	r29
    2742:	08 95       	ret

00002744 <H_Bridge_voidSecondDirection>:

void H_Bridge_voidSecondDirection (void)
{
    2744:	df 93       	push	r29
    2746:	cf 93       	push	r28
    2748:	cd b7       	in	r28, 0x3d	; 61
    274a:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(H_BRIDGE_PORT, H_BRIDGE_FIRST_DIRECTION_PIN, DIO_PIN_LOW);
    274c:	80 e0       	ldi	r24, 0x00	; 0
    274e:	60 e0       	ldi	r22, 0x00	; 0
    2750:	40 e0       	ldi	r20, 0x00	; 0
    2752:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(H_BRIDGE_PORT, H_BRIDGE_SECOND_DIRECTION_PIN, DIO_PIN_HIGH);
    2756:	80 e0       	ldi	r24, 0x00	; 0
    2758:	61 e0       	ldi	r22, 0x01	; 1
    275a:	41 e0       	ldi	r20, 0x01	; 1
    275c:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <DIO_u8SetPinValue>
}
    2760:	cf 91       	pop	r28
    2762:	df 91       	pop	r29
    2764:	08 95       	ret

00002766 <H_Bridge_voidStop>:

void H_Bridge_voidStop (void)
{
    2766:	df 93       	push	r29
    2768:	cf 93       	push	r28
    276a:	cd b7       	in	r28, 0x3d	; 61
    276c:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(H_BRIDGE_PORT, H_BRIDGE_FIRST_DIRECTION_PIN, DIO_PIN_LOW);
    276e:	80 e0       	ldi	r24, 0x00	; 0
    2770:	60 e0       	ldi	r22, 0x00	; 0
    2772:	40 e0       	ldi	r20, 0x00	; 0
    2774:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(H_BRIDGE_PORT, H_BRIDGE_SECOND_DIRECTION_PIN, DIO_PIN_LOW);
    2778:	80 e0       	ldi	r24, 0x00	; 0
    277a:	61 e0       	ldi	r22, 0x01	; 1
    277c:	40 e0       	ldi	r20, 0x00	; 0
    277e:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <DIO_u8SetPinValue>
}
    2782:	cf 91       	pop	r28
    2784:	df 91       	pop	r29
    2786:	08 95       	ret

00002788 <main>:
/********************************************************************************************/
/********************************************************************************************/
#include "main.h"

void main (void)
{
    2788:	df 93       	push	r29
    278a:	cf 93       	push	r28
    278c:	00 d0       	rcall	.+0      	; 0x278e <main+0x6>
    278e:	cd b7       	in	r28, 0x3d	; 61
    2790:	de b7       	in	r29, 0x3e	; 62
	u16 Local_u16Reading;
//	u16 Local_u16MilliVolt;
	DIO_u8SetPinDirection(DIO_PORTA, DIO_PIN0, DIO_PIN_INPUT);
    2792:	80 e0       	ldi	r24, 0x00	; 0
    2794:	60 e0       	ldi	r22, 0x00	; 0
    2796:	40 e0       	ldi	r20, 0x00	; 0
    2798:	0e 94 c7 08 	call	0x118e	; 0x118e <DIO_u8SetPinDirection>
	DIO_u8SetPortDirection(DIO_PORTB, DIO_PORT_OUTPUT);
    279c:	81 e0       	ldi	r24, 0x01	; 1
    279e:	6f ef       	ldi	r22, 0xFF	; 255
    27a0:	0e 94 dd 07 	call	0xfba	; 0xfba <DIO_u8SetPortDirection>
	ADC_voidInit();
    27a4:	0e 94 83 0b 	call	0x1706	; 0x1706 <ADC_voidInit>
	LCD_voidInitialize();
    27a8:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <LCD_voidInitialize>
	while (1)
	{
		Local_u16Reading = ADC_u8GetChannelReadingSynchronous(CHANNEL0);
    27ac:	80 e0       	ldi	r24, 0x00	; 0
    27ae:	0e 94 bb 0b 	call	0x1776	; 0x1776 <ADC_u8GetChannelReadingSynchronous>
    27b2:	9a 83       	std	Y+2, r25	; 0x02
    27b4:	89 83       	std	Y+1, r24	; 0x01
//		LCD_voidSendString("TEMP= ");
//		LCD_voidWriteNumber(Local_u16Reading);
//		LCD_voidSendString(" C");
//		_delay_ms(500);
//		LCD_voidSendCommand(LCD_CLEAR);
		if (Local_u16Reading <= 100)
    27b6:	89 81       	ldd	r24, Y+1	; 0x01
    27b8:	9a 81       	ldd	r25, Y+2	; 0x02
    27ba:	85 36       	cpi	r24, 0x65	; 101
    27bc:	91 05       	cpc	r25, r1
    27be:	68 f4       	brcc	.+26     	; 0x27da <main+0x52>
		{
			LCD_voidGoToXY(LCD_ROW0, LCD_COLUMN0);
    27c0:	80 e0       	ldi	r24, 0x00	; 0
    27c2:	60 e0       	ldi	r22, 0x00	; 0
    27c4:	0e 94 52 10 	call	0x20a4	; 0x20a4 <LCD_voidGoToXY>
			LCD_voidSendString("8 LEDs are on");
    27c8:	80 e6       	ldi	r24, 0x60	; 96
    27ca:	90 e0       	ldi	r25, 0x00	; 0
    27cc:	0e 94 b6 10 	call	0x216c	; 0x216c <LCD_voidSendString>
			DIO_u8SetPortValue(DIO_PORTB, DIO_PORT_HIGH);
    27d0:	81 e0       	ldi	r24, 0x01	; 1
    27d2:	6f ef       	ldi	r22, 0xFF	; 255
    27d4:	0e 94 25 08 	call	0x104a	; 0x104a <DIO_u8SetPortValue>
    27d8:	e9 cf       	rjmp	.-46     	; 0x27ac <main+0x24>
		}
		else if ((Local_u16Reading > 100) && (Local_u16Reading <= 200))
    27da:	89 81       	ldd	r24, Y+1	; 0x01
    27dc:	9a 81       	ldd	r25, Y+2	; 0x02
    27de:	85 36       	cpi	r24, 0x65	; 101
    27e0:	91 05       	cpc	r25, r1
    27e2:	90 f0       	brcs	.+36     	; 0x2808 <main+0x80>
    27e4:	89 81       	ldd	r24, Y+1	; 0x01
    27e6:	9a 81       	ldd	r25, Y+2	; 0x02
    27e8:	89 3c       	cpi	r24, 0xC9	; 201
    27ea:	91 05       	cpc	r25, r1
    27ec:	68 f4       	brcc	.+26     	; 0x2808 <main+0x80>
		{
			LCD_voidGoToXY(LCD_ROW0, LCD_COLUMN0);
    27ee:	80 e0       	ldi	r24, 0x00	; 0
    27f0:	60 e0       	ldi	r22, 0x00	; 0
    27f2:	0e 94 52 10 	call	0x20a4	; 0x20a4 <LCD_voidGoToXY>
			LCD_voidSendString("6 LEDs are on");
    27f6:	8e e6       	ldi	r24, 0x6E	; 110
    27f8:	90 e0       	ldi	r25, 0x00	; 0
    27fa:	0e 94 b6 10 	call	0x216c	; 0x216c <LCD_voidSendString>
			DIO_u8SetPortValue(DIO_PORTB, SIX_LEDS);
    27fe:	81 e0       	ldi	r24, 0x01	; 1
    2800:	6b ed       	ldi	r22, 0xDB	; 219
    2802:	0e 94 25 08 	call	0x104a	; 0x104a <DIO_u8SetPortValue>
    2806:	d2 cf       	rjmp	.-92     	; 0x27ac <main+0x24>
		}
		else if ((Local_u16Reading > 200) && (Local_u16Reading <= 350))
    2808:	89 81       	ldd	r24, Y+1	; 0x01
    280a:	9a 81       	ldd	r25, Y+2	; 0x02
    280c:	89 3c       	cpi	r24, 0xC9	; 201
    280e:	91 05       	cpc	r25, r1
    2810:	98 f0       	brcs	.+38     	; 0x2838 <main+0xb0>
    2812:	89 81       	ldd	r24, Y+1	; 0x01
    2814:	9a 81       	ldd	r25, Y+2	; 0x02
    2816:	21 e0       	ldi	r18, 0x01	; 1
    2818:	8f 35       	cpi	r24, 0x5F	; 95
    281a:	92 07       	cpc	r25, r18
    281c:	68 f4       	brcc	.+26     	; 0x2838 <main+0xb0>
		{
			LCD_voidGoToXY(LCD_ROW0, LCD_COLUMN0);
    281e:	80 e0       	ldi	r24, 0x00	; 0
    2820:	60 e0       	ldi	r22, 0x00	; 0
    2822:	0e 94 52 10 	call	0x20a4	; 0x20a4 <LCD_voidGoToXY>
			LCD_voidSendString("4 LEDs are on");
    2826:	8c e7       	ldi	r24, 0x7C	; 124
    2828:	90 e0       	ldi	r25, 0x00	; 0
    282a:	0e 94 b6 10 	call	0x216c	; 0x216c <LCD_voidSendString>
			DIO_u8SetPortValue(DIO_PORTB, FOUR_LEDS);
    282e:	81 e0       	ldi	r24, 0x01	; 1
    2830:	6a ea       	ldi	r22, 0xAA	; 170
    2832:	0e 94 25 08 	call	0x104a	; 0x104a <DIO_u8SetPortValue>
    2836:	ba cf       	rjmp	.-140    	; 0x27ac <main+0x24>
		}
		else if ((Local_u16Reading > 350) && (Local_u16Reading <= 500))
    2838:	89 81       	ldd	r24, Y+1	; 0x01
    283a:	9a 81       	ldd	r25, Y+2	; 0x02
    283c:	21 e0       	ldi	r18, 0x01	; 1
    283e:	8f 35       	cpi	r24, 0x5F	; 95
    2840:	92 07       	cpc	r25, r18
    2842:	98 f0       	brcs	.+38     	; 0x286a <main+0xe2>
    2844:	89 81       	ldd	r24, Y+1	; 0x01
    2846:	9a 81       	ldd	r25, Y+2	; 0x02
    2848:	21 e0       	ldi	r18, 0x01	; 1
    284a:	85 3f       	cpi	r24, 0xF5	; 245
    284c:	92 07       	cpc	r25, r18
    284e:	68 f4       	brcc	.+26     	; 0x286a <main+0xe2>
		{
			LCD_voidGoToXY(LCD_ROW0, LCD_COLUMN0);
    2850:	80 e0       	ldi	r24, 0x00	; 0
    2852:	60 e0       	ldi	r22, 0x00	; 0
    2854:	0e 94 52 10 	call	0x20a4	; 0x20a4 <LCD_voidGoToXY>
			LCD_voidSendString("2 LEDs are on");
    2858:	8a e8       	ldi	r24, 0x8A	; 138
    285a:	90 e0       	ldi	r25, 0x00	; 0
    285c:	0e 94 b6 10 	call	0x216c	; 0x216c <LCD_voidSendString>
			DIO_u8SetPortValue(DIO_PORTB, TWO_LEDS);
    2860:	81 e0       	ldi	r24, 0x01	; 1
    2862:	64 e2       	ldi	r22, 0x24	; 36
    2864:	0e 94 25 08 	call	0x104a	; 0x104a <DIO_u8SetPortValue>
    2868:	a1 cf       	rjmp	.-190    	; 0x27ac <main+0x24>
		}
		else if ((Local_u16Reading > 700) && (Local_u16Reading <= 1000))
    286a:	89 81       	ldd	r24, Y+1	; 0x01
    286c:	9a 81       	ldd	r25, Y+2	; 0x02
    286e:	22 e0       	ldi	r18, 0x02	; 2
    2870:	8d 3b       	cpi	r24, 0xBD	; 189
    2872:	92 07       	cpc	r25, r18
    2874:	08 f4       	brcc	.+2      	; 0x2878 <main+0xf0>
    2876:	9a cf       	rjmp	.-204    	; 0x27ac <main+0x24>
    2878:	89 81       	ldd	r24, Y+1	; 0x01
    287a:	9a 81       	ldd	r25, Y+2	; 0x02
    287c:	23 e0       	ldi	r18, 0x03	; 3
    287e:	89 3e       	cpi	r24, 0xE9	; 233
    2880:	92 07       	cpc	r25, r18
    2882:	08 f0       	brcs	.+2      	; 0x2886 <main+0xfe>
    2884:	93 cf       	rjmp	.-218    	; 0x27ac <main+0x24>
		{
			LCD_voidGoToXY(LCD_ROW0, LCD_COLUMN0);
    2886:	80 e0       	ldi	r24, 0x00	; 0
    2888:	60 e0       	ldi	r22, 0x00	; 0
    288a:	0e 94 52 10 	call	0x20a4	; 0x20a4 <LCD_voidGoToXY>
			LCD_voidSendString("0 LEDs are on");
    288e:	88 e9       	ldi	r24, 0x98	; 152
    2890:	90 e0       	ldi	r25, 0x00	; 0
    2892:	0e 94 b6 10 	call	0x216c	; 0x216c <LCD_voidSendString>
			DIO_u8SetPortValue(DIO_PORTB, DIO_PORT_LOW);
    2896:	81 e0       	ldi	r24, 0x01	; 1
    2898:	60 e0       	ldi	r22, 0x00	; 0
    289a:	0e 94 25 08 	call	0x104a	; 0x104a <DIO_u8SetPortValue>
    289e:	86 cf       	rjmp	.-244    	; 0x27ac <main+0x24>

000028a0 <__udivmodhi4>:
    28a0:	aa 1b       	sub	r26, r26
    28a2:	bb 1b       	sub	r27, r27
    28a4:	51 e1       	ldi	r21, 0x11	; 17
    28a6:	07 c0       	rjmp	.+14     	; 0x28b6 <__udivmodhi4_ep>

000028a8 <__udivmodhi4_loop>:
    28a8:	aa 1f       	adc	r26, r26
    28aa:	bb 1f       	adc	r27, r27
    28ac:	a6 17       	cp	r26, r22
    28ae:	b7 07       	cpc	r27, r23
    28b0:	10 f0       	brcs	.+4      	; 0x28b6 <__udivmodhi4_ep>
    28b2:	a6 1b       	sub	r26, r22
    28b4:	b7 0b       	sbc	r27, r23

000028b6 <__udivmodhi4_ep>:
    28b6:	88 1f       	adc	r24, r24
    28b8:	99 1f       	adc	r25, r25
    28ba:	5a 95       	dec	r21
    28bc:	a9 f7       	brne	.-22     	; 0x28a8 <__udivmodhi4_loop>
    28be:	80 95       	com	r24
    28c0:	90 95       	com	r25
    28c2:	bc 01       	movw	r22, r24
    28c4:	cd 01       	movw	r24, r26
    28c6:	08 95       	ret

000028c8 <__divmodhi4>:
    28c8:	97 fb       	bst	r25, 7
    28ca:	09 2e       	mov	r0, r25
    28cc:	07 26       	eor	r0, r23
    28ce:	0a d0       	rcall	.+20     	; 0x28e4 <__divmodhi4_neg1>
    28d0:	77 fd       	sbrc	r23, 7
    28d2:	04 d0       	rcall	.+8      	; 0x28dc <__divmodhi4_neg2>
    28d4:	e5 df       	rcall	.-54     	; 0x28a0 <__udivmodhi4>
    28d6:	06 d0       	rcall	.+12     	; 0x28e4 <__divmodhi4_neg1>
    28d8:	00 20       	and	r0, r0
    28da:	1a f4       	brpl	.+6      	; 0x28e2 <__divmodhi4_exit>

000028dc <__divmodhi4_neg2>:
    28dc:	70 95       	com	r23
    28de:	61 95       	neg	r22
    28e0:	7f 4f       	sbci	r23, 0xFF	; 255

000028e2 <__divmodhi4_exit>:
    28e2:	08 95       	ret

000028e4 <__divmodhi4_neg1>:
    28e4:	f6 f7       	brtc	.-4      	; 0x28e2 <__divmodhi4_exit>
    28e6:	90 95       	com	r25
    28e8:	81 95       	neg	r24
    28ea:	9f 4f       	sbci	r25, 0xFF	; 255
    28ec:	08 95       	ret

000028ee <__prologue_saves__>:
    28ee:	2f 92       	push	r2
    28f0:	3f 92       	push	r3
    28f2:	4f 92       	push	r4
    28f4:	5f 92       	push	r5
    28f6:	6f 92       	push	r6
    28f8:	7f 92       	push	r7
    28fa:	8f 92       	push	r8
    28fc:	9f 92       	push	r9
    28fe:	af 92       	push	r10
    2900:	bf 92       	push	r11
    2902:	cf 92       	push	r12
    2904:	df 92       	push	r13
    2906:	ef 92       	push	r14
    2908:	ff 92       	push	r15
    290a:	0f 93       	push	r16
    290c:	1f 93       	push	r17
    290e:	cf 93       	push	r28
    2910:	df 93       	push	r29
    2912:	cd b7       	in	r28, 0x3d	; 61
    2914:	de b7       	in	r29, 0x3e	; 62
    2916:	ca 1b       	sub	r28, r26
    2918:	db 0b       	sbc	r29, r27
    291a:	0f b6       	in	r0, 0x3f	; 63
    291c:	f8 94       	cli
    291e:	de bf       	out	0x3e, r29	; 62
    2920:	0f be       	out	0x3f, r0	; 63
    2922:	cd bf       	out	0x3d, r28	; 61
    2924:	09 94       	ijmp

00002926 <__epilogue_restores__>:
    2926:	2a 88       	ldd	r2, Y+18	; 0x12
    2928:	39 88       	ldd	r3, Y+17	; 0x11
    292a:	48 88       	ldd	r4, Y+16	; 0x10
    292c:	5f 84       	ldd	r5, Y+15	; 0x0f
    292e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2930:	7d 84       	ldd	r7, Y+13	; 0x0d
    2932:	8c 84       	ldd	r8, Y+12	; 0x0c
    2934:	9b 84       	ldd	r9, Y+11	; 0x0b
    2936:	aa 84       	ldd	r10, Y+10	; 0x0a
    2938:	b9 84       	ldd	r11, Y+9	; 0x09
    293a:	c8 84       	ldd	r12, Y+8	; 0x08
    293c:	df 80       	ldd	r13, Y+7	; 0x07
    293e:	ee 80       	ldd	r14, Y+6	; 0x06
    2940:	fd 80       	ldd	r15, Y+5	; 0x05
    2942:	0c 81       	ldd	r16, Y+4	; 0x04
    2944:	1b 81       	ldd	r17, Y+3	; 0x03
    2946:	aa 81       	ldd	r26, Y+2	; 0x02
    2948:	b9 81       	ldd	r27, Y+1	; 0x01
    294a:	ce 0f       	add	r28, r30
    294c:	d1 1d       	adc	r29, r1
    294e:	0f b6       	in	r0, 0x3f	; 63
    2950:	f8 94       	cli
    2952:	de bf       	out	0x3e, r29	; 62
    2954:	0f be       	out	0x3f, r0	; 63
    2956:	cd bf       	out	0x3d, r28	; 61
    2958:	ed 01       	movw	r28, r26
    295a:	08 95       	ret

0000295c <_exit>:
    295c:	f8 94       	cli

0000295e <__stop_program>:
    295e:	ff cf       	rjmp	.-2      	; 0x295e <__stop_program>
